// $ANTLR 3.2 Sep 23, 2009 12:02:23 C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g 2017-03-03 17:26:14

	package Languages.c;
	import java.util.Set;
	import java.util.HashSet;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

/** ANSI C ANTLR v3 grammar

Translated from Jutta Degener's 1995 ANSI C yacc grammar by Terence Parr
July 2006.  The lexical rules were taken from the Java grammar.

Jutta says: "In 1985, Jeff Lee published his Yacc grammar (which
is accompanied by a matching Lex specification) for the April 30, 1985 draft
version of the ANSI C standard.  Tom Stockfisch reposted it to net.sources in
1987; that original, as mentioned in the answer to question 17.25 of the
comp.lang.c FAQ, can be ftp'ed from ftp.uu.net,
   file usenet/net.sources/ansi.c.grammar.Z.
I intend to keep this version as close to the current C Standard grammar as
possible; please let me know if you discover discrepancies. Jutta Degener, 1995"

Generally speaking, you need symbol table info to parse C; typedefs
define types and then IDENTIFIERS are either types or plain IDs.  I'm doing
the min necessary here tracking only type names.  This is a good example
of the global scope (called Symbols).  Every rule that declares its usage
of Symbols pushes a new copy on the stack effectively creating a new
symbol scope.  Also note rule declaration declares a rule scope that
lets any invoked rule see isTypedef boolean.  It's much easier than
passing that info down as parameters.  Very clean.  Rule
direct_declarator can then easily determine whether the IDENTIFIER
should be declared as a type name.

I have only tested this on a single file, though it is 3500 lines.

This grammar requires ANTLR v3.0.1 or higher.

Terence Parr
July 2006
*/
public class CLangParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "PACKAGE_DECL", "CONCRETE_UNIT_DECL", "ACCESS_DECL", "INTERFACE_UNIT_DECL", "FUNCTION_DECL", "FORMAL_PARAM_LIST", "PARAMETER_DECL", "BLOCK_SCOPE", "IMPORT_DECL", "ATTRIBUTE_DECL", "VAR_DECL", "STATIC_ARRAY_CREATOR", "FUNCTION_CALL", "ARGUMENT_LIST", "ARGUMENT", "TYPE", "NAME", "EXTENDS", "CLASS_FIELDS", "ASSIGNMENT_STATEMENT", "ASSIGN_OPERATOR", "COMPILATION_UNIT", "MAIN_BLOCK", "CONDITION", "BRANCH_STATEMENT", "BRANCH", "JUMP_STATEMENT", "LOOP_STATEMENT", "INIT", "STEP", "LOGICAL_OPERATOR", "CONST", "KEYWORD", "SEPARATOR", "OPERATOR", "COMPARISON_OPERATOR", "BUILTIN_TYPE", "VALUE", "IDENTIFIER", "HEX_LITERAL", "OCTAL_LITERAL", "DECIMAL_LITERAL", "CHARACTER_LITERAL", "STRING_LITERAL", "FLOATING_POINT_LITERAL", "LETTER", "IntegerTypeSuffix", "EscapeSequence", "HexDigit", "Exponent", "FloatTypeSuffix", "OctalEscape", "UnicodeEscape", "WS", "COMMENT", "LINE_COMMENT", "LINE_COMMAND", "'typedef'", "'='", "','", "':'", "';'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'extern'", "'static'", "'auto'", "'register'", "'void'", "'char'", "'short'", "'int'", "'long'", "'float'", "'double'", "'signed'", "'unsigned'", "'uint8_t'", "'int8_t'", "'uint16_t'", "'int16_t'", "'uint32_t'", "'int32_t'", "'uint64_t'", "'int64_t'", "'__builtin_va_list'", "'struct'", "'union'", "'enum'", "'const'", "'volatile'", "'noreturn'", "'inline'", "'*'", "'...'", "'+'", "'-'", "'/'", "'%'", "'++'", "'--'", "'sizeof'", "'.'", "'->'", "'&'", "'~'", "'!'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", "'|='", "'?'", "'||'", "'&&'", "'|'", "'^'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'<<'", "'>>'", "'__asm__'", "'asm'", "'asm__'", "'__asm'", "'__const'", "'__const__'", "'const__'", "'__volatile__'", "'__volatile'", "'volatile__'", "'case'", "'default'", "'if'", "'else'", "'switch'", "'while'", "'do'", "'for'", "'goto'", "'continue'", "'break'", "'return'", "'__attribute__'", "'alias'", "'__alias__'", "'__alias'", "'alias__'", "'__aligned__'", "'__aligned'", "'aligned__'", "'aligned'", "'__always_inline__'", "'__always_inline'", "'always_inline__'", "'always_inline'", "'cdecl'", "'__cdecl__'", "'__cdecl'", "'cdecl__'", "'__cleanup__'", "'__cleanup'", "'cleanup__'", "'cleanup'", "'__constructor__'", "'__constructor'", "'constructor__'", "'constructor'", "'__deprecated__'", "'__deprecated'", "'deprecated__'", "'deprecated'", "'__destructor__'", "'__destructor'", "'destructor__'", "'destructor'", "'__dllexport__'", "'__dllexport'", "'dllexport__'", "'dllexport'", "'__dllimport__'", "'__dllimport'", "'dllimport__'", "'dllimport'", "'__eightbit__'", "'__eightbit'", "'eightbit__'", "'eightbit'", "'__format__'", "'__format'", "'format__'", "'format'", "'printf'", "'__printf__'", "'__printf'", "'printf__'", "'scanf'", "'__scanf__'", "'__scanf'", "'scanf__'", "'strftime'", "'__strftime__'", "'__strftime'", "'strftime__'", "'strfmon'", "'__strfmon__'", "'__strfmon'", "'strfmon__'", "'__leaf__'", "'__leaf'", "'leaf__'", "'leaf'", "'__malloc__'", "'__malloc'", "'malloc__'", "'malloc'", "'__noinline__'", "'__noinline'", "'noinline__'", "'noinline'", "'__noreturn__'", "'__noreturn'", "'noreturn__'", "'__used__'", "'__used'", "'used__'", "'used'", "'__unused__'", "'__unused'", "'unused__'", "'unused'", "'__mode__'", "'__mode'", "'mode__'", "'mode'", "'__nonnull__'", "'__nonnull'", "'nonnull__'", "'nonnull'", "'__nothrow__'", "'__nothrow'", "'nothrow__'", "'nothrow'", "'__pure__'", "'__pure'", "'pure__'", "'pure'", "'__transparent_union__'", "'__transparent_union'", "'transparent_union__'", "'transparent_union'", "'__vector_size__'", "'__vector_size'", "'vector_size__'", "'vector_size'", "'__visibility__'", "'__visibility'", "'visibility__'", "'visibility'", "'__weak__'", "'__weak'", "'weak__'", "'weak'"
    };
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__259=259;
    public static final int LETTER=49;
    public static final int T__258=258;
    public static final int CONST=35;
    public static final int T__257=257;
    public static final int T__262=262;
    public static final int T__263=263;
    public static final int T__160=160;
    public static final int T__260=260;
    public static final int CONDITION=27;
    public static final int T__261=261;
    public static final int T__266=266;
    public static final int SEPARATOR=37;
    public static final int T__267=267;
    public static final int T__264=264;
    public static final int T__265=265;
    public static final int T__167=167;
    public static final int EOF=-1;
    public static final int T__168=168;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int TYPE=19;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int STRING_LITERAL=47;
    public static final int T__148=148;
    public static final int LOGICAL_OPERATOR=34;
    public static final int T__147=147;
    public static final int T__90=90;
    public static final int T__149=149;
    public static final int T__247=247;
    public static final int T__246=246;
    public static final int T__249=249;
    public static final int T__248=248;
    public static final int COMPILATION_UNIT=25;
    public static final int T__250=250;
    public static final int T__251=251;
    public static final int T__252=252;
    public static final int T__253=253;
    public static final int T__254=254;
    public static final int T__255=255;
    public static final int T__256=256;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__99=99;
    public static final int T__157=157;
    public static final int T__98=98;
    public static final int T__150=150;
    public static final int T__97=97;
    public static final int T__151=151;
    public static final int T__96=96;
    public static final int T__152=152;
    public static final int T__95=95;
    public static final int T__153=153;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int KEYWORD=36;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int IntegerTypeSuffix=50;
    public static final int BUILTIN_TYPE=40;
    public static final int T__279=279;
    public static final int CHARACTER_LITERAL=46;
    public static final int VALUE=41;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int ATTRIBUTE_DECL=13;
    public static final int T__127=127;
    public static final int WS=57;
    public static final int T__71=71;
    public static final int T__129=129;
    public static final int T__72=72;
    public static final int T__70=70;
    public static final int T__269=269;
    public static final int T__268=268;
    public static final int T__275=275;
    public static final int T__276=276;
    public static final int T__277=277;
    public static final int T__278=278;
    public static final int FUNCTION_DECL=8;
    public static final int T__271=271;
    public static final int T__272=272;
    public static final int T__273=273;
    public static final int T__274=274;
    public static final int T__76=76;
    public static final int FUNCTION_CALL=16;
    public static final int T__75=75;
    public static final int INIT=32;
    public static final int T__130=130;
    public static final int T__74=74;
    public static final int DECIMAL_LITERAL=45;
    public static final int T__270=270;
    public static final int T__131=131;
    public static final int T__73=73;
    public static final int ACCESS_DECL=6;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int T__77=77;
    public static final int T__215=215;
    public static final int T__216=216;
    public static final int T__213=213;
    public static final int T__214=214;
    public static final int T__219=219;
    public static final int T__217=217;
    public static final int T__218=218;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int STEP=33;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int CLASS_FIELDS=22;
    public static final int HexDigit=52;
    public static final int STATIC_ARRAY_CREATOR=15;
    public static final int T__223=223;
    public static final int T__222=222;
    public static final int T__221=221;
    public static final int T__220=220;
    public static final int T__202=202;
    public static final int T__203=203;
    public static final int T__204=204;
    public static final int T__205=205;
    public static final int T__206=206;
    public static final int PARAMETER_DECL=10;
    public static final int T__207=207;
    public static final int T__208=208;
    public static final int T__209=209;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int ARGUMENT=18;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__210=210;
    public static final int T__212=212;
    public static final int T__211=211;
    public static final int T__239=239;
    public static final int T__237=237;
    public static final int T__238=238;
    public static final int COMPARISON_OPERATOR=39;
    public static final int T__235=235;
    public static final int T__236=236;
    public static final int JUMP_STATEMENT=30;
    public static final int ASSIGN_OPERATOR=24;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int PACKAGE_DECL=4;
    public static final int T__245=245;
    public static final int T__244=244;
    public static final int T__243=243;
    public static final int T__242=242;
    public static final int T__241=241;
    public static final int T__240=240;
    public static final int T__228=228;
    public static final int T__229=229;
    public static final int T__224=224;
    public static final int T__225=225;
    public static final int T__226=226;
    public static final int T__227=227;
    public static final int BRANCH=29;
    public static final int MAIN_BLOCK=26;
    public static final int T__232=232;
    public static final int T__231=231;
    public static final int T__234=234;
    public static final int OctalEscape=55;
    public static final int T__233=233;
    public static final int T__230=230;
    public static final int FloatTypeSuffix=54;
    public static final int ASSIGNMENT_STATEMENT=23;
    public static final int CONCRETE_UNIT_DECL=5;
    public static final int VAR_DECL=14;
    public static final int LOOP_STATEMENT=31;
    public static final int NAME=20;
    public static final int FLOATING_POINT_LITERAL=48;
    public static final int COMMENT=58;
    public static final int LINE_COMMENT=59;
    public static final int BLOCK_SCOPE=11;
    public static final int INTERFACE_UNIT_DECL=7;
    public static final int BRANCH_STATEMENT=28;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int LINE_COMMAND=60;
    public static final int EscapeSequence=51;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int Exponent=53;
    public static final int T__61=61;
    public static final int T__199=199;
    public static final int T__198=198;
    public static final int T__197=197;
    public static final int T__196=196;
    public static final int T__195=195;
    public static final int T__194=194;
    public static final int T__193=193;
    public static final int T__192=192;
    public static final int T__191=191;
    public static final int IDENTIFIER=42;
    public static final int T__190=190;
    public static final int ARGUMENT_LIST=17;
    public static final int HEX_LITERAL=43;
    public static final int FORMAL_PARAM_LIST=9;
    public static final int T__184=184;
    public static final int T__183=183;
    public static final int T__186=186;
    public static final int T__185=185;
    public static final int T__188=188;
    public static final int T__187=187;
    public static final int T__189=189;
    public static final int OPERATOR=38;
    public static final int IMPORT_DECL=12;
    public static final int T__180=180;
    public static final int T__182=182;
    public static final int T__181=181;
    public static final int OCTAL_LITERAL=44;
    public static final int T__175=175;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int T__179=179;
    public static final int T__178=178;
    public static final int T__177=177;
    public static final int T__176=176;
    public static final int UnicodeEscape=56;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int EXTENDS=21;
    public static final int T__169=169;

    // delegates
    // delegators

    protected static class Symbols_scope {
        Set types;
        // only track types in order to get parser working;
    }
    protected Stack Symbols_stack = new Stack();


        public CLangParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public CLangParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[526+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return CLangParser.tokenNames; }
    public String getGrammarFileName() { return "C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g"; }


    	String currentFunctionName = "";
    	boolean isTypeName(String name) {
    		for (int i = Symbols_stack.size()-1; i>=0; i--) {
    			Symbols_scope scope = (Symbols_scope)Symbols_stack.get(i);
    			if ( scope.types.contains(name) ) {
    				return true;
    			}
    		}
    		return false;
    	}


    public static class translation_unit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "translation_unit"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:132:1: translation_unit : ( external_declaration )+ -> ^( COMPILATION_UNIT ^( PACKAGE_DECL ( external_declaration )+ ) ) ;
    public final CLangParser.translation_unit_return translation_unit() throws RecognitionException {
        Symbols_stack.push(new Symbols_scope());

        CLangParser.translation_unit_return retval = new CLangParser.translation_unit_return();
        retval.start = input.LT(1);
        int translation_unit_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.external_declaration_return external_declaration1 = null;


        RewriteRuleSubtreeStream stream_external_declaration=new RewriteRuleSubtreeStream(adaptor,"rule external_declaration");

          ((Symbols_scope)Symbols_stack.peek()).types = new HashSet();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:137:2: ( ( external_declaration )+ -> ^( COMPILATION_UNIT ^( PACKAGE_DECL ( external_declaration )+ ) ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:137:4: ( external_declaration )+
            {
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:137:4: ( external_declaration )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                alt1 = dfa1.predict(input);
                switch (alt1) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: external_declaration
            	    {
            	    pushFollow(FOLLOW_external_declaration_in_translation_unit267);
            	    external_declaration1=external_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_external_declaration.add(external_declaration1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: external_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 138:2: -> ^( COMPILATION_UNIT ^( PACKAGE_DECL ( external_declaration )+ ) )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:138:5: ^( COMPILATION_UNIT ^( PACKAGE_DECL ( external_declaration )+ ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPILATION_UNIT, "COMPILATION_UNIT"), root_1);

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:138:25: ^( PACKAGE_DECL ( external_declaration )+ )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PACKAGE_DECL, "PACKAGE_DECL"), root_2);

                if ( !(stream_external_declaration.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_external_declaration.hasNext() ) {
                    adaptor.addChild(root_2, stream_external_declaration.nextTree());

                }
                stream_external_declaration.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, translation_unit_StartIndex); }
            Symbols_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "translation_unit"

    public static class external_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "external_declaration"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:141:1: external_declaration options {k=1; } : ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration );
    public final CLangParser.external_declaration_return external_declaration() throws RecognitionException {
        CLangParser.external_declaration_return retval = new CLangParser.external_declaration_return();
        retval.start = input.LT(1);
        int external_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.function_definition_return function_definition2 = null;

        CLangParser.declaration_return declaration3 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:157:2: ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration )
            int alt2=2;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:157:4: ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_function_definition_in_external_declaration322);
                    function_definition2=function_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_definition2.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:158:4: declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_declaration_in_external_declaration327);
                    declaration3=declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, declaration3.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, external_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "external_declaration"

    protected static class function_definition_scope {
        boolean isFuncDef;
    }
    protected Stack function_definition_stack = new Stack();

    public static class function_definition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_definition"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:161:1: function_definition : ( declaration_specifiers )? declarator funcBody -> ^( FUNCTION_DECL ( declaration_specifiers )? declarator funcBody ) ;
    public final CLangParser.function_definition_return function_definition() throws RecognitionException {
        Symbols_stack.push(new Symbols_scope());
        function_definition_stack.push(new function_definition_scope());
        CLangParser.function_definition_return retval = new CLangParser.function_definition_return();
        retval.start = input.LT(1);
        int function_definition_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.declaration_specifiers_return declaration_specifiers4 = null;

        CLangParser.declarator_return declarator5 = null;

        CLangParser.funcBody_return funcBody6 = null;


        RewriteRuleSubtreeStream stream_declaration_specifiers=new RewriteRuleSubtreeStream(adaptor,"rule declaration_specifiers");
        RewriteRuleSubtreeStream stream_declarator=new RewriteRuleSubtreeStream(adaptor,"rule declarator");
        RewriteRuleSubtreeStream stream_funcBody=new RewriteRuleSubtreeStream(adaptor,"rule funcBody");

        	((Symbols_scope)Symbols_stack.peek()).types = new HashSet();
        	((function_definition_scope)function_definition_stack.peek()).isFuncDef = true;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:170:2: ( ( declaration_specifiers )? declarator funcBody -> ^( FUNCTION_DECL ( declaration_specifiers )? declarator funcBody ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:170:4: ( declaration_specifiers )? declarator funcBody
            {
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:170:4: ( declaration_specifiers )?
            int alt3=2;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: declaration_specifiers
                    {
                    pushFollow(FOLLOW_declaration_specifiers_in_function_definition353);
                    declaration_specifiers4=declaration_specifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_declaration_specifiers.add(declaration_specifiers4.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_declarator_in_function_definition356);
            declarator5=declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_declarator.add(declarator5.getTree());
            pushFollow(FOLLOW_funcBody_in_function_definition358);
            funcBody6=funcBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcBody.add(funcBody6.getTree());


            // AST REWRITE
            // elements: declarator, declaration_specifiers, funcBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 171:3: -> ^( FUNCTION_DECL ( declaration_specifiers )? declarator funcBody )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:171:6: ^( FUNCTION_DECL ( declaration_specifiers )? declarator funcBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_DECL, "FUNCTION_DECL"), root_1);

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:171:23: ( declaration_specifiers )?
                if ( stream_declaration_specifiers.hasNext() ) {
                    adaptor.addChild(root_1, stream_declaration_specifiers.nextTree());

                }
                stream_declaration_specifiers.reset();
                adaptor.addChild(root_1, stream_declarator.nextTree());
                adaptor.addChild(root_1, stream_funcBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, function_definition_StartIndex); }
            Symbols_stack.pop();
            function_definition_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "function_definition"

    public static class funcBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "funcBody"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:174:1: funcBody : ( ( parameter_declaration_KAndR )+ compound_statement -> ^( FORMAL_PARAM_LIST ( parameter_declaration_KAndR )+ ) ^( BLOCK_SCOPE compound_statement ) | compound_statement -> ^( BLOCK_SCOPE compound_statement ) );
    public final CLangParser.funcBody_return funcBody() throws RecognitionException {
        CLangParser.funcBody_return retval = new CLangParser.funcBody_return();
        retval.start = input.LT(1);
        int funcBody_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.parameter_declaration_KAndR_return parameter_declaration_KAndR7 = null;

        CLangParser.compound_statement_return compound_statement8 = null;

        CLangParser.compound_statement_return compound_statement9 = null;


        RewriteRuleSubtreeStream stream_compound_statement=new RewriteRuleSubtreeStream(adaptor,"rule compound_statement");
        RewriteRuleSubtreeStream stream_parameter_declaration_KAndR=new RewriteRuleSubtreeStream(adaptor,"rule parameter_declaration_KAndR");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:175:2: ( ( parameter_declaration_KAndR )+ compound_statement -> ^( FORMAL_PARAM_LIST ( parameter_declaration_KAndR )+ ) ^( BLOCK_SCOPE compound_statement ) | compound_statement -> ^( BLOCK_SCOPE compound_statement ) )
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==IDENTIFIER||(LA5_0>=72 && LA5_0<=100)) ) {
                alt5=1;
            }
            else if ( (LA5_0==70) ) {
                alt5=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;
            }
            switch (alt5) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:175:4: ( parameter_declaration_KAndR )+ compound_statement
                    {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:175:4: ( parameter_declaration_KAndR )+
                    int cnt4=0;
                    loop4:
                    do {
                        int alt4=2;
                        int LA4_0 = input.LA(1);

                        if ( (LA4_0==IDENTIFIER||(LA4_0>=72 && LA4_0<=100)) ) {
                            alt4=1;
                        }


                        switch (alt4) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: parameter_declaration_KAndR
                    	    {
                    	    pushFollow(FOLLOW_parameter_declaration_KAndR_in_funcBody386);
                    	    parameter_declaration_KAndR7=parameter_declaration_KAndR();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_parameter_declaration_KAndR.add(parameter_declaration_KAndR7.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt4 >= 1 ) break loop4;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(4, input);
                                throw eee;
                        }
                        cnt4++;
                    } while (true);

                    pushFollow(FOLLOW_compound_statement_in_funcBody389);
                    compound_statement8=compound_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_compound_statement.add(compound_statement8.getTree());


                    // AST REWRITE
                    // elements: compound_statement, parameter_declaration_KAndR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 176:3: -> ^( FORMAL_PARAM_LIST ( parameter_declaration_KAndR )+ ) ^( BLOCK_SCOPE compound_statement )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:176:6: ^( FORMAL_PARAM_LIST ( parameter_declaration_KAndR )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_LIST, "FORMAL_PARAM_LIST"), root_1);

                        if ( !(stream_parameter_declaration_KAndR.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_parameter_declaration_KAndR.hasNext() ) {
                            adaptor.addChild(root_1, stream_parameter_declaration_KAndR.nextTree());

                        }
                        stream_parameter_declaration_KAndR.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:176:58: ^( BLOCK_SCOPE compound_statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, "BLOCK_SCOPE"), root_1);

                        adaptor.addChild(root_1, stream_compound_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:177:4: compound_statement
                    {
                    pushFollow(FOLLOW_compound_statement_in_funcBody414);
                    compound_statement9=compound_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_compound_statement.add(compound_statement9.getTree());


                    // AST REWRITE
                    // elements: compound_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 177:24: -> ^( BLOCK_SCOPE compound_statement )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:177:27: ^( BLOCK_SCOPE compound_statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, "BLOCK_SCOPE"), root_1);

                        adaptor.addChild(root_1, stream_compound_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, funcBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "funcBody"

    public static class parameter_declaration_KAndR_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_declaration_KAndR"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:201:1: parameter_declaration_KAndR : declaration_specifiers ( init_declarator_list )? semi -> ^( PARAMETER_DECL declaration_specifiers ( init_declarator_list )? semi ) ;
    public final CLangParser.parameter_declaration_KAndR_return parameter_declaration_KAndR() throws RecognitionException {
        CLangParser.parameter_declaration_KAndR_return retval = new CLangParser.parameter_declaration_KAndR_return();
        retval.start = input.LT(1);
        int parameter_declaration_KAndR_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.declaration_specifiers_return declaration_specifiers10 = null;

        CLangParser.init_declarator_list_return init_declarator_list11 = null;

        CLangParser.semi_return semi12 = null;


        RewriteRuleSubtreeStream stream_declaration_specifiers=new RewriteRuleSubtreeStream(adaptor,"rule declaration_specifiers");
        RewriteRuleSubtreeStream stream_init_declarator_list=new RewriteRuleSubtreeStream(adaptor,"rule init_declarator_list");
        RewriteRuleSubtreeStream stream_semi=new RewriteRuleSubtreeStream(adaptor,"rule semi");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:202:2: ( declaration_specifiers ( init_declarator_list )? semi -> ^( PARAMETER_DECL declaration_specifiers ( init_declarator_list )? semi ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:202:4: declaration_specifiers ( init_declarator_list )? semi
            {
            pushFollow(FOLLOW_declaration_specifiers_in_parameter_declaration_KAndR439);
            declaration_specifiers10=declaration_specifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_declaration_specifiers.add(declaration_specifiers10.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:202:27: ( init_declarator_list )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==IDENTIFIER||LA6_0==66||LA6_0==101||LA6_0==160) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: init_declarator_list
                    {
                    pushFollow(FOLLOW_init_declarator_list_in_parameter_declaration_KAndR441);
                    init_declarator_list11=init_declarator_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_init_declarator_list.add(init_declarator_list11.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_semi_in_parameter_declaration_KAndR444);
            semi12=semi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_semi.add(semi12.getTree());


            // AST REWRITE
            // elements: init_declarator_list, semi, declaration_specifiers
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 203:3: -> ^( PARAMETER_DECL declaration_specifiers ( init_declarator_list )? semi )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:203:6: ^( PARAMETER_DECL declaration_specifiers ( init_declarator_list )? semi )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMETER_DECL, "PARAMETER_DECL"), root_1);

                adaptor.addChild(root_1, stream_declaration_specifiers.nextTree());
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:203:47: ( init_declarator_list )?
                if ( stream_init_declarator_list.hasNext() ) {
                    adaptor.addChild(root_1, stream_init_declarator_list.nextTree());

                }
                stream_init_declarator_list.reset();
                adaptor.addChild(root_1, stream_semi.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, parameter_declaration_KAndR_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_declaration_KAndR"

    protected static class declaration_scope {
        boolean isTypedef;
    }
    protected Stack declaration_stack = new Stack();

    public static class declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declaration"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:206:1: declaration : ( 'typedef' ( storage_class_specifier_h | type_specifier_s | type_qualifier_h )+ init_declarator_list semi | ( attribute_spec )* declaration_specifiers ( init_declarator_list )? semi -> ( attribute_spec )* ^( VAR_DECL declaration_specifiers ( init_declarator_list )? semi ) );
    public final CLangParser.declaration_return declaration() throws RecognitionException {
        declaration_stack.push(new declaration_scope());
        CLangParser.declaration_return retval = new CLangParser.declaration_return();
        retval.start = input.LT(1);
        int declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal13=null;
        CLangParser.storage_class_specifier_h_return storage_class_specifier_h14 = null;

        CLangParser.type_specifier_s_return type_specifier_s15 = null;

        CLangParser.type_qualifier_h_return type_qualifier_h16 = null;

        CLangParser.init_declarator_list_return init_declarator_list17 = null;

        CLangParser.semi_return semi18 = null;

        CLangParser.attribute_spec_return attribute_spec19 = null;

        CLangParser.declaration_specifiers_return declaration_specifiers20 = null;

        CLangParser.init_declarator_list_return init_declarator_list21 = null;

        CLangParser.semi_return semi22 = null;


        CommonTree string_literal13_tree=null;
        RewriteRuleSubtreeStream stream_declaration_specifiers=new RewriteRuleSubtreeStream(adaptor,"rule declaration_specifiers");
        RewriteRuleSubtreeStream stream_init_declarator_list=new RewriteRuleSubtreeStream(adaptor,"rule init_declarator_list");
        RewriteRuleSubtreeStream stream_semi=new RewriteRuleSubtreeStream(adaptor,"rule semi");
        RewriteRuleSubtreeStream stream_attribute_spec=new RewriteRuleSubtreeStream(adaptor,"rule attribute_spec");

          ((declaration_scope)declaration_stack.peek()).isTypedef = false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:213:2: ( 'typedef' ( storage_class_specifier_h | type_specifier_s | type_qualifier_h )+ init_declarator_list semi | ( attribute_spec )* declaration_specifiers ( init_declarator_list )? semi -> ( attribute_spec )* ^( VAR_DECL declaration_specifiers ( init_declarator_list )? semi ) )
            int alt10=2;
            alt10 = dfa10.predict(input);
            switch (alt10) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:213:4: 'typedef' ( storage_class_specifier_h | type_specifier_s | type_qualifier_h )+ init_declarator_list semi
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal13=(Token)match(input,61,FOLLOW_61_in_declaration481); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal13_tree = (CommonTree)adaptor.create(string_literal13);
                    adaptor.addChild(root_0, string_literal13_tree);
                    }
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:213:14: ( storage_class_specifier_h | type_specifier_s | type_qualifier_h )+
                    int cnt7=0;
                    loop7:
                    do {
                        int alt7=4;
                        alt7 = dfa7.predict(input);
                        switch (alt7) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:213:16: storage_class_specifier_h
                    	    {
                    	    pushFollow(FOLLOW_storage_class_specifier_h_in_declaration485);
                    	    storage_class_specifier_h14=storage_class_specifier_h();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, storage_class_specifier_h14.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:213:44: type_specifier_s
                    	    {
                    	    pushFollow(FOLLOW_type_specifier_s_in_declaration489);
                    	    type_specifier_s15=type_specifier_s();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_specifier_s15.getTree());

                    	    }
                    	    break;
                    	case 3 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:213:63: type_qualifier_h
                    	    {
                    	    pushFollow(FOLLOW_type_qualifier_h_in_declaration493);
                    	    type_qualifier_h16=type_qualifier_h();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_qualifier_h16.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt7 >= 1 ) break loop7;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(7, input);
                                throw eee;
                        }
                        cnt7++;
                    } while (true);

                    if ( state.backtracking==0 ) {
                      ((declaration_scope)declaration_stack.peek()).isTypedef =true;
                    }
                    pushFollow(FOLLOW_init_declarator_list_in_declaration502);
                    init_declarator_list17=init_declarator_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, init_declarator_list17.getTree());
                    pushFollow(FOLLOW_semi_in_declaration504);
                    semi18=semi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, semi18.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:215:4: ( attribute_spec )* declaration_specifiers ( init_declarator_list )? semi
                    {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:215:4: ( attribute_spec )*
                    loop8:
                    do {
                        int alt8=2;
                        int LA8_0 = input.LA(1);

                        if ( (LA8_0==160) ) {
                            alt8=1;
                        }


                        switch (alt8) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: attribute_spec
                    	    {
                    	    pushFollow(FOLLOW_attribute_spec_in_declaration510);
                    	    attribute_spec19=attribute_spec();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_attribute_spec.add(attribute_spec19.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop8;
                        }
                    } while (true);

                    pushFollow(FOLLOW_declaration_specifiers_in_declaration513);
                    declaration_specifiers20=declaration_specifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_declaration_specifiers.add(declaration_specifiers20.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:215:43: ( init_declarator_list )?
                    int alt9=2;
                    int LA9_0 = input.LA(1);

                    if ( (LA9_0==IDENTIFIER||LA9_0==66||LA9_0==101||LA9_0==160) ) {
                        alt9=1;
                    }
                    switch (alt9) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: init_declarator_list
                            {
                            pushFollow(FOLLOW_init_declarator_list_in_declaration515);
                            init_declarator_list21=init_declarator_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_init_declarator_list.add(init_declarator_list21.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_semi_in_declaration518);
                    semi22=semi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_semi.add(semi22.getTree());


                    // AST REWRITE
                    // elements: attribute_spec, declaration_specifiers, init_declarator_list, semi
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 216:3: -> ( attribute_spec )* ^( VAR_DECL declaration_specifiers ( init_declarator_list )? semi )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:216:6: ( attribute_spec )*
                        while ( stream_attribute_spec.hasNext() ) {
                            adaptor.addChild(root_0, stream_attribute_spec.nextTree());

                        }
                        stream_attribute_spec.reset();
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:216:22: ^( VAR_DECL declaration_specifiers ( init_declarator_list )? semi )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECL, "VAR_DECL"), root_1);

                        adaptor.addChild(root_1, stream_declaration_specifiers.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:216:57: ( init_declarator_list )?
                        if ( stream_init_declarator_list.hasNext() ) {
                            adaptor.addChild(root_1, stream_init_declarator_list.nextTree());

                        }
                        stream_init_declarator_list.reset();
                        adaptor.addChild(root_1, stream_semi.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, declaration_StartIndex); }
            declaration_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "declaration"

    public static class declaration_specifiers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declaration_specifiers"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:219:1: declaration_specifiers : ( storage_class_specifier_h | type_specifier_s | type_qualifier_h | function_specifier_h )+ ;
    public final CLangParser.declaration_specifiers_return declaration_specifiers() throws RecognitionException {
        CLangParser.declaration_specifiers_return retval = new CLangParser.declaration_specifiers_return();
        retval.start = input.LT(1);
        int declaration_specifiers_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.storage_class_specifier_h_return storage_class_specifier_h23 = null;

        CLangParser.type_specifier_s_return type_specifier_s24 = null;

        CLangParser.type_qualifier_h_return type_qualifier_h25 = null;

        CLangParser.function_specifier_h_return function_specifier_h26 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:220:2: ( ( storage_class_specifier_h | type_specifier_s | type_qualifier_h | function_specifier_h )+ )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:220:4: ( storage_class_specifier_h | type_specifier_s | type_qualifier_h | function_specifier_h )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:220:4: ( storage_class_specifier_h | type_specifier_s | type_qualifier_h | function_specifier_h )+
            int cnt11=0;
            loop11:
            do {
                int alt11=5;
                alt11 = dfa11.predict(input);
                switch (alt11) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:220:8: storage_class_specifier_h
            	    {
            	    pushFollow(FOLLOW_storage_class_specifier_h_in_declaration_specifiers553);
            	    storage_class_specifier_h23=storage_class_specifier_h();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, storage_class_specifier_h23.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:221:7: type_specifier_s
            	    {
            	    pushFollow(FOLLOW_type_specifier_s_in_declaration_specifiers561);
            	    type_specifier_s24=type_specifier_s();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_specifier_s24.getTree());

            	    }
            	    break;
            	case 3 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:222:7: type_qualifier_h
            	    {
            	    pushFollow(FOLLOW_type_qualifier_h_in_declaration_specifiers569);
            	    type_qualifier_h25=type_qualifier_h();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_qualifier_h25.getTree());

            	    }
            	    break;
            	case 4 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:223:5: function_specifier_h
            	    {
            	    pushFollow(FOLLOW_function_specifier_h_in_declaration_specifiers575);
            	    function_specifier_h26=function_specifier_h();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_specifier_h26.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt11 >= 1 ) break loop11;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(11, input);
                        throw eee;
                }
                cnt11++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, declaration_specifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "declaration_specifiers"

    public static class assignOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:227:1: assignOp : '=' ;
    public final CLangParser.assignOp_return assignOp() throws RecognitionException {
        CLangParser.assignOp_return retval = new CLangParser.assignOp_return();
        retval.start = input.LT(1);
        int assignOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal27=null;

        CommonTree char_literal27_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:227:10: ( '=' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:227:12: '='
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal27=(Token)match(input,62,FOLLOW_62_in_assignOp590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal27_tree = (CommonTree)adaptor.create(char_literal27);
            adaptor.addChild(root_0, char_literal27_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, assignOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignOp"

    public static class comma_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:228:1: comma : ',' -> ^( SEPARATOR ',' ) ;
    public final CLangParser.comma_return comma() throws RecognitionException {
        CLangParser.comma_return retval = new CLangParser.comma_return();
        retval.start = input.LT(1);
        int comma_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal28=null;

        CommonTree char_literal28_tree=null;
        RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:228:8: ( ',' -> ^( SEPARATOR ',' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:228:10: ','
            {
            char_literal28=(Token)match(input,63,FOLLOW_63_in_comma599); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_63.add(char_literal28);



            // AST REWRITE
            // elements: 63
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 228:14: -> ^( SEPARATOR ',' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:228:17: ^( SEPARATOR ',' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_1);

                adaptor.addChild(root_1, stream_63.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, comma_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class colon_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:229:1: colon : ':' -> ^( SEPARATOR ':' ) ;
    public final CLangParser.colon_return colon() throws RecognitionException {
        CLangParser.colon_return retval = new CLangParser.colon_return();
        retval.start = input.LT(1);
        int colon_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal29=null;

        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:229:8: ( ':' -> ^( SEPARATOR ':' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:229:10: ':'
            {
            char_literal29=(Token)match(input,64,FOLLOW_64_in_colon618); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_64.add(char_literal29);



            // AST REWRITE
            // elements: 64
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 229:14: -> ^( SEPARATOR ':' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:229:17: ^( SEPARATOR ':' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_1);

                adaptor.addChild(root_1, stream_64.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, colon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class semi_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "semi"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:230:1: semi : ';' -> ^( SEPARATOR ';' ) ;
    public final CLangParser.semi_return semi() throws RecognitionException {
        CLangParser.semi_return retval = new CLangParser.semi_return();
        retval.start = input.LT(1);
        int semi_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal30=null;

        CommonTree char_literal30_tree=null;
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:230:7: ( ';' -> ^( SEPARATOR ';' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:230:9: ';'
            {
            char_literal30=(Token)match(input,65,FOLLOW_65_in_semi637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_65.add(char_literal30);



            // AST REWRITE
            // elements: 65
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 230:13: -> ^( SEPARATOR ';' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:230:16: ^( SEPARATOR ';' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_1);

                adaptor.addChild(root_1, stream_65.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, semi_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "semi"

    public static class lpar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lpar"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:231:1: lpar : '(' -> ^( SEPARATOR '(' ) ;
    public final CLangParser.lpar_return lpar() throws RecognitionException {
        CLangParser.lpar_return retval = new CLangParser.lpar_return();
        retval.start = input.LT(1);
        int lpar_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal31=null;

        CommonTree char_literal31_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:231:7: ( '(' -> ^( SEPARATOR '(' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:231:9: '('
            {
            char_literal31=(Token)match(input,66,FOLLOW_66_in_lpar656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_66.add(char_literal31);



            // AST REWRITE
            // elements: 66
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 231:13: -> ^( SEPARATOR '(' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:231:16: ^( SEPARATOR '(' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_1);

                adaptor.addChild(root_1, stream_66.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, lpar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lpar"

    public static class rpar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rpar"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:232:1: rpar : ')' -> ^( SEPARATOR ')' ) ;
    public final CLangParser.rpar_return rpar() throws RecognitionException {
        CLangParser.rpar_return retval = new CLangParser.rpar_return();
        retval.start = input.LT(1);
        int rpar_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal32=null;

        CommonTree char_literal32_tree=null;
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:232:7: ( ')' -> ^( SEPARATOR ')' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:232:9: ')'
            {
            char_literal32=(Token)match(input,67,FOLLOW_67_in_rpar675); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_67.add(char_literal32);



            // AST REWRITE
            // elements: 67
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 232:13: -> ^( SEPARATOR ')' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:232:16: ^( SEPARATOR ')' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_1);

                adaptor.addChild(root_1, stream_67.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, rpar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rpar"

    public static class lbrack_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lbrack"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:233:1: lbrack : '[' -> ^( SEPARATOR '[' ) ;
    public final CLangParser.lbrack_return lbrack() throws RecognitionException {
        CLangParser.lbrack_return retval = new CLangParser.lbrack_return();
        retval.start = input.LT(1);
        int lbrack_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal33=null;

        CommonTree char_literal33_tree=null;
        RewriteRuleTokenStream stream_68=new RewriteRuleTokenStream(adaptor,"token 68");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:233:9: ( '[' -> ^( SEPARATOR '[' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:233:11: '['
            {
            char_literal33=(Token)match(input,68,FOLLOW_68_in_lbrack694); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_68.add(char_literal33);



            // AST REWRITE
            // elements: 68
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 233:15: -> ^( SEPARATOR '[' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:233:18: ^( SEPARATOR '[' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_1);

                adaptor.addChild(root_1, stream_68.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, lbrack_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lbrack"

    public static class rbrack_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbrack"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:234:1: rbrack : ']' -> ^( SEPARATOR ']' ) ;
    public final CLangParser.rbrack_return rbrack() throws RecognitionException {
        CLangParser.rbrack_return retval = new CLangParser.rbrack_return();
        retval.start = input.LT(1);
        int rbrack_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal34=null;

        CommonTree char_literal34_tree=null;
        RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:234:9: ( ']' -> ^( SEPARATOR ']' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:234:11: ']'
            {
            char_literal34=(Token)match(input,69,FOLLOW_69_in_rbrack713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_69.add(char_literal34);



            // AST REWRITE
            // elements: 69
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 234:15: -> ^( SEPARATOR ']' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:234:18: ^( SEPARATOR ']' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_1);

                adaptor.addChild(root_1, stream_69.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, rbrack_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbrack"

    public static class lbrace_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lbrace"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:235:1: lbrace : '{' -> ^( SEPARATOR '{' ) ;
    public final CLangParser.lbrace_return lbrace() throws RecognitionException {
        CLangParser.lbrace_return retval = new CLangParser.lbrace_return();
        retval.start = input.LT(1);
        int lbrace_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal35=null;

        CommonTree char_literal35_tree=null;
        RewriteRuleTokenStream stream_70=new RewriteRuleTokenStream(adaptor,"token 70");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:235:9: ( '{' -> ^( SEPARATOR '{' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:235:11: '{'
            {
            char_literal35=(Token)match(input,70,FOLLOW_70_in_lbrace732); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_70.add(char_literal35);



            // AST REWRITE
            // elements: 70
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 235:15: -> ^( SEPARATOR '{' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:235:18: ^( SEPARATOR '{' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_1);

                adaptor.addChild(root_1, stream_70.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, lbrace_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lbrace"

    public static class rbrace_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbrace"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:236:1: rbrace : '}' -> ^( SEPARATOR '}' ) ;
    public final CLangParser.rbrace_return rbrace() throws RecognitionException {
        CLangParser.rbrace_return retval = new CLangParser.rbrace_return();
        retval.start = input.LT(1);
        int rbrace_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal36=null;

        CommonTree char_literal36_tree=null;
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:236:9: ( '}' -> ^( SEPARATOR '}' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:236:11: '}'
            {
            char_literal36=(Token)match(input,71,FOLLOW_71_in_rbrace751); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_71.add(char_literal36);



            // AST REWRITE
            // elements: 71
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 236:15: -> ^( SEPARATOR '}' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:236:18: ^( SEPARATOR '}' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_1);

                adaptor.addChild(root_1, stream_71.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, rbrace_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbrace"

    public static class init_declarator_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "init_declarator_list"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:238:1: init_declarator_list : init_declarator ( comma init_declarator )* ;
    public final CLangParser.init_declarator_list_return init_declarator_list() throws RecognitionException {
        CLangParser.init_declarator_list_return retval = new CLangParser.init_declarator_list_return();
        retval.start = input.LT(1);
        int init_declarator_list_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.init_declarator_return init_declarator37 = null;

        CLangParser.comma_return comma38 = null;

        CLangParser.init_declarator_return init_declarator39 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:239:2: ( init_declarator ( comma init_declarator )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:239:4: init_declarator ( comma init_declarator )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_init_declarator_in_init_declarator_list771);
            init_declarator37=init_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, init_declarator37.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:239:20: ( comma init_declarator )*
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==63) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:239:22: comma init_declarator
            	    {
            	    pushFollow(FOLLOW_comma_in_init_declarator_list775);
            	    comma38=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma38.getTree());
            	    pushFollow(FOLLOW_init_declarator_in_init_declarator_list777);
            	    init_declarator39=init_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, init_declarator39.getTree());

            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, init_declarator_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "init_declarator_list"

    public static class init_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "init_declarator"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:242:1: init_declarator : declarator ( ( attributes_or_asm )* -> declarator ( attributes_or_asm )* | assignOp initializer ( attributes_or_asm )* -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp declarator ^( VALUE initializer ) ( attributes_or_asm )* ) ) ) ;
    public final CLangParser.init_declarator_return init_declarator() throws RecognitionException {
        CLangParser.init_declarator_return retval = new CLangParser.init_declarator_return();
        retval.start = input.LT(1);
        int init_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.declarator_return declarator40 = null;

        CLangParser.attributes_or_asm_return attributes_or_asm41 = null;

        CLangParser.assignOp_return assignOp42 = null;

        CLangParser.initializer_return initializer43 = null;

        CLangParser.attributes_or_asm_return attributes_or_asm44 = null;


        RewriteRuleSubtreeStream stream_attributes_or_asm=new RewriteRuleSubtreeStream(adaptor,"rule attributes_or_asm");
        RewriteRuleSubtreeStream stream_declarator=new RewriteRuleSubtreeStream(adaptor,"rule declarator");
        RewriteRuleSubtreeStream stream_assignOp=new RewriteRuleSubtreeStream(adaptor,"rule assignOp");
        RewriteRuleSubtreeStream stream_initializer=new RewriteRuleSubtreeStream(adaptor,"rule initializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:243:2: ( declarator ( ( attributes_or_asm )* -> declarator ( attributes_or_asm )* | assignOp initializer ( attributes_or_asm )* -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp declarator ^( VALUE initializer ) ( attributes_or_asm )* ) ) ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:243:4: declarator ( ( attributes_or_asm )* -> declarator ( attributes_or_asm )* | assignOp initializer ( attributes_or_asm )* -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp declarator ^( VALUE initializer ) ( attributes_or_asm )* ) ) )
            {
            pushFollow(FOLLOW_declarator_in_init_declarator791);
            declarator40=declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_declarator.add(declarator40.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:243:15: ( ( attributes_or_asm )* -> declarator ( attributes_or_asm )* | assignOp initializer ( attributes_or_asm )* -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp declarator ^( VALUE initializer ) ( attributes_or_asm )* ) ) )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==EOF||LA15_0==63||LA15_0==65||LA15_0==160) ) {
                alt15=1;
            }
            else if ( (LA15_0==62) ) {
                alt15=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }
            switch (alt15) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:244:2: ( attributes_or_asm )*
                    {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:244:2: ( attributes_or_asm )*
                    loop13:
                    do {
                        int alt13=2;
                        int LA13_0 = input.LA(1);

                        if ( (LA13_0==160) ) {
                            alt13=1;
                        }


                        switch (alt13) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: attributes_or_asm
                    	    {
                    	    pushFollow(FOLLOW_attributes_or_asm_in_init_declarator797);
                    	    attributes_or_asm41=attributes_or_asm();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_attributes_or_asm.add(attributes_or_asm41.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop13;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: attributes_or_asm, declarator
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 244:21: -> declarator ( attributes_or_asm )*
                    {
                        adaptor.addChild(root_0, stream_declarator.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:244:35: ( attributes_or_asm )*
                        while ( stream_attributes_or_asm.hasNext() ) {
                            adaptor.addChild(root_0, stream_attributes_or_asm.nextTree());

                        }
                        stream_attributes_or_asm.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:245:4: assignOp initializer ( attributes_or_asm )*
                    {
                    pushFollow(FOLLOW_assignOp_in_init_declarator810);
                    assignOp42=assignOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignOp.add(assignOp42.getTree());
                    pushFollow(FOLLOW_initializer_in_init_declarator812);
                    initializer43=initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_initializer.add(initializer43.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:245:25: ( attributes_or_asm )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==160) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: attributes_or_asm
                    	    {
                    	    pushFollow(FOLLOW_attributes_or_asm_in_init_declarator814);
                    	    attributes_or_asm44=attributes_or_asm();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_attributes_or_asm.add(attributes_or_asm44.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: attributes_or_asm, assignOp, initializer, declarator
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 245:44: -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp declarator ^( VALUE initializer ) ( attributes_or_asm )* ) )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:245:47: ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp declarator ^( VALUE initializer ) ( attributes_or_asm )* ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGNMENT_STATEMENT, "ASSIGNMENT_STATEMENT"), root_1);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:245:72: ^( ASSIGN_OPERATOR assignOp declarator ^( VALUE initializer ) ( attributes_or_asm )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGN_OPERATOR, "ASSIGN_OPERATOR"), root_2);

                        adaptor.addChild(root_2, stream_assignOp.nextTree());
                        adaptor.addChild(root_2, stream_declarator.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:245:111: ^( VALUE initializer )
                        {
                        CommonTree root_3 = (CommonTree)adaptor.nil();
                        root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VALUE, "VALUE"), root_3);

                        adaptor.addChild(root_3, stream_initializer.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:245:132: ( attributes_or_asm )*
                        while ( stream_attributes_or_asm.hasNext() ) {
                            adaptor.addChild(root_2, stream_attributes_or_asm.nextTree());

                        }
                        stream_attributes_or_asm.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, init_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "init_declarator"

    public static class storage_class_specifier_h_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "storage_class_specifier_h"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:248:1: storage_class_specifier_h : storage_class_specifier -> ^( KEYWORD storage_class_specifier ) ;
    public final CLangParser.storage_class_specifier_h_return storage_class_specifier_h() throws RecognitionException {
        CLangParser.storage_class_specifier_h_return retval = new CLangParser.storage_class_specifier_h_return();
        retval.start = input.LT(1);
        int storage_class_specifier_h_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.storage_class_specifier_return storage_class_specifier45 = null;


        RewriteRuleSubtreeStream stream_storage_class_specifier=new RewriteRuleSubtreeStream(adaptor,"rule storage_class_specifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:249:2: ( storage_class_specifier -> ^( KEYWORD storage_class_specifier ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:249:4: storage_class_specifier
            {
            pushFollow(FOLLOW_storage_class_specifier_in_storage_class_specifier_h855);
            storage_class_specifier45=storage_class_specifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_storage_class_specifier.add(storage_class_specifier45.getTree());


            // AST REWRITE
            // elements: storage_class_specifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 249:28: -> ^( KEYWORD storage_class_specifier )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:249:31: ^( KEYWORD storage_class_specifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                adaptor.addChild(root_1, stream_storage_class_specifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, storage_class_specifier_h_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "storage_class_specifier_h"

    public static class storage_class_specifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "storage_class_specifier"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:252:1: storage_class_specifier : ( 'extern' | 'static' | 'auto' | 'register' );
    public final CLangParser.storage_class_specifier_return storage_class_specifier() throws RecognitionException {
        CLangParser.storage_class_specifier_return retval = new CLangParser.storage_class_specifier_return();
        retval.start = input.LT(1);
        int storage_class_specifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set46=null;

        CommonTree set46_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:253:2: ( 'extern' | 'static' | 'auto' | 'register' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set46=(Token)input.LT(1);
            if ( (input.LA(1)>=72 && input.LA(1)<=75) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set46));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, storage_class_specifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "storage_class_specifier"

    public static class type_specifier_s_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_specifier_s"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:259:1: type_specifier_s : type_specifier_h -> ^( TYPE type_specifier_h ) ;
    public final CLangParser.type_specifier_s_return type_specifier_s() throws RecognitionException {
        CLangParser.type_specifier_s_return retval = new CLangParser.type_specifier_s_return();
        retval.start = input.LT(1);
        int type_specifier_s_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.type_specifier_h_return type_specifier_h47 = null;


        RewriteRuleSubtreeStream stream_type_specifier_h=new RewriteRuleSubtreeStream(adaptor,"rule type_specifier_h");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:260:2: ( type_specifier_h -> ^( TYPE type_specifier_h ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:260:4: type_specifier_h
            {
            pushFollow(FOLLOW_type_specifier_h_in_type_specifier_s902);
            type_specifier_h47=type_specifier_h();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_specifier_h.add(type_specifier_h47.getTree());


            // AST REWRITE
            // elements: type_specifier_h
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 260:21: -> ^( TYPE type_specifier_h )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:260:24: ^( TYPE type_specifier_h )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_type_specifier_h.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, type_specifier_s_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_specifier_s"

    public static class type_specifier_h_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_specifier_h"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:264:1: type_specifier_h : ( type_specifier -> ^( TYPE type_specifier ) | struct_or_union_specifier | enum_specifier | type_id );
    public final CLangParser.type_specifier_h_return type_specifier_h() throws RecognitionException {
        CLangParser.type_specifier_h_return retval = new CLangParser.type_specifier_h_return();
        retval.start = input.LT(1);
        int type_specifier_h_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.type_specifier_return type_specifier48 = null;

        CLangParser.struct_or_union_specifier_return struct_or_union_specifier49 = null;

        CLangParser.enum_specifier_return enum_specifier50 = null;

        CLangParser.type_id_return type_id51 = null;


        RewriteRuleSubtreeStream stream_type_specifier=new RewriteRuleSubtreeStream(adaptor,"rule type_specifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:265:2: ( type_specifier -> ^( TYPE type_specifier ) | struct_or_union_specifier | enum_specifier | type_id )
            int alt16=4;
            switch ( input.LA(1) ) {
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
                {
                alt16=1;
                }
                break;
            case 94:
            case 95:
                {
                alt16=2;
                }
                break;
            case 96:
                {
                alt16=3;
                }
                break;
            case IDENTIFIER:
                {
                alt16=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }

            switch (alt16) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:265:4: type_specifier
                    {
                    pushFollow(FOLLOW_type_specifier_in_type_specifier_h925);
                    type_specifier48=type_specifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_specifier.add(type_specifier48.getTree());


                    // AST REWRITE
                    // elements: type_specifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 265:19: -> ^( TYPE type_specifier )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:265:22: ^( TYPE type_specifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, stream_type_specifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:266:4: struct_or_union_specifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_struct_or_union_specifier_in_type_specifier_h940);
                    struct_or_union_specifier49=struct_or_union_specifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_or_union_specifier49.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:267:4: enum_specifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_enum_specifier_in_type_specifier_h945);
                    enum_specifier50=enum_specifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_specifier50.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:268:4: type_id
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_id_in_type_specifier_h950);
                    type_id51=type_id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_id51.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, type_specifier_h_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_specifier_h"

    public static class type_specifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_specifier"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:271:1: type_specifier : ( 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'uint8_t' | 'int8_t' | 'uint16_t' | 'int16_t' | 'uint32_t' | 'int32_t' | 'uint64_t' | 'int64_t' | '__builtin_va_list' );
    public final CLangParser.type_specifier_return type_specifier() throws RecognitionException {
        CLangParser.type_specifier_return retval = new CLangParser.type_specifier_return();
        retval.start = input.LT(1);
        int type_specifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set52=null;

        CommonTree set52_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:272:2: ( 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'uint8_t' | 'int8_t' | 'uint16_t' | 'int16_t' | 'uint32_t' | 'int32_t' | 'uint64_t' | 'int64_t' | '__builtin_va_list' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set52=(Token)input.LT(1);
            if ( (input.LA(1)>=76 && input.LA(1)<=93) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set52));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, type_specifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_specifier"

    public static class type_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_id"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:293:1: type_id : {...}? IDENTIFIER ;
    public final CLangParser.type_id_return type_id() throws RecognitionException {
        CLangParser.type_id_return retval = new CLangParser.type_id_return();
        retval.start = input.LT(1);
        int type_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER53=null;

        CommonTree IDENTIFIER53_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:296:2: ({...}? IDENTIFIER )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:296:4: {...}? IDENTIFIER
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((isTypeName(input.LT(1).getText()))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "type_id", "isTypeName(input.LT(1).getText())");
            }
            IDENTIFIER53=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_type_id1062); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER53_tree = (CommonTree)adaptor.create(IDENTIFIER53);
            adaptor.addChild(root_0, IDENTIFIER53_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, type_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_id"

    public static class struct_or_union_specifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_or_union_specifier"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:300:1: struct_or_union_specifier options {k=3; } : ( struct_or_union_h ( identifier )? lbrace ( struct_declaration )* rbrace | struct_or_union_h identifier );
    public final CLangParser.struct_or_union_specifier_return struct_or_union_specifier() throws RecognitionException {
        Symbols_stack.push(new Symbols_scope());

        CLangParser.struct_or_union_specifier_return retval = new CLangParser.struct_or_union_specifier_return();
        retval.start = input.LT(1);
        int struct_or_union_specifier_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.struct_or_union_h_return struct_or_union_h54 = null;

        CLangParser.identifier_return identifier55 = null;

        CLangParser.lbrace_return lbrace56 = null;

        CLangParser.struct_declaration_return struct_declaration57 = null;

        CLangParser.rbrace_return rbrace58 = null;

        CLangParser.struct_or_union_h_return struct_or_union_h59 = null;

        CLangParser.identifier_return identifier60 = null;




        	((Symbols_scope)Symbols_stack.peek()).types = new HashSet();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:306:2: ( struct_or_union_h ( identifier )? lbrace ( struct_declaration )* rbrace | struct_or_union_h identifier )
            int alt19=2;
            alt19 = dfa19.predict(input);
            switch (alt19) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:306:4: struct_or_union_h ( identifier )? lbrace ( struct_declaration )* rbrace
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_struct_or_union_h_in_struct_or_union_specifier1092);
                    struct_or_union_h54=struct_or_union_h();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_or_union_h54.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:306:22: ( identifier )?
                    int alt17=2;
                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==IDENTIFIER) ) {
                        alt17=1;
                    }
                    switch (alt17) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: identifier
                            {
                            pushFollow(FOLLOW_identifier_in_struct_or_union_specifier1094);
                            identifier55=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier55.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_lbrace_in_struct_or_union_specifier1097);
                    lbrace56=lbrace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lbrace56.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:306:41: ( struct_declaration )*
                    loop18:
                    do {
                        int alt18=2;
                        int LA18_0 = input.LA(1);

                        if ( (LA18_0==IDENTIFIER||(LA18_0>=76 && LA18_0<=98)) ) {
                            alt18=1;
                        }


                        switch (alt18) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: struct_declaration
                    	    {
                    	    pushFollow(FOLLOW_struct_declaration_in_struct_or_union_specifier1099);
                    	    struct_declaration57=struct_declaration();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declaration57.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop18;
                        }
                    } while (true);

                    pushFollow(FOLLOW_rbrace_in_struct_or_union_specifier1102);
                    rbrace58=rbrace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbrace58.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:307:4: struct_or_union_h identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_struct_or_union_h_in_struct_or_union_specifier1107);
                    struct_or_union_h59=struct_or_union_h();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_or_union_h59.getTree());
                    pushFollow(FOLLOW_identifier_in_struct_or_union_specifier1109);
                    identifier60=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier60.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, struct_or_union_specifier_StartIndex); }
            Symbols_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "struct_or_union_specifier"

    public static class struct_or_union_h_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_or_union_h"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:310:1: struct_or_union_h : struct_or_union -> ^( KEYWORD struct_or_union ) ;
    public final CLangParser.struct_or_union_h_return struct_or_union_h() throws RecognitionException {
        CLangParser.struct_or_union_h_return retval = new CLangParser.struct_or_union_h_return();
        retval.start = input.LT(1);
        int struct_or_union_h_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.struct_or_union_return struct_or_union61 = null;


        RewriteRuleSubtreeStream stream_struct_or_union=new RewriteRuleSubtreeStream(adaptor,"rule struct_or_union");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:311:2: ( struct_or_union -> ^( KEYWORD struct_or_union ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:311:4: struct_or_union
            {
            pushFollow(FOLLOW_struct_or_union_in_struct_or_union_h1120);
            struct_or_union61=struct_or_union();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct_or_union.add(struct_or_union61.getTree());


            // AST REWRITE
            // elements: struct_or_union
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 311:20: -> ^( KEYWORD struct_or_union )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:311:23: ^( KEYWORD struct_or_union )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                adaptor.addChild(root_1, stream_struct_or_union.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, struct_or_union_h_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "struct_or_union_h"

    public static class struct_or_union_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_or_union"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:314:1: struct_or_union : ( 'struct' | 'union' );
    public final CLangParser.struct_or_union_return struct_or_union() throws RecognitionException {
        CLangParser.struct_or_union_return retval = new CLangParser.struct_or_union_return();
        retval.start = input.LT(1);
        int struct_or_union_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set62=null;

        CommonTree set62_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:315:2: ( 'struct' | 'union' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set62=(Token)input.LT(1);
            if ( (input.LA(1)>=94 && input.LA(1)<=95) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set62));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, struct_or_union_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "struct_or_union"

    public static class struct_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_declaration"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:323:1: struct_declaration : specifier_qualifier_list struct_declarator_list semi ;
    public final CLangParser.struct_declaration_return struct_declaration() throws RecognitionException {
        CLangParser.struct_declaration_return retval = new CLangParser.struct_declaration_return();
        retval.start = input.LT(1);
        int struct_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.specifier_qualifier_list_return specifier_qualifier_list63 = null;

        CLangParser.struct_declarator_list_return struct_declarator_list64 = null;

        CLangParser.semi_return semi65 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:324:2: ( specifier_qualifier_list struct_declarator_list semi )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:324:4: specifier_qualifier_list struct_declarator_list semi
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_specifier_qualifier_list_in_struct_declaration1160);
            specifier_qualifier_list63=specifier_qualifier_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, specifier_qualifier_list63.getTree());
            pushFollow(FOLLOW_struct_declarator_list_in_struct_declaration1162);
            struct_declarator_list64=struct_declarator_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declarator_list64.getTree());
            pushFollow(FOLLOW_semi_in_struct_declaration1164);
            semi65=semi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semi65.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, struct_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "struct_declaration"

    public static class specifier_qualifier_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "specifier_qualifier_list"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:327:1: specifier_qualifier_list : ( type_qualifier_h | type_specifier_s )+ ;
    public final CLangParser.specifier_qualifier_list_return specifier_qualifier_list() throws RecognitionException {
        CLangParser.specifier_qualifier_list_return retval = new CLangParser.specifier_qualifier_list_return();
        retval.start = input.LT(1);
        int specifier_qualifier_list_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.type_qualifier_h_return type_qualifier_h66 = null;

        CLangParser.type_specifier_s_return type_specifier_s67 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:328:2: ( ( type_qualifier_h | type_specifier_s )+ )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:328:4: ( type_qualifier_h | type_specifier_s )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:328:4: ( type_qualifier_h | type_specifier_s )+
            int cnt20=0;
            loop20:
            do {
                int alt20=3;
                alt20 = dfa20.predict(input);
                switch (alt20) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:328:6: type_qualifier_h
            	    {
            	    pushFollow(FOLLOW_type_qualifier_h_in_specifier_qualifier_list1177);
            	    type_qualifier_h66=type_qualifier_h();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_qualifier_h66.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:328:25: type_specifier_s
            	    {
            	    pushFollow(FOLLOW_type_specifier_s_in_specifier_qualifier_list1181);
            	    type_specifier_s67=type_specifier_s();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_specifier_s67.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt20 >= 1 ) break loop20;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(20, input);
                        throw eee;
                }
                cnt20++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, specifier_qualifier_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "specifier_qualifier_list"

    public static class struct_declarator_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_declarator_list"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:331:1: struct_declarator_list : struct_declarator ( comma struct_declarator )* ;
    public final CLangParser.struct_declarator_list_return struct_declarator_list() throws RecognitionException {
        CLangParser.struct_declarator_list_return retval = new CLangParser.struct_declarator_list_return();
        retval.start = input.LT(1);
        int struct_declarator_list_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.struct_declarator_return struct_declarator68 = null;

        CLangParser.comma_return comma69 = null;

        CLangParser.struct_declarator_return struct_declarator70 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:332:2: ( struct_declarator ( comma struct_declarator )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:332:4: struct_declarator ( comma struct_declarator )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_struct_declarator_in_struct_declarator_list1195);
            struct_declarator68=struct_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declarator68.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:332:22: ( comma struct_declarator )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==63) ) {
                    alt21=1;
                }


                switch (alt21) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:332:24: comma struct_declarator
            	    {
            	    pushFollow(FOLLOW_comma_in_struct_declarator_list1199);
            	    comma69=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma69.getTree());
            	    pushFollow(FOLLOW_struct_declarator_in_struct_declarator_list1201);
            	    struct_declarator70=struct_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declarator70.getTree());

            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, struct_declarator_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "struct_declarator_list"

    public static class struct_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_declarator"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:335:1: struct_declarator : ( declarator ( colon constant_expression )? | colon constant_expression );
    public final CLangParser.struct_declarator_return struct_declarator() throws RecognitionException {
        CLangParser.struct_declarator_return retval = new CLangParser.struct_declarator_return();
        retval.start = input.LT(1);
        int struct_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.declarator_return declarator71 = null;

        CLangParser.colon_return colon72 = null;

        CLangParser.constant_expression_return constant_expression73 = null;

        CLangParser.colon_return colon74 = null;

        CLangParser.constant_expression_return constant_expression75 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:336:2: ( declarator ( colon constant_expression )? | colon constant_expression )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==IDENTIFIER||LA23_0==66||LA23_0==101||LA23_0==160) ) {
                alt23=1;
            }
            else if ( (LA23_0==64) ) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:336:4: declarator ( colon constant_expression )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_declarator_in_struct_declarator1215);
                    declarator71=declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarator71.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:336:15: ( colon constant_expression )?
                    int alt22=2;
                    int LA22_0 = input.LA(1);

                    if ( (LA22_0==64) ) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:336:17: colon constant_expression
                            {
                            pushFollow(FOLLOW_colon_in_struct_declarator1219);
                            colon72=colon();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon72.getTree());
                            pushFollow(FOLLOW_constant_expression_in_struct_declarator1221);
                            constant_expression73=constant_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression73.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:337:4: colon constant_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_colon_in_struct_declarator1228);
                    colon74=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon74.getTree());
                    pushFollow(FOLLOW_constant_expression_in_struct_declarator1230);
                    constant_expression75=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression75.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, struct_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "struct_declarator"

    public static class enumKw_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumKw"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:340:1: enumKw : 'enum' -> ^( KEYWORD 'enum' ) ;
    public final CLangParser.enumKw_return enumKw() throws RecognitionException {
        CLangParser.enumKw_return retval = new CLangParser.enumKw_return();
        retval.start = input.LT(1);
        int enumKw_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal76=null;

        CommonTree string_literal76_tree=null;
        RewriteRuleTokenStream stream_96=new RewriteRuleTokenStream(adaptor,"token 96");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:340:8: ( 'enum' -> ^( KEYWORD 'enum' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:340:10: 'enum'
            {
            string_literal76=(Token)match(input,96,FOLLOW_96_in_enumKw1240); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_96.add(string_literal76);



            // AST REWRITE
            // elements: 96
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 340:17: -> ^( KEYWORD 'enum' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:340:20: ^( KEYWORD 'enum' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                adaptor.addChild(root_1, stream_96.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, enumKw_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumKw"

    public static class enum_specifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enum_specifier"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:342:1: enum_specifier options {k=3; } : ( enumKw lbrace enumerator_list rbrace | enumKw identifier lbrace enumerator_list rbrace | enumKw identifier );
    public final CLangParser.enum_specifier_return enum_specifier() throws RecognitionException {
        CLangParser.enum_specifier_return retval = new CLangParser.enum_specifier_return();
        retval.start = input.LT(1);
        int enum_specifier_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.enumKw_return enumKw77 = null;

        CLangParser.lbrace_return lbrace78 = null;

        CLangParser.enumerator_list_return enumerator_list79 = null;

        CLangParser.rbrace_return rbrace80 = null;

        CLangParser.enumKw_return enumKw81 = null;

        CLangParser.identifier_return identifier82 = null;

        CLangParser.lbrace_return lbrace83 = null;

        CLangParser.enumerator_list_return enumerator_list84 = null;

        CLangParser.rbrace_return rbrace85 = null;

        CLangParser.enumKw_return enumKw86 = null;

        CLangParser.identifier_return identifier87 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:344:2: ( enumKw lbrace enumerator_list rbrace | enumKw identifier lbrace enumerator_list rbrace | enumKw identifier )
            int alt24=3;
            alt24 = dfa24.predict(input);
            switch (alt24) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:344:4: enumKw lbrace enumerator_list rbrace
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_enumKw_in_enum_specifier1267);
                    enumKw77=enumKw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumKw77.getTree());
                    pushFollow(FOLLOW_lbrace_in_enum_specifier1269);
                    lbrace78=lbrace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lbrace78.getTree());
                    pushFollow(FOLLOW_enumerator_list_in_enum_specifier1271);
                    enumerator_list79=enumerator_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumerator_list79.getTree());
                    pushFollow(FOLLOW_rbrace_in_enum_specifier1273);
                    rbrace80=rbrace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbrace80.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:345:4: enumKw identifier lbrace enumerator_list rbrace
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_enumKw_in_enum_specifier1278);
                    enumKw81=enumKw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumKw81.getTree());
                    pushFollow(FOLLOW_identifier_in_enum_specifier1280);
                    identifier82=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier82.getTree());
                    pushFollow(FOLLOW_lbrace_in_enum_specifier1282);
                    lbrace83=lbrace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lbrace83.getTree());
                    pushFollow(FOLLOW_enumerator_list_in_enum_specifier1284);
                    enumerator_list84=enumerator_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumerator_list84.getTree());
                    pushFollow(FOLLOW_rbrace_in_enum_specifier1286);
                    rbrace85=rbrace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbrace85.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:346:4: enumKw identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_enumKw_in_enum_specifier1291);
                    enumKw86=enumKw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumKw86.getTree());
                    pushFollow(FOLLOW_identifier_in_enum_specifier1293);
                    identifier87=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier87.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, enum_specifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enum_specifier"

    public static class enumerator_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumerator_list"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:349:1: enumerator_list : enumerator ( comma enumerator )* ;
    public final CLangParser.enumerator_list_return enumerator_list() throws RecognitionException {
        CLangParser.enumerator_list_return retval = new CLangParser.enumerator_list_return();
        retval.start = input.LT(1);
        int enumerator_list_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.enumerator_return enumerator88 = null;

        CLangParser.comma_return comma89 = null;

        CLangParser.enumerator_return enumerator90 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:350:2: ( enumerator ( comma enumerator )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:350:4: enumerator ( comma enumerator )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_enumerator_in_enumerator_list1304);
            enumerator88=enumerator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumerator88.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:350:15: ( comma enumerator )*
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==63) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:350:17: comma enumerator
            	    {
            	    pushFollow(FOLLOW_comma_in_enumerator_list1308);
            	    comma89=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma89.getTree());
            	    pushFollow(FOLLOW_enumerator_in_enumerator_list1310);
            	    enumerator90=enumerator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumerator90.getTree());

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, enumerator_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumerator_list"

    public static class enumerator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumerator"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:353:1: enumerator : identifier ( assignOp constant_expression )? -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp identifier ^( VALUE constant_expression ) ) ) ;
    public final CLangParser.enumerator_return enumerator() throws RecognitionException {
        CLangParser.enumerator_return retval = new CLangParser.enumerator_return();
        retval.start = input.LT(1);
        int enumerator_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.identifier_return identifier91 = null;

        CLangParser.assignOp_return assignOp92 = null;

        CLangParser.constant_expression_return constant_expression93 = null;


        RewriteRuleSubtreeStream stream_assignOp=new RewriteRuleSubtreeStream(adaptor,"rule assignOp");
        RewriteRuleSubtreeStream stream_constant_expression=new RewriteRuleSubtreeStream(adaptor,"rule constant_expression");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:354:2: ( identifier ( assignOp constant_expression )? -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp identifier ^( VALUE constant_expression ) ) ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:354:4: identifier ( assignOp constant_expression )?
            {
            pushFollow(FOLLOW_identifier_in_enumerator1324);
            identifier91=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier91.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:354:15: ( assignOp constant_expression )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==62) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:354:17: assignOp constant_expression
                    {
                    pushFollow(FOLLOW_assignOp_in_enumerator1328);
                    assignOp92=assignOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignOp.add(assignOp92.getTree());
                    pushFollow(FOLLOW_constant_expression_in_enumerator1330);
                    constant_expression93=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant_expression.add(constant_expression93.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: constant_expression, assignOp, identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 354:49: -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp identifier ^( VALUE constant_expression ) ) )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:354:52: ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp identifier ^( VALUE constant_expression ) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGNMENT_STATEMENT, "ASSIGNMENT_STATEMENT"), root_1);

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:354:75: ^( ASSIGN_OPERATOR assignOp identifier ^( VALUE constant_expression ) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGN_OPERATOR, "ASSIGN_OPERATOR"), root_2);

                adaptor.addChild(root_2, stream_assignOp.nextTree());
                adaptor.addChild(root_2, stream_identifier.nextTree());
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:354:113: ^( VALUE constant_expression )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VALUE, "VALUE"), root_3);

                adaptor.addChild(root_3, stream_constant_expression.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, enumerator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumerator"

    public static class type_qualifier_h_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_qualifier_h"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:357:1: type_qualifier_h : type_qualifier -> ^( KEYWORD type_qualifier ) ;
    public final CLangParser.type_qualifier_h_return type_qualifier_h() throws RecognitionException {
        CLangParser.type_qualifier_h_return retval = new CLangParser.type_qualifier_h_return();
        retval.start = input.LT(1);
        int type_qualifier_h_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.type_qualifier_return type_qualifier94 = null;


        RewriteRuleSubtreeStream stream_type_qualifier=new RewriteRuleSubtreeStream(adaptor,"rule type_qualifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:358:2: ( type_qualifier -> ^( KEYWORD type_qualifier ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:358:4: type_qualifier
            {
            pushFollow(FOLLOW_type_qualifier_in_type_qualifier_h1364);
            type_qualifier94=type_qualifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_qualifier.add(type_qualifier94.getTree());


            // AST REWRITE
            // elements: type_qualifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 358:19: -> ^( KEYWORD type_qualifier )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:358:22: ^( KEYWORD type_qualifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                adaptor.addChild(root_1, stream_type_qualifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, type_qualifier_h_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_qualifier_h"

    public static class type_qualifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_qualifier"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:361:1: type_qualifier : ( 'const' | 'volatile' );
    public final CLangParser.type_qualifier_return type_qualifier() throws RecognitionException {
        CLangParser.type_qualifier_return retval = new CLangParser.type_qualifier_return();
        retval.start = input.LT(1);
        int type_qualifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set95=null;

        CommonTree set95_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:362:2: ( 'const' | 'volatile' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set95=(Token)input.LT(1);
            if ( (input.LA(1)>=97 && input.LA(1)<=98) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set95));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, type_qualifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_qualifier"

    public static class function_specifier_h_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_specifier_h"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:366:1: function_specifier_h : function_specifier -> ^( KEYWORD function_specifier ) ;
    public final CLangParser.function_specifier_h_return function_specifier_h() throws RecognitionException {
        CLangParser.function_specifier_h_return retval = new CLangParser.function_specifier_h_return();
        retval.start = input.LT(1);
        int function_specifier_h_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.function_specifier_return function_specifier96 = null;


        RewriteRuleSubtreeStream stream_function_specifier=new RewriteRuleSubtreeStream(adaptor,"rule function_specifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:367:2: ( function_specifier -> ^( KEYWORD function_specifier ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:367:4: function_specifier
            {
            pushFollow(FOLLOW_function_specifier_in_function_specifier_h1401);
            function_specifier96=function_specifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_specifier.add(function_specifier96.getTree());


            // AST REWRITE
            // elements: function_specifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 367:23: -> ^( KEYWORD function_specifier )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:367:26: ^( KEYWORD function_specifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                adaptor.addChild(root_1, stream_function_specifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, function_specifier_h_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_specifier_h"

    public static class function_specifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_specifier"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:370:1: function_specifier : ( 'noreturn' | 'inline' );
    public final CLangParser.function_specifier_return function_specifier() throws RecognitionException {
        CLangParser.function_specifier_return retval = new CLangParser.function_specifier_return();
        retval.start = input.LT(1);
        int function_specifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set97=null;

        CommonTree set97_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:371:2: ( 'noreturn' | 'inline' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set97=(Token)input.LT(1);
            if ( (input.LA(1)>=99 && input.LA(1)<=100) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set97));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, function_specifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_specifier"

    public static class declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declarator"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:375:1: declarator : ( ( attribute_spec )* ( pointer )? direct_declarator ( attribute_spec )* | ( attribute_spec )* pointer ( attribute_spec )* );
    public final CLangParser.declarator_return declarator() throws RecognitionException {
        CLangParser.declarator_return retval = new CLangParser.declarator_return();
        retval.start = input.LT(1);
        int declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_spec_return attribute_spec98 = null;

        CLangParser.pointer_return pointer99 = null;

        CLangParser.direct_declarator_return direct_declarator100 = null;

        CLangParser.attribute_spec_return attribute_spec101 = null;

        CLangParser.attribute_spec_return attribute_spec102 = null;

        CLangParser.pointer_return pointer103 = null;

        CLangParser.attribute_spec_return attribute_spec104 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:376:2: ( ( attribute_spec )* ( pointer )? direct_declarator ( attribute_spec )* | ( attribute_spec )* pointer ( attribute_spec )* )
            int alt32=2;
            alt32 = dfa32.predict(input);
            switch (alt32) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:376:4: ( attribute_spec )* ( pointer )? direct_declarator ( attribute_spec )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:376:4: ( attribute_spec )*
                    loop27:
                    do {
                        int alt27=2;
                        int LA27_0 = input.LA(1);

                        if ( (LA27_0==160) ) {
                            alt27=1;
                        }


                        switch (alt27) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: attribute_spec
                    	    {
                    	    pushFollow(FOLLOW_attribute_spec_in_declarator1438);
                    	    attribute_spec98=attribute_spec();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_spec98.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop27;
                        }
                    } while (true);

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:376:20: ( pointer )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==101) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: pointer
                            {
                            pushFollow(FOLLOW_pointer_in_declarator1441);
                            pointer99=pointer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, pointer99.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_direct_declarator_in_declarator1444);
                    direct_declarator100=direct_declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, direct_declarator100.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:376:47: ( attribute_spec )*
                    loop29:
                    do {
                        int alt29=2;
                        alt29 = dfa29.predict(input);
                        switch (alt29) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: attribute_spec
                    	    {
                    	    pushFollow(FOLLOW_attribute_spec_in_declarator1446);
                    	    attribute_spec101=attribute_spec();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_spec101.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop29;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:377:4: ( attribute_spec )* pointer ( attribute_spec )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:377:4: ( attribute_spec )*
                    loop30:
                    do {
                        int alt30=2;
                        int LA30_0 = input.LA(1);

                        if ( (LA30_0==160) ) {
                            alt30=1;
                        }


                        switch (alt30) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: attribute_spec
                    	    {
                    	    pushFollow(FOLLOW_attribute_spec_in_declarator1452);
                    	    attribute_spec102=attribute_spec();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_spec102.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop30;
                        }
                    } while (true);

                    pushFollow(FOLLOW_pointer_in_declarator1455);
                    pointer103=pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pointer103.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:377:28: ( attribute_spec )*
                    loop31:
                    do {
                        int alt31=2;
                        alt31 = dfa31.predict(input);
                        switch (alt31) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: attribute_spec
                    	    {
                    	    pushFollow(FOLLOW_attribute_spec_in_declarator1457);
                    	    attribute_spec104=attribute_spec();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_spec104.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop31;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "declarator"

    public static class direct_declarator_ident_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "direct_declarator_ident"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:380:1: direct_declarator_ident : IDENTIFIER -> ^( NAME IDENTIFIER ) ;
    public final CLangParser.direct_declarator_ident_return direct_declarator_ident() throws RecognitionException {
        CLangParser.direct_declarator_ident_return retval = new CLangParser.direct_declarator_ident_return();
        retval.start = input.LT(1);
        int direct_declarator_ident_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER105=null;

        CommonTree IDENTIFIER105_tree=null;
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:381:2: ( IDENTIFIER -> ^( NAME IDENTIFIER ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:381:4: IDENTIFIER
            {
            IDENTIFIER105=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_direct_declarator_ident1469); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER105);

            if ( state.backtracking==0 ) {

              				if (declaration_stack.size() > 0 && ((declaration_scope)declaration_stack.peek()).isTypedef) {
              					((Symbols_scope)Symbols_stack.peek()).types.add((IDENTIFIER105!=null?IDENTIFIER105.getText():null));
              					//System.out.println("define type " + (IDENTIFIER105!=null?IDENTIFIER105.getText():null));
              				} else if (function_definition_stack.size() > 0 && ((function_definition_scope)function_definition_stack.peek()).isFuncDef) {
              					currentFunctionName = (IDENTIFIER105!=null?IDENTIFIER105.getText():null);
              					//System.out.println("current function name is " + (IDENTIFIER105!=null?IDENTIFIER105.getText():null));
              				}
              			
            }


            // AST REWRITE
            // elements: IDENTIFIER
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 391:3: -> ^( NAME IDENTIFIER )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:391:6: ^( NAME IDENTIFIER )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, direct_declarator_ident_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "direct_declarator_ident"

    public static class direct_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "direct_declarator"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:394:1: direct_declarator : ( direct_declarator_ident | lpar declarator rpar ) ( declarator_suffix )* ;
    public final CLangParser.direct_declarator_return direct_declarator() throws RecognitionException {
        CLangParser.direct_declarator_return retval = new CLangParser.direct_declarator_return();
        retval.start = input.LT(1);
        int direct_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.direct_declarator_ident_return direct_declarator_ident106 = null;

        CLangParser.lpar_return lpar107 = null;

        CLangParser.declarator_return declarator108 = null;

        CLangParser.rpar_return rpar109 = null;

        CLangParser.declarator_suffix_return declarator_suffix110 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:395:2: ( ( direct_declarator_ident | lpar declarator rpar ) ( declarator_suffix )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:395:6: ( direct_declarator_ident | lpar declarator rpar ) ( declarator_suffix )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:395:6: ( direct_declarator_ident | lpar declarator rpar )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==IDENTIFIER) ) {
                alt33=1;
            }
            else if ( (LA33_0==66) ) {
                alt33=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:395:8: direct_declarator_ident
                    {
                    pushFollow(FOLLOW_direct_declarator_ident_in_direct_declarator1501);
                    direct_declarator_ident106=direct_declarator_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, direct_declarator_ident106.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:395:34: lpar declarator rpar
                    {
                    pushFollow(FOLLOW_lpar_in_direct_declarator1505);
                    lpar107=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar107.getTree());
                    pushFollow(FOLLOW_declarator_in_direct_declarator1507);
                    declarator108=declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarator108.getTree());
                    pushFollow(FOLLOW_rpar_in_direct_declarator1509);
                    rpar109=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar109.getTree());

                    }
                    break;

            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:395:57: ( declarator_suffix )*
            loop34:
            do {
                int alt34=2;
                alt34 = dfa34.predict(input);
                switch (alt34) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: declarator_suffix
            	    {
            	    pushFollow(FOLLOW_declarator_suffix_in_direct_declarator1513);
            	    declarator_suffix110=declarator_suffix();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarator_suffix110.getTree());

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, direct_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "direct_declarator"

    public static class declarator_suffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declarator_suffix"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:398:1: declarator_suffix : ( lbrack constant_expression rbrack | lbrack rbrack | lpar parameter_type_list rpar | lpar identifier_list rpar | lpar rpar );
    public final CLangParser.declarator_suffix_return declarator_suffix() throws RecognitionException {
        CLangParser.declarator_suffix_return retval = new CLangParser.declarator_suffix_return();
        retval.start = input.LT(1);
        int declarator_suffix_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.lbrack_return lbrack111 = null;

        CLangParser.constant_expression_return constant_expression112 = null;

        CLangParser.rbrack_return rbrack113 = null;

        CLangParser.lbrack_return lbrack114 = null;

        CLangParser.rbrack_return rbrack115 = null;

        CLangParser.lpar_return lpar116 = null;

        CLangParser.parameter_type_list_return parameter_type_list117 = null;

        CLangParser.rpar_return rpar118 = null;

        CLangParser.lpar_return lpar119 = null;

        CLangParser.identifier_list_return identifier_list120 = null;

        CLangParser.rpar_return rpar121 = null;

        CLangParser.lpar_return lpar122 = null;

        CLangParser.rpar_return rpar123 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:399:2: ( lbrack constant_expression rbrack | lbrack rbrack | lpar parameter_type_list rpar | lpar identifier_list rpar | lpar rpar )
            int alt35=5;
            alt35 = dfa35.predict(input);
            switch (alt35) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:399:6: lbrack constant_expression rbrack
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lbrack_in_declarator_suffix1527);
                    lbrack111=lbrack();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lbrack111.getTree());
                    pushFollow(FOLLOW_constant_expression_in_declarator_suffix1529);
                    constant_expression112=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression112.getTree());
                    pushFollow(FOLLOW_rbrack_in_declarator_suffix1531);
                    rbrack113=rbrack();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbrack113.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:400:9: lbrack rbrack
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lbrack_in_declarator_suffix1541);
                    lbrack114=lbrack();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lbrack114.getTree());
                    pushFollow(FOLLOW_rbrack_in_declarator_suffix1543);
                    rbrack115=rbrack();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbrack115.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:401:9: lpar parameter_type_list rpar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lpar_in_declarator_suffix1553);
                    lpar116=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar116.getTree());
                    pushFollow(FOLLOW_parameter_type_list_in_declarator_suffix1555);
                    parameter_type_list117=parameter_type_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_type_list117.getTree());
                    pushFollow(FOLLOW_rpar_in_declarator_suffix1557);
                    rpar118=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar118.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:402:9: lpar identifier_list rpar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lpar_in_declarator_suffix1567);
                    lpar119=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar119.getTree());
                    pushFollow(FOLLOW_identifier_list_in_declarator_suffix1569);
                    identifier_list120=identifier_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_list120.getTree());
                    pushFollow(FOLLOW_rpar_in_declarator_suffix1571);
                    rpar121=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar121.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:403:9: lpar rpar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lpar_in_declarator_suffix1581);
                    lpar122=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar122.getTree());
                    pushFollow(FOLLOW_rpar_in_declarator_suffix1583);
                    rpar123=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar123.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, declarator_suffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "declarator_suffix"

    public static class timesOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timesOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:406:1: timesOp : '*' -> ^( OPERATOR '*' ) ;
    public final CLangParser.timesOp_return timesOp() throws RecognitionException {
        CLangParser.timesOp_return retval = new CLangParser.timesOp_return();
        retval.start = input.LT(1);
        int timesOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal124=null;

        CommonTree char_literal124_tree=null;
        RewriteRuleTokenStream stream_101=new RewriteRuleTokenStream(adaptor,"token 101");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:406:9: ( '*' -> ^( OPERATOR '*' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:406:11: '*'
            {
            char_literal124=(Token)match(input,101,FOLLOW_101_in_timesOp1593); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_101.add(char_literal124);



            // AST REWRITE
            // elements: 101
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 406:15: -> ^( OPERATOR '*' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:406:18: ^( OPERATOR '*' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_101.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, timesOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "timesOp"

    public static class pointer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pointer"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:408:1: pointer : ( timesOp ( type_qualifier_h )+ ( pointer )? | timesOp pointer | timesOp );
    public final CLangParser.pointer_return pointer() throws RecognitionException {
        CLangParser.pointer_return retval = new CLangParser.pointer_return();
        retval.start = input.LT(1);
        int pointer_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.timesOp_return timesOp125 = null;

        CLangParser.type_qualifier_h_return type_qualifier_h126 = null;

        CLangParser.pointer_return pointer127 = null;

        CLangParser.timesOp_return timesOp128 = null;

        CLangParser.pointer_return pointer129 = null;

        CLangParser.timesOp_return timesOp130 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:409:2: ( timesOp ( type_qualifier_h )+ ( pointer )? | timesOp pointer | timesOp )
            int alt38=3;
            alt38 = dfa38.predict(input);
            switch (alt38) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:409:4: timesOp ( type_qualifier_h )+ ( pointer )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timesOp_in_pointer1613);
                    timesOp125=timesOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timesOp125.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:409:12: ( type_qualifier_h )+
                    int cnt36=0;
                    loop36:
                    do {
                        int alt36=2;
                        alt36 = dfa36.predict(input);
                        switch (alt36) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: type_qualifier_h
                    	    {
                    	    pushFollow(FOLLOW_type_qualifier_h_in_pointer1615);
                    	    type_qualifier_h126=type_qualifier_h();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_qualifier_h126.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt36 >= 1 ) break loop36;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(36, input);
                                throw eee;
                        }
                        cnt36++;
                    } while (true);

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:409:30: ( pointer )?
                    int alt37=2;
                    alt37 = dfa37.predict(input);
                    switch (alt37) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: pointer
                            {
                            pushFollow(FOLLOW_pointer_in_pointer1618);
                            pointer127=pointer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, pointer127.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:410:4: timesOp pointer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timesOp_in_pointer1624);
                    timesOp128=timesOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timesOp128.getTree());
                    pushFollow(FOLLOW_pointer_in_pointer1626);
                    pointer129=pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pointer129.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:411:4: timesOp
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timesOp_in_pointer1631);
                    timesOp130=timesOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timesOp130.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, pointer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pointer"

    public static class dotsOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotsOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:414:1: dotsOp : '...' -> ^( OPERATOR '...' ) ;
    public final CLangParser.dotsOp_return dotsOp() throws RecognitionException {
        CLangParser.dotsOp_return retval = new CLangParser.dotsOp_return();
        retval.start = input.LT(1);
        int dotsOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal131=null;

        CommonTree string_literal131_tree=null;
        RewriteRuleTokenStream stream_102=new RewriteRuleTokenStream(adaptor,"token 102");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:414:8: ( '...' -> ^( OPERATOR '...' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:414:10: '...'
            {
            string_literal131=(Token)match(input,102,FOLLOW_102_in_dotsOp1641); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_102.add(string_literal131);



            // AST REWRITE
            // elements: 102
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 414:16: -> ^( OPERATOR '...' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:414:19: ^( OPERATOR '...' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_102.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, dotsOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dotsOp"

    public static class parameter_type_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_type_list"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:416:1: parameter_type_list : parameter_list ( comma dotsOp )? ;
    public final CLangParser.parameter_type_list_return parameter_type_list() throws RecognitionException {
        CLangParser.parameter_type_list_return retval = new CLangParser.parameter_type_list_return();
        retval.start = input.LT(1);
        int parameter_type_list_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.parameter_list_return parameter_list132 = null;

        CLangParser.comma_return comma133 = null;

        CLangParser.dotsOp_return dotsOp134 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:417:2: ( parameter_list ( comma dotsOp )? )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:417:4: parameter_list ( comma dotsOp )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_parameter_list_in_parameter_type_list1661);
            parameter_list132=parameter_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_list132.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:417:19: ( comma dotsOp )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==63) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:417:21: comma dotsOp
                    {
                    pushFollow(FOLLOW_comma_in_parameter_type_list1665);
                    comma133=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma133.getTree());
                    pushFollow(FOLLOW_dotsOp_in_parameter_type_list1667);
                    dotsOp134=dotsOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dotsOp134.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, parameter_type_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_type_list"

    public static class parameter_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_list"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:420:1: parameter_list : ( attribute_spec )* parameter_declaration ( comma parameter_declaration )* -> ( attribute_spec )* ^( FORMAL_PARAM_LIST ^( PARAMETER_DECL parameter_declaration ) ( comma ^( PARAMETER_DECL parameter_declaration ) )* ) ;
    public final CLangParser.parameter_list_return parameter_list() throws RecognitionException {
        CLangParser.parameter_list_return retval = new CLangParser.parameter_list_return();
        retval.start = input.LT(1);
        int parameter_list_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_spec_return attribute_spec135 = null;

        CLangParser.parameter_declaration_return parameter_declaration136 = null;

        CLangParser.comma_return comma137 = null;

        CLangParser.parameter_declaration_return parameter_declaration138 = null;


        RewriteRuleSubtreeStream stream_parameter_declaration=new RewriteRuleSubtreeStream(adaptor,"rule parameter_declaration");
        RewriteRuleSubtreeStream stream_comma=new RewriteRuleSubtreeStream(adaptor,"rule comma");
        RewriteRuleSubtreeStream stream_attribute_spec=new RewriteRuleSubtreeStream(adaptor,"rule attribute_spec");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:421:2: ( ( attribute_spec )* parameter_declaration ( comma parameter_declaration )* -> ( attribute_spec )* ^( FORMAL_PARAM_LIST ^( PARAMETER_DECL parameter_declaration ) ( comma ^( PARAMETER_DECL parameter_declaration ) )* ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:421:4: ( attribute_spec )* parameter_declaration ( comma parameter_declaration )*
            {
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:421:4: ( attribute_spec )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==160) ) {
                    alt40=1;
                }


                switch (alt40) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: attribute_spec
            	    {
            	    pushFollow(FOLLOW_attribute_spec_in_parameter_list1681);
            	    attribute_spec135=attribute_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_attribute_spec.add(attribute_spec135.getTree());

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);

            pushFollow(FOLLOW_parameter_declaration_in_parameter_list1684);
            parameter_declaration136=parameter_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameter_declaration.add(parameter_declaration136.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:421:42: ( comma parameter_declaration )*
            loop41:
            do {
                int alt41=2;
                alt41 = dfa41.predict(input);
                switch (alt41) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:421:44: comma parameter_declaration
            	    {
            	    pushFollow(FOLLOW_comma_in_parameter_list1688);
            	    comma137=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_comma.add(comma137.getTree());
            	    pushFollow(FOLLOW_parameter_declaration_in_parameter_list1690);
            	    parameter_declaration138=parameter_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_parameter_declaration.add(parameter_declaration138.getTree());

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);



            // AST REWRITE
            // elements: comma, parameter_declaration, attribute_spec, parameter_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 422:3: -> ( attribute_spec )* ^( FORMAL_PARAM_LIST ^( PARAMETER_DECL parameter_declaration ) ( comma ^( PARAMETER_DECL parameter_declaration ) )* )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:422:6: ( attribute_spec )*
                while ( stream_attribute_spec.hasNext() ) {
                    adaptor.addChild(root_0, stream_attribute_spec.nextTree());

                }
                stream_attribute_spec.reset();
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:422:22: ^( FORMAL_PARAM_LIST ^( PARAMETER_DECL parameter_declaration ) ( comma ^( PARAMETER_DECL parameter_declaration ) )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_LIST, "FORMAL_PARAM_LIST"), root_1);

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:422:43: ^( PARAMETER_DECL parameter_declaration )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMETER_DECL, "PARAMETER_DECL"), root_2);

                adaptor.addChild(root_2, stream_parameter_declaration.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:423:6: ( comma ^( PARAMETER_DECL parameter_declaration ) )*
                while ( stream_comma.hasNext()||stream_parameter_declaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_comma.nextTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:423:14: ^( PARAMETER_DECL parameter_declaration )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMETER_DECL, "PARAMETER_DECL"), root_2);

                    adaptor.addChild(root_2, stream_parameter_declaration.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_comma.reset();
                stream_parameter_declaration.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, parameter_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_list"

    public static class parameter_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_declaration"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:426:1: parameter_declaration : declaration_specifiers ( declarator | abstract_declarator )* ;
    public final CLangParser.parameter_declaration_return parameter_declaration() throws RecognitionException {
        CLangParser.parameter_declaration_return retval = new CLangParser.parameter_declaration_return();
        retval.start = input.LT(1);
        int parameter_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.declaration_specifiers_return declaration_specifiers139 = null;

        CLangParser.declarator_return declarator140 = null;

        CLangParser.abstract_declarator_return abstract_declarator141 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:427:2: ( declaration_specifiers ( declarator | abstract_declarator )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:427:4: declaration_specifiers ( declarator | abstract_declarator )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_declaration_specifiers_in_parameter_declaration1745);
            declaration_specifiers139=declaration_specifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, declaration_specifiers139.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:427:27: ( declarator | abstract_declarator )*
            loop42:
            do {
                int alt42=3;
                alt42 = dfa42.predict(input);
                switch (alt42) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:427:28: declarator
            	    {
            	    pushFollow(FOLLOW_declarator_in_parameter_declaration1748);
            	    declarator140=declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarator140.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:427:41: abstract_declarator
            	    {
            	    pushFollow(FOLLOW_abstract_declarator_in_parameter_declaration1752);
            	    abstract_declarator141=abstract_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, abstract_declarator141.getTree());

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, parameter_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_declaration"

    public static class identifier_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifier_list"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:430:1: identifier_list : identifier ( comma identifier )* ;
    public final CLangParser.identifier_list_return identifier_list() throws RecognitionException {
        CLangParser.identifier_list_return retval = new CLangParser.identifier_list_return();
        retval.start = input.LT(1);
        int identifier_list_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.identifier_return identifier142 = null;

        CLangParser.comma_return comma143 = null;

        CLangParser.identifier_return identifier144 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:431:2: ( identifier ( comma identifier )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:431:4: identifier ( comma identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_identifier_list1766);
            identifier142=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier142.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:431:15: ( comma identifier )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==63) ) {
                    alt43=1;
                }


                switch (alt43) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:431:17: comma identifier
            	    {
            	    pushFollow(FOLLOW_comma_in_identifier_list1770);
            	    comma143=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma143.getTree());
            	    pushFollow(FOLLOW_identifier_in_identifier_list1772);
            	    identifier144=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier144.getTree());

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, identifier_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifier_list"

    public static class type_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_name"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:434:1: type_name : specifier_qualifier_list ( abstract_declarator )? ;
    public final CLangParser.type_name_return type_name() throws RecognitionException {
        CLangParser.type_name_return retval = new CLangParser.type_name_return();
        retval.start = input.LT(1);
        int type_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.specifier_qualifier_list_return specifier_qualifier_list145 = null;

        CLangParser.abstract_declarator_return abstract_declarator146 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:435:2: ( specifier_qualifier_list ( abstract_declarator )? )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:435:4: specifier_qualifier_list ( abstract_declarator )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_specifier_qualifier_list_in_type_name1786);
            specifier_qualifier_list145=specifier_qualifier_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, specifier_qualifier_list145.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:435:29: ( abstract_declarator )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==66||LA44_0==68||LA44_0==101) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: abstract_declarator
                    {
                    pushFollow(FOLLOW_abstract_declarator_in_type_name1788);
                    abstract_declarator146=abstract_declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, abstract_declarator146.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, type_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_name"

    public static class abstract_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abstract_declarator"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:438:1: abstract_declarator : ( pointer ( direct_abstract_declarator )? | direct_abstract_declarator );
    public final CLangParser.abstract_declarator_return abstract_declarator() throws RecognitionException {
        CLangParser.abstract_declarator_return retval = new CLangParser.abstract_declarator_return();
        retval.start = input.LT(1);
        int abstract_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.pointer_return pointer147 = null;

        CLangParser.direct_abstract_declarator_return direct_abstract_declarator148 = null;

        CLangParser.direct_abstract_declarator_return direct_abstract_declarator149 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:439:2: ( pointer ( direct_abstract_declarator )? | direct_abstract_declarator )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==101) ) {
                alt46=1;
            }
            else if ( (LA46_0==66||LA46_0==68) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:439:4: pointer ( direct_abstract_declarator )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pointer_in_abstract_declarator1800);
                    pointer147=pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pointer147.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:439:12: ( direct_abstract_declarator )?
                    int alt45=2;
                    alt45 = dfa45.predict(input);
                    switch (alt45) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: direct_abstract_declarator
                            {
                            pushFollow(FOLLOW_direct_abstract_declarator_in_abstract_declarator1802);
                            direct_abstract_declarator148=direct_abstract_declarator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, direct_abstract_declarator148.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:440:4: direct_abstract_declarator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_direct_abstract_declarator_in_abstract_declarator1808);
                    direct_abstract_declarator149=direct_abstract_declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, direct_abstract_declarator149.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, abstract_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "abstract_declarator"

    public static class direct_abstract_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "direct_abstract_declarator"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:443:1: direct_abstract_declarator : ( lpar abstract_declarator rpar | abstract_declarator_suffix ) ( abstract_declarator_suffix )* ;
    public final CLangParser.direct_abstract_declarator_return direct_abstract_declarator() throws RecognitionException {
        CLangParser.direct_abstract_declarator_return retval = new CLangParser.direct_abstract_declarator_return();
        retval.start = input.LT(1);
        int direct_abstract_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.lpar_return lpar150 = null;

        CLangParser.abstract_declarator_return abstract_declarator151 = null;

        CLangParser.rpar_return rpar152 = null;

        CLangParser.abstract_declarator_suffix_return abstract_declarator_suffix153 = null;

        CLangParser.abstract_declarator_suffix_return abstract_declarator_suffix154 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:444:2: ( ( lpar abstract_declarator rpar | abstract_declarator_suffix ) ( abstract_declarator_suffix )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:444:4: ( lpar abstract_declarator rpar | abstract_declarator_suffix ) ( abstract_declarator_suffix )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:444:4: ( lpar abstract_declarator rpar | abstract_declarator_suffix )
            int alt47=2;
            alt47 = dfa47.predict(input);
            switch (alt47) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:444:6: lpar abstract_declarator rpar
                    {
                    pushFollow(FOLLOW_lpar_in_direct_abstract_declarator1821);
                    lpar150=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar150.getTree());
                    pushFollow(FOLLOW_abstract_declarator_in_direct_abstract_declarator1823);
                    abstract_declarator151=abstract_declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, abstract_declarator151.getTree());
                    pushFollow(FOLLOW_rpar_in_direct_abstract_declarator1825);
                    rpar152=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar152.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:444:38: abstract_declarator_suffix
                    {
                    pushFollow(FOLLOW_abstract_declarator_suffix_in_direct_abstract_declarator1829);
                    abstract_declarator_suffix153=abstract_declarator_suffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, abstract_declarator_suffix153.getTree());

                    }
                    break;

            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:444:67: ( abstract_declarator_suffix )*
            loop48:
            do {
                int alt48=2;
                alt48 = dfa48.predict(input);
                switch (alt48) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: abstract_declarator_suffix
            	    {
            	    pushFollow(FOLLOW_abstract_declarator_suffix_in_direct_abstract_declarator1833);
            	    abstract_declarator_suffix154=abstract_declarator_suffix();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, abstract_declarator_suffix154.getTree());

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, direct_abstract_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "direct_abstract_declarator"

    public static class abstract_declarator_suffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abstract_declarator_suffix"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:447:1: abstract_declarator_suffix : ( lbrack rbrack | lbrack constant_expression rbrack | lpar rpar | lpar parameter_type_list rpar );
    public final CLangParser.abstract_declarator_suffix_return abstract_declarator_suffix() throws RecognitionException {
        CLangParser.abstract_declarator_suffix_return retval = new CLangParser.abstract_declarator_suffix_return();
        retval.start = input.LT(1);
        int abstract_declarator_suffix_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.lbrack_return lbrack155 = null;

        CLangParser.rbrack_return rbrack156 = null;

        CLangParser.lbrack_return lbrack157 = null;

        CLangParser.constant_expression_return constant_expression158 = null;

        CLangParser.rbrack_return rbrack159 = null;

        CLangParser.lpar_return lpar160 = null;

        CLangParser.rpar_return rpar161 = null;

        CLangParser.lpar_return lpar162 = null;

        CLangParser.parameter_type_list_return parameter_type_list163 = null;

        CLangParser.rpar_return rpar164 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:448:2: ( lbrack rbrack | lbrack constant_expression rbrack | lpar rpar | lpar parameter_type_list rpar )
            int alt49=4;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:448:4: lbrack rbrack
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lbrack_in_abstract_declarator_suffix1845);
                    lbrack155=lbrack();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lbrack155.getTree());
                    pushFollow(FOLLOW_rbrack_in_abstract_declarator_suffix1847);
                    rbrack156=rbrack();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbrack156.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:449:4: lbrack constant_expression rbrack
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lbrack_in_abstract_declarator_suffix1852);
                    lbrack157=lbrack();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lbrack157.getTree());
                    pushFollow(FOLLOW_constant_expression_in_abstract_declarator_suffix1854);
                    constant_expression158=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression158.getTree());
                    pushFollow(FOLLOW_rbrack_in_abstract_declarator_suffix1856);
                    rbrack159=rbrack();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbrack159.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:450:4: lpar rpar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lpar_in_abstract_declarator_suffix1861);
                    lpar160=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar160.getTree());
                    pushFollow(FOLLOW_rpar_in_abstract_declarator_suffix1863);
                    rpar161=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar161.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:451:4: lpar parameter_type_list rpar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lpar_in_abstract_declarator_suffix1868);
                    lpar162=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar162.getTree());
                    pushFollow(FOLLOW_parameter_type_list_in_abstract_declarator_suffix1870);
                    parameter_type_list163=parameter_type_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_type_list163.getTree());
                    pushFollow(FOLLOW_rpar_in_abstract_declarator_suffix1872);
                    rpar164=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar164.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, abstract_declarator_suffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "abstract_declarator_suffix"

    public static class initializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "initializer"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:454:1: initializer : ( assignment_expression | lbrace initializer_list ( comma )? rbrace );
    public final CLangParser.initializer_return initializer() throws RecognitionException {
        CLangParser.initializer_return retval = new CLangParser.initializer_return();
        retval.start = input.LT(1);
        int initializer_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.assignment_expression_return assignment_expression165 = null;

        CLangParser.lbrace_return lbrace166 = null;

        CLangParser.initializer_list_return initializer_list167 = null;

        CLangParser.comma_return comma168 = null;

        CLangParser.rbrace_return rbrace169 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:455:2: ( assignment_expression | lbrace initializer_list ( comma )? rbrace )
            int alt51=2;
            alt51 = dfa51.predict(input);
            switch (alt51) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:455:4: assignment_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_assignment_expression_in_initializer1883);
                    assignment_expression165=assignment_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_expression165.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:456:4: lbrace initializer_list ( comma )? rbrace
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lbrace_in_initializer1888);
                    lbrace166=lbrace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lbrace166.getTree());
                    pushFollow(FOLLOW_initializer_list_in_initializer1890);
                    initializer_list167=initializer_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, initializer_list167.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:456:28: ( comma )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==63) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: comma
                            {
                            pushFollow(FOLLOW_comma_in_initializer1892);
                            comma168=comma();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma168.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_rbrace_in_initializer1895);
                    rbrace169=rbrace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbrace169.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, initializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "initializer"

    public static class initializer_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "initializer_list"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:459:1: initializer_list : initializer ( comma initializer )* ;
    public final CLangParser.initializer_list_return initializer_list() throws RecognitionException {
        CLangParser.initializer_list_return retval = new CLangParser.initializer_list_return();
        retval.start = input.LT(1);
        int initializer_list_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.initializer_return initializer170 = null;

        CLangParser.comma_return comma171 = null;

        CLangParser.initializer_return initializer172 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:460:2: ( initializer ( comma initializer )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:460:4: initializer ( comma initializer )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_initializer_in_initializer_list1906);
            initializer170=initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, initializer170.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:460:16: ( comma initializer )*
            loop52:
            do {
                int alt52=2;
                alt52 = dfa52.predict(input);
                switch (alt52) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:460:18: comma initializer
            	    {
            	    pushFollow(FOLLOW_comma_in_initializer_list1910);
            	    comma171=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma171.getTree());
            	    pushFollow(FOLLOW_initializer_in_initializer_list1912);
            	    initializer172=initializer();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, initializer172.getTree());

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, initializer_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "initializer_list"

    public static class argument_expression_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument_expression_list"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:465:1: argument_expression_list : assignment_expression ( comma assignment_expression )* -> ^( ARGUMENT assignment_expression ) ( comma ^( ARGUMENT assignment_expression ) )* ;
    public final CLangParser.argument_expression_list_return argument_expression_list() throws RecognitionException {
        CLangParser.argument_expression_list_return retval = new CLangParser.argument_expression_list_return();
        retval.start = input.LT(1);
        int argument_expression_list_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.assignment_expression_return assignment_expression173 = null;

        CLangParser.comma_return comma174 = null;

        CLangParser.assignment_expression_return assignment_expression175 = null;


        RewriteRuleSubtreeStream stream_comma=new RewriteRuleSubtreeStream(adaptor,"rule comma");
        RewriteRuleSubtreeStream stream_assignment_expression=new RewriteRuleSubtreeStream(adaptor,"rule assignment_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:466:2: ( assignment_expression ( comma assignment_expression )* -> ^( ARGUMENT assignment_expression ) ( comma ^( ARGUMENT assignment_expression ) )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:466:4: assignment_expression ( comma assignment_expression )*
            {
            pushFollow(FOLLOW_assignment_expression_in_argument_expression_list1928);
            assignment_expression173=assignment_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_assignment_expression.add(assignment_expression173.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:466:26: ( comma assignment_expression )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==63) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:466:28: comma assignment_expression
            	    {
            	    pushFollow(FOLLOW_comma_in_argument_expression_list1932);
            	    comma174=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_comma.add(comma174.getTree());
            	    pushFollow(FOLLOW_assignment_expression_in_argument_expression_list1934);
            	    assignment_expression175=assignment_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_assignment_expression.add(assignment_expression175.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);



            // AST REWRITE
            // elements: assignment_expression, assignment_expression, comma
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 467:3: -> ^( ARGUMENT assignment_expression ) ( comma ^( ARGUMENT assignment_expression ) )*
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:467:6: ^( ARGUMENT assignment_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARGUMENT, "ARGUMENT"), root_1);

                adaptor.addChild(root_1, stream_assignment_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:467:42: ( comma ^( ARGUMENT assignment_expression ) )*
                while ( stream_assignment_expression.hasNext()||stream_comma.hasNext() ) {
                    adaptor.addChild(root_0, stream_comma.nextTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:467:50: ^( ARGUMENT assignment_expression )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARGUMENT, "ARGUMENT"), root_1);

                    adaptor.addChild(root_1, stream_assignment_expression.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_assignment_expression.reset();
                stream_comma.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, argument_expression_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "argument_expression_list"

    public static class plusOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plusOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:470:1: plusOp : '+' -> ^( OPERATOR '+' ) ;
    public final CLangParser.plusOp_return plusOp() throws RecognitionException {
        CLangParser.plusOp_return retval = new CLangParser.plusOp_return();
        retval.start = input.LT(1);
        int plusOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal176=null;

        CommonTree char_literal176_tree=null;
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:470:8: ( '+' -> ^( OPERATOR '+' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:470:10: '+'
            {
            char_literal176=(Token)match(input,103,FOLLOW_103_in_plusOp1974); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_103.add(char_literal176);



            // AST REWRITE
            // elements: 103
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 470:14: -> ^( OPERATOR '+' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:470:17: ^( OPERATOR '+' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_103.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, plusOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "plusOp"

    public static class minusOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minusOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:471:1: minusOp : '-' -> ^( OPERATOR '-' ) ;
    public final CLangParser.minusOp_return minusOp() throws RecognitionException {
        CLangParser.minusOp_return retval = new CLangParser.minusOp_return();
        retval.start = input.LT(1);
        int minusOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal177=null;

        CommonTree char_literal177_tree=null;
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:471:9: ( '-' -> ^( OPERATOR '-' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:471:11: '-'
            {
            char_literal177=(Token)match(input,104,FOLLOW_104_in_minusOp1992); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_104.add(char_literal177);



            // AST REWRITE
            // elements: 104
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 471:15: -> ^( OPERATOR '-' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:471:18: ^( OPERATOR '-' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_104.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, minusOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minusOp"

    public static class multOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:472:1: multOp : '*' -> ^( OPERATOR '*' ) ;
    public final CLangParser.multOp_return multOp() throws RecognitionException {
        CLangParser.multOp_return retval = new CLangParser.multOp_return();
        retval.start = input.LT(1);
        int multOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal178=null;

        CommonTree char_literal178_tree=null;
        RewriteRuleTokenStream stream_101=new RewriteRuleTokenStream(adaptor,"token 101");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:472:8: ( '*' -> ^( OPERATOR '*' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:472:10: '*'
            {
            char_literal178=(Token)match(input,101,FOLLOW_101_in_multOp2010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_101.add(char_literal178);



            // AST REWRITE
            // elements: 101
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 472:14: -> ^( OPERATOR '*' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:472:17: ^( OPERATOR '*' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_101.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, multOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multOp"

    public static class divOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "divOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:473:1: divOp : '/' -> ^( OPERATOR '/' ) ;
    public final CLangParser.divOp_return divOp() throws RecognitionException {
        CLangParser.divOp_return retval = new CLangParser.divOp_return();
        retval.start = input.LT(1);
        int divOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal179=null;

        CommonTree char_literal179_tree=null;
        RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:473:7: ( '/' -> ^( OPERATOR '/' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:473:9: '/'
            {
            char_literal179=(Token)match(input,105,FOLLOW_105_in_divOp2028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_105.add(char_literal179);



            // AST REWRITE
            // elements: 105
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 473:13: -> ^( OPERATOR '/' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:473:16: ^( OPERATOR '/' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_105.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, divOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "divOp"

    public static class modOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:474:1: modOp : '%' -> ^( OPERATOR '%' ) ;
    public final CLangParser.modOp_return modOp() throws RecognitionException {
        CLangParser.modOp_return retval = new CLangParser.modOp_return();
        retval.start = input.LT(1);
        int modOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal180=null;

        CommonTree char_literal180_tree=null;
        RewriteRuleTokenStream stream_106=new RewriteRuleTokenStream(adaptor,"token 106");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:474:7: ( '%' -> ^( OPERATOR '%' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:474:9: '%'
            {
            char_literal180=(Token)match(input,106,FOLLOW_106_in_modOp2046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_106.add(char_literal180);



            // AST REWRITE
            // elements: 106
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 474:13: -> ^( OPERATOR '%' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:474:16: ^( OPERATOR '%' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_106.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, modOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modOp"

    public static class multiplicative_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicative_op"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:476:1: multiplicative_op : ( multOp | divOp | modOp );
    public final CLangParser.multiplicative_op_return multiplicative_op() throws RecognitionException {
        CLangParser.multiplicative_op_return retval = new CLangParser.multiplicative_op_return();
        retval.start = input.LT(1);
        int multiplicative_op_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.multOp_return multOp181 = null;

        CLangParser.divOp_return divOp182 = null;

        CLangParser.modOp_return modOp183 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:477:3: ( multOp | divOp | modOp )
            int alt54=3;
            switch ( input.LA(1) ) {
            case 101:
                {
                alt54=1;
                }
                break;
            case 105:
                {
                alt54=2;
                }
                break;
            case 106:
                {
                alt54=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;
            }

            switch (alt54) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:477:5: multOp
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_multOp_in_multiplicative_op2067);
                    multOp181=multOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multOp181.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:477:14: divOp
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_divOp_in_multiplicative_op2071);
                    divOp182=divOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, divOp182.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:477:22: modOp
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_modOp_in_multiplicative_op2075);
                    modOp183=modOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modOp183.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, multiplicative_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicative_op"

    public static class additive_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additive_op"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:480:1: additive_op : ( plusOp | minusOp );
    public final CLangParser.additive_op_return additive_op() throws RecognitionException {
        CLangParser.additive_op_return retval = new CLangParser.additive_op_return();
        retval.start = input.LT(1);
        int additive_op_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.plusOp_return plusOp184 = null;

        CLangParser.minusOp_return minusOp185 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:481:3: ( plusOp | minusOp )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==103) ) {
                alt55=1;
            }
            else if ( (LA55_0==104) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:481:5: plusOp
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_plusOp_in_additive_op2090);
                    plusOp184=plusOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plusOp184.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:481:14: minusOp
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_minusOp_in_additive_op2094);
                    minusOp185=minusOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, minusOp185.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, additive_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additive_op"

    public static class additive_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additive_expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:484:1: additive_expression : multiplicative_expression ( additive_op multiplicative_expression )* ;
    public final CLangParser.additive_expression_return additive_expression() throws RecognitionException {
        CLangParser.additive_expression_return retval = new CLangParser.additive_expression_return();
        retval.start = input.LT(1);
        int additive_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.multiplicative_expression_return multiplicative_expression186 = null;

        CLangParser.additive_op_return additive_op187 = null;

        CLangParser.multiplicative_expression_return multiplicative_expression188 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:485:2: ( multiplicative_expression ( additive_op multiplicative_expression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:485:5: multiplicative_expression ( additive_op multiplicative_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplicative_expression_in_additive_expression2109);
            multiplicative_expression186=multiplicative_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicative_expression186.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:485:31: ( additive_op multiplicative_expression )*
            loop56:
            do {
                int alt56=2;
                alt56 = dfa56.predict(input);
                switch (alt56) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:485:32: additive_op multiplicative_expression
            	    {
            	    pushFollow(FOLLOW_additive_op_in_additive_expression2112);
            	    additive_op187=additive_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(additive_op187.getTree(), root_0);
            	    pushFollow(FOLLOW_multiplicative_expression_in_additive_expression2116);
            	    multiplicative_expression188=multiplicative_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicative_expression188.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, additive_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additive_expression"

    public static class multiplicative_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicative_expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:489:1: multiplicative_expression : ( cast_expression ) ( multiplicative_op cast_expression )* ;
    public final CLangParser.multiplicative_expression_return multiplicative_expression() throws RecognitionException {
        CLangParser.multiplicative_expression_return retval = new CLangParser.multiplicative_expression_return();
        retval.start = input.LT(1);
        int multiplicative_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.cast_expression_return cast_expression189 = null;

        CLangParser.multiplicative_op_return multiplicative_op190 = null;

        CLangParser.cast_expression_return cast_expression191 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:490:2: ( ( cast_expression ) ( multiplicative_op cast_expression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:490:4: ( cast_expression ) ( multiplicative_op cast_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:490:4: ( cast_expression )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:490:5: cast_expression
            {
            pushFollow(FOLLOW_cast_expression_in_multiplicative_expression2132);
            cast_expression189=cast_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression189.getTree());

            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:490:22: ( multiplicative_op cast_expression )*
            loop57:
            do {
                int alt57=2;
                alt57 = dfa57.predict(input);
                switch (alt57) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:490:23: multiplicative_op cast_expression
            	    {
            	    pushFollow(FOLLOW_multiplicative_op_in_multiplicative_expression2136);
            	    multiplicative_op190=multiplicative_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(multiplicative_op190.getTree(), root_0);
            	    pushFollow(FOLLOW_cast_expression_in_multiplicative_expression2140);
            	    cast_expression191=cast_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression191.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, multiplicative_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicative_expression"

    public static class cast_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cast_expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:494:1: cast_expression : ( lpar type_name rpar cast_expression | unary_expression );
    public final CLangParser.cast_expression_return cast_expression() throws RecognitionException {
        CLangParser.cast_expression_return retval = new CLangParser.cast_expression_return();
        retval.start = input.LT(1);
        int cast_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.lpar_return lpar192 = null;

        CLangParser.type_name_return type_name193 = null;

        CLangParser.rpar_return rpar194 = null;

        CLangParser.cast_expression_return cast_expression195 = null;

        CLangParser.unary_expression_return unary_expression196 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:495:2: ( lpar type_name rpar cast_expression | unary_expression )
            int alt58=2;
            alt58 = dfa58.predict(input);
            switch (alt58) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:495:4: lpar type_name rpar cast_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lpar_in_cast_expression2156);
                    lpar192=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar192.getTree());
                    pushFollow(FOLLOW_type_name_in_cast_expression2158);
                    type_name193=type_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name193.getTree());
                    pushFollow(FOLLOW_rpar_in_cast_expression2160);
                    rpar194=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar194.getTree());
                    pushFollow(FOLLOW_cast_expression_in_cast_expression2162);
                    cast_expression195=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression195.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:496:4: unary_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unary_expression_in_cast_expression2167);
                    unary_expression196=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression196.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, cast_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cast_expression"

    public static class incOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "incOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:499:1: incOp : '++' -> ^( OPERATOR '++' ) ;
    public final CLangParser.incOp_return incOp() throws RecognitionException {
        CLangParser.incOp_return retval = new CLangParser.incOp_return();
        retval.start = input.LT(1);
        int incOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal197=null;

        CommonTree string_literal197_tree=null;
        RewriteRuleTokenStream stream_107=new RewriteRuleTokenStream(adaptor,"token 107");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:499:8: ( '++' -> ^( OPERATOR '++' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:499:10: '++'
            {
            string_literal197=(Token)match(input,107,FOLLOW_107_in_incOp2178); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_107.add(string_literal197);



            // AST REWRITE
            // elements: 107
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 499:17: -> ^( OPERATOR '++' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:499:20: ^( OPERATOR '++' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_107.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, incOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "incOp"

    public static class decOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:500:1: decOp : '--' -> ^( OPERATOR '--' ) ;
    public final CLangParser.decOp_return decOp() throws RecognitionException {
        CLangParser.decOp_return retval = new CLangParser.decOp_return();
        retval.start = input.LT(1);
        int decOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal198=null;

        CommonTree string_literal198_tree=null;
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:500:8: ( '--' -> ^( OPERATOR '--' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:500:10: '--'
            {
            string_literal198=(Token)match(input,108,FOLLOW_108_in_decOp2199); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_108.add(string_literal198);



            // AST REWRITE
            // elements: 108
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 500:17: -> ^( OPERATOR '--' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:500:20: ^( OPERATOR '--' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_108.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, decOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "decOp"

    public static class sizeofOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sizeofOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:501:1: sizeofOp : 'sizeof' -> ^( OPERATOR 'sizeof' ) ;
    public final CLangParser.sizeofOp_return sizeofOp() throws RecognitionException {
        CLangParser.sizeofOp_return retval = new CLangParser.sizeofOp_return();
        retval.start = input.LT(1);
        int sizeofOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal199=null;

        CommonTree string_literal199_tree=null;
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:501:10: ( 'sizeof' -> ^( OPERATOR 'sizeof' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:501:12: 'sizeof'
            {
            string_literal199=(Token)match(input,109,FOLLOW_109_in_sizeofOp2219); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_109.add(string_literal199);



            // AST REWRITE
            // elements: 109
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 501:22: -> ^( OPERATOR 'sizeof' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:501:25: ^( OPERATOR 'sizeof' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_109.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, sizeofOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sizeofOp"

    public static class unary_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:503:1: unary_expression : ( postfix_expression | primary_expression ( lpar rpar )* -> ^( FUNCTION_CALL primary_expression ^( ARGUMENT_LIST ( lpar rpar )* ) ) | primary_expression ( lpar argument_expression_list rpar )* -> ^( FUNCTION_CALL primary_expression ^( ARGUMENT_LIST ( lpar argument_expression_list rpar )* ) ) | incOp unary_expression -> ^( ASSIGNMENT_STATEMENT incOp unary_expression ) | decOp unary_expression -> ^( ASSIGNMENT_STATEMENT decOp unary_expression ) | unary_operator_h cast_expression | sizeofOp unary_expression | sizeofOp lpar type_name rpar );
    public final CLangParser.unary_expression_return unary_expression() throws RecognitionException {
        CLangParser.unary_expression_return retval = new CLangParser.unary_expression_return();
        retval.start = input.LT(1);
        int unary_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.postfix_expression_return postfix_expression200 = null;

        CLangParser.primary_expression_return primary_expression201 = null;

        CLangParser.lpar_return lpar202 = null;

        CLangParser.rpar_return rpar203 = null;

        CLangParser.primary_expression_return primary_expression204 = null;

        CLangParser.lpar_return lpar205 = null;

        CLangParser.argument_expression_list_return argument_expression_list206 = null;

        CLangParser.rpar_return rpar207 = null;

        CLangParser.incOp_return incOp208 = null;

        CLangParser.unary_expression_return unary_expression209 = null;

        CLangParser.decOp_return decOp210 = null;

        CLangParser.unary_expression_return unary_expression211 = null;

        CLangParser.unary_operator_h_return unary_operator_h212 = null;

        CLangParser.cast_expression_return cast_expression213 = null;

        CLangParser.sizeofOp_return sizeofOp214 = null;

        CLangParser.unary_expression_return unary_expression215 = null;

        CLangParser.sizeofOp_return sizeofOp216 = null;

        CLangParser.lpar_return lpar217 = null;

        CLangParser.type_name_return type_name218 = null;

        CLangParser.rpar_return rpar219 = null;


        RewriteRuleSubtreeStream stream_decOp=new RewriteRuleSubtreeStream(adaptor,"rule decOp");
        RewriteRuleSubtreeStream stream_incOp=new RewriteRuleSubtreeStream(adaptor,"rule incOp");
        RewriteRuleSubtreeStream stream_lpar=new RewriteRuleSubtreeStream(adaptor,"rule lpar");
        RewriteRuleSubtreeStream stream_primary_expression=new RewriteRuleSubtreeStream(adaptor,"rule primary_expression");
        RewriteRuleSubtreeStream stream_unary_expression=new RewriteRuleSubtreeStream(adaptor,"rule unary_expression");
        RewriteRuleSubtreeStream stream_rpar=new RewriteRuleSubtreeStream(adaptor,"rule rpar");
        RewriteRuleSubtreeStream stream_argument_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule argument_expression_list");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:504:2: ( postfix_expression | primary_expression ( lpar rpar )* -> ^( FUNCTION_CALL primary_expression ^( ARGUMENT_LIST ( lpar rpar )* ) ) | primary_expression ( lpar argument_expression_list rpar )* -> ^( FUNCTION_CALL primary_expression ^( ARGUMENT_LIST ( lpar argument_expression_list rpar )* ) ) | incOp unary_expression -> ^( ASSIGNMENT_STATEMENT incOp unary_expression ) | decOp unary_expression -> ^( ASSIGNMENT_STATEMENT decOp unary_expression ) | unary_operator_h cast_expression | sizeofOp unary_expression | sizeofOp lpar type_name rpar )
            int alt61=8;
            alt61 = dfa61.predict(input);
            switch (alt61) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:504:4: postfix_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_postfix_expression_in_unary_expression2240);
                    postfix_expression200=postfix_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, postfix_expression200.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:505:4: primary_expression ( lpar rpar )*
                    {
                    pushFollow(FOLLOW_primary_expression_in_unary_expression2245);
                    primary_expression201=primary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primary_expression.add(primary_expression201.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:505:23: ( lpar rpar )*
                    loop59:
                    do {
                        int alt59=2;
                        alt59 = dfa59.predict(input);
                        switch (alt59) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:505:25: lpar rpar
                    	    {
                    	    pushFollow(FOLLOW_lpar_in_unary_expression2249);
                    	    lpar202=lpar();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lpar.add(lpar202.getTree());
                    	    pushFollow(FOLLOW_rpar_in_unary_expression2251);
                    	    rpar203=rpar();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_rpar.add(rpar203.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop59;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: primary_expression, lpar, rpar
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 506:3: -> ^( FUNCTION_CALL primary_expression ^( ARGUMENT_LIST ( lpar rpar )* ) )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:506:6: ^( FUNCTION_CALL primary_expression ^( ARGUMENT_LIST ( lpar rpar )* ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

                        adaptor.addChild(root_1, stream_primary_expression.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:506:42: ^( ARGUMENT_LIST ( lpar rpar )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARGUMENT_LIST, "ARGUMENT_LIST"), root_2);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:506:59: ( lpar rpar )*
                        while ( stream_lpar.hasNext()||stream_rpar.hasNext() ) {
                            adaptor.addChild(root_2, stream_lpar.nextTree());
                            adaptor.addChild(root_2, stream_rpar.nextTree());

                        }
                        stream_lpar.reset();
                        stream_rpar.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:507:9: primary_expression ( lpar argument_expression_list rpar )*
                    {
                    pushFollow(FOLLOW_primary_expression_in_unary_expression2291);
                    primary_expression204=primary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primary_expression.add(primary_expression204.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:507:28: ( lpar argument_expression_list rpar )*
                    loop60:
                    do {
                        int alt60=2;
                        alt60 = dfa60.predict(input);
                        switch (alt60) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:507:30: lpar argument_expression_list rpar
                    	    {
                    	    pushFollow(FOLLOW_lpar_in_unary_expression2295);
                    	    lpar205=lpar();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lpar.add(lpar205.getTree());
                    	    pushFollow(FOLLOW_argument_expression_list_in_unary_expression2297);
                    	    argument_expression_list206=argument_expression_list();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_argument_expression_list.add(argument_expression_list206.getTree());
                    	    pushFollow(FOLLOW_rpar_in_unary_expression2299);
                    	    rpar207=rpar();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_rpar.add(rpar207.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop60;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: rpar, primary_expression, lpar, argument_expression_list
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 508:6: -> ^( FUNCTION_CALL primary_expression ^( ARGUMENT_LIST ( lpar argument_expression_list rpar )* ) )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:508:9: ^( FUNCTION_CALL primary_expression ^( ARGUMENT_LIST ( lpar argument_expression_list rpar )* ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

                        adaptor.addChild(root_1, stream_primary_expression.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:508:45: ^( ARGUMENT_LIST ( lpar argument_expression_list rpar )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARGUMENT_LIST, "ARGUMENT_LIST"), root_2);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:508:62: ( lpar argument_expression_list rpar )*
                        while ( stream_rpar.hasNext()||stream_lpar.hasNext()||stream_argument_expression_list.hasNext() ) {
                            adaptor.addChild(root_2, stream_lpar.nextTree());
                            adaptor.addChild(root_2, stream_argument_expression_list.nextTree());
                            adaptor.addChild(root_2, stream_rpar.nextTree());

                        }
                        stream_rpar.reset();
                        stream_lpar.reset();
                        stream_argument_expression_list.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:509:4: incOp unary_expression
                    {
                    pushFollow(FOLLOW_incOp_in_unary_expression2339);
                    incOp208=incOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_incOp.add(incOp208.getTree());
                    pushFollow(FOLLOW_unary_expression_in_unary_expression2341);
                    unary_expression209=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unary_expression.add(unary_expression209.getTree());


                    // AST REWRITE
                    // elements: unary_expression, incOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 509:27: -> ^( ASSIGNMENT_STATEMENT incOp unary_expression )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:509:30: ^( ASSIGNMENT_STATEMENT incOp unary_expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGNMENT_STATEMENT, "ASSIGNMENT_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_incOp.nextTree());
                        adaptor.addChild(root_1, stream_unary_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:510:4: decOp unary_expression
                    {
                    pushFollow(FOLLOW_decOp_in_unary_expression2356);
                    decOp210=decOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_decOp.add(decOp210.getTree());
                    pushFollow(FOLLOW_unary_expression_in_unary_expression2358);
                    unary_expression211=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unary_expression.add(unary_expression211.getTree());


                    // AST REWRITE
                    // elements: unary_expression, decOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 510:27: -> ^( ASSIGNMENT_STATEMENT decOp unary_expression )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:510:30: ^( ASSIGNMENT_STATEMENT decOp unary_expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGNMENT_STATEMENT, "ASSIGNMENT_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_decOp.nextTree());
                        adaptor.addChild(root_1, stream_unary_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:511:4: unary_operator_h cast_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unary_operator_h_in_unary_expression2373);
                    unary_operator_h212=unary_operator_h();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_operator_h212.getTree());
                    pushFollow(FOLLOW_cast_expression_in_unary_expression2375);
                    cast_expression213=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression213.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:512:4: sizeofOp unary_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sizeofOp_in_unary_expression2380);
                    sizeofOp214=sizeofOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sizeofOp214.getTree());
                    pushFollow(FOLLOW_unary_expression_in_unary_expression2382);
                    unary_expression215=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression215.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:513:4: sizeofOp lpar type_name rpar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sizeofOp_in_unary_expression2387);
                    sizeofOp216=sizeofOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sizeofOp216.getTree());
                    pushFollow(FOLLOW_lpar_in_unary_expression2389);
                    lpar217=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar217.getTree());
                    pushFollow(FOLLOW_type_name_in_unary_expression2391);
                    type_name218=type_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name218.getTree());
                    pushFollow(FOLLOW_rpar_in_unary_expression2393);
                    rpar219=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar219.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, unary_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unary_expression"

    public static class dotOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:517:1: dotOp : '.' -> ^( OPERATOR '.' ) ;
    public final CLangParser.dotOp_return dotOp() throws RecognitionException {
        CLangParser.dotOp_return retval = new CLangParser.dotOp_return();
        retval.start = input.LT(1);
        int dotOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal220=null;

        CommonTree char_literal220_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:517:7: ( '.' -> ^( OPERATOR '.' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:517:9: '.'
            {
            char_literal220=(Token)match(input,110,FOLLOW_110_in_dotOp2405); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_110.add(char_literal220);



            // AST REWRITE
            // elements: 110
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 517:13: -> ^( OPERATOR '.' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:517:16: ^( OPERATOR '.' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_110.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, dotOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dotOp"

    public static class ptrOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ptrOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:518:1: ptrOp : '->' -> ^( OPERATOR '->' ) ;
    public final CLangParser.ptrOp_return ptrOp() throws RecognitionException {
        CLangParser.ptrOp_return retval = new CLangParser.ptrOp_return();
        retval.start = input.LT(1);
        int ptrOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal221=null;

        CommonTree string_literal221_tree=null;
        RewriteRuleTokenStream stream_111=new RewriteRuleTokenStream(adaptor,"token 111");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:518:7: ( '->' -> ^( OPERATOR '->' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:518:9: '->'
            {
            string_literal221=(Token)match(input,111,FOLLOW_111_in_ptrOp2423); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_111.add(string_literal221);



            // AST REWRITE
            // elements: 111
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 518:14: -> ^( OPERATOR '->' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:518:17: ^( OPERATOR '->' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_111.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, ptrOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ptrOp"

    public static class postfix_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postfix_expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:520:1: postfix_expression : primary_expression ( -> primary_expression | ( postfix_expression_opts[$primary_expression.tree] )? -> postfix_expression_opts ) ;
    public final CLangParser.postfix_expression_return postfix_expression() throws RecognitionException {
        CLangParser.postfix_expression_return retval = new CLangParser.postfix_expression_return();
        retval.start = input.LT(1);
        int postfix_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.primary_expression_return primary_expression222 = null;

        CLangParser.postfix_expression_opts_return postfix_expression_opts223 = null;


        RewriteRuleSubtreeStream stream_postfix_expression_opts=new RewriteRuleSubtreeStream(adaptor,"rule postfix_expression_opts");
        RewriteRuleSubtreeStream stream_primary_expression=new RewriteRuleSubtreeStream(adaptor,"rule primary_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:521:2: ( primary_expression ( -> primary_expression | ( postfix_expression_opts[$primary_expression.tree] )? -> postfix_expression_opts ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:521:6: primary_expression ( -> primary_expression | ( postfix_expression_opts[$primary_expression.tree] )? -> postfix_expression_opts )
            {
            pushFollow(FOLLOW_primary_expression_in_postfix_expression2445);
            primary_expression222=primary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primary_expression.add(primary_expression222.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:521:25: ( -> primary_expression | ( postfix_expression_opts[$primary_expression.tree] )? -> postfix_expression_opts )
            int alt63=2;
            alt63 = dfa63.predict(input);
            switch (alt63) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:521:27: 
                    {

                    // AST REWRITE
                    // elements: primary_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 521:27: -> primary_expression
                    {
                        adaptor.addChild(root_0, stream_primary_expression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:522:5: ( postfix_expression_opts[$primary_expression.tree] )?
                    {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:522:5: ( postfix_expression_opts[$primary_expression.tree] )?
                    int alt62=2;
                    alt62 = dfa62.predict(input);
                    switch (alt62) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: postfix_expression_opts[$primary_expression.tree]
                            {
                            pushFollow(FOLLOW_postfix_expression_opts_in_postfix_expression2458);
                            postfix_expression_opts223=postfix_expression_opts((primary_expression222!=null?((CommonTree)primary_expression222.tree):null));

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_postfix_expression_opts.add(postfix_expression_opts223.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: postfix_expression_opts
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 522:56: -> postfix_expression_opts
                    {
                        adaptor.addChild(root_0, stream_postfix_expression_opts.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, postfix_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "postfix_expression"

    public static class postfix_expression_opts_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postfix_expression_opts"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:526:1: postfix_expression_opts[CommonTree primary_expression] : ( incOp ( postfix_expression_sufix )* -> ^( ASSIGNMENT_STATEMENT incOp ( postfix_expression_sufix )* ) | decOp ( postfix_expression_sufix )* -> ^( ASSIGNMENT_STATEMENT decOp ( postfix_expression_sufix )* ) | ( lpar rpar ) ( postfix_expression_sufix )* -> lpar rpar ( postfix_expression_sufix )* | ( lpar argument_expression_list rpar ) ( postfix_expression_sufix )* -> ^( FUNCTION_CALL ^( ARGUMENT_LIST ( lpar argument_expression_list rpar )* ) ( postfix_expression_sufix )* ) | ( dotOp identifier ) ( postfix_expression_sufix )* -> ^( dotOp identifier ) ( postfix_expression_sufix )* | ( ptrOp identifier ) ( postfix_expression_sufix )* -> ^( ptrOp identifier ) ( postfix_expression_sufix )* | ( lbrack expression rbrack ) ( postfix_expression_sufix )* -> lbrack expression rbrack ( postfix_expression_sufix )* );
    public final CLangParser.postfix_expression_opts_return postfix_expression_opts(CommonTree primary_expression) throws RecognitionException {
        CLangParser.postfix_expression_opts_return retval = new CLangParser.postfix_expression_opts_return();
        retval.start = input.LT(1);
        int postfix_expression_opts_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.incOp_return incOp224 = null;

        CLangParser.postfix_expression_sufix_return postfix_expression_sufix225 = null;

        CLangParser.decOp_return decOp226 = null;

        CLangParser.postfix_expression_sufix_return postfix_expression_sufix227 = null;

        CLangParser.lpar_return lpar228 = null;

        CLangParser.rpar_return rpar229 = null;

        CLangParser.postfix_expression_sufix_return postfix_expression_sufix230 = null;

        CLangParser.lpar_return lpar231 = null;

        CLangParser.argument_expression_list_return argument_expression_list232 = null;

        CLangParser.rpar_return rpar233 = null;

        CLangParser.postfix_expression_sufix_return postfix_expression_sufix234 = null;

        CLangParser.dotOp_return dotOp235 = null;

        CLangParser.identifier_return identifier236 = null;

        CLangParser.postfix_expression_sufix_return postfix_expression_sufix237 = null;

        CLangParser.ptrOp_return ptrOp238 = null;

        CLangParser.identifier_return identifier239 = null;

        CLangParser.postfix_expression_sufix_return postfix_expression_sufix240 = null;

        CLangParser.lbrack_return lbrack241 = null;

        CLangParser.expression_return expression242 = null;

        CLangParser.rbrack_return rbrack243 = null;

        CLangParser.postfix_expression_sufix_return postfix_expression_sufix244 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_postfix_expression_sufix=new RewriteRuleSubtreeStream(adaptor,"rule postfix_expression_sufix");
        RewriteRuleSubtreeStream stream_decOp=new RewriteRuleSubtreeStream(adaptor,"rule decOp");
        RewriteRuleSubtreeStream stream_incOp=new RewriteRuleSubtreeStream(adaptor,"rule incOp");
        RewriteRuleSubtreeStream stream_dotOp=new RewriteRuleSubtreeStream(adaptor,"rule dotOp");
        RewriteRuleSubtreeStream stream_lbrack=new RewriteRuleSubtreeStream(adaptor,"rule lbrack");
        RewriteRuleSubtreeStream stream_lpar=new RewriteRuleSubtreeStream(adaptor,"rule lpar");
        RewriteRuleSubtreeStream stream_rbrack=new RewriteRuleSubtreeStream(adaptor,"rule rbrack");
        RewriteRuleSubtreeStream stream_ptrOp=new RewriteRuleSubtreeStream(adaptor,"rule ptrOp");
        RewriteRuleSubtreeStream stream_rpar=new RewriteRuleSubtreeStream(adaptor,"rule rpar");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_argument_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule argument_expression_list");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:527:3: ( incOp ( postfix_expression_sufix )* -> ^( ASSIGNMENT_STATEMENT incOp ( postfix_expression_sufix )* ) | decOp ( postfix_expression_sufix )* -> ^( ASSIGNMENT_STATEMENT decOp ( postfix_expression_sufix )* ) | ( lpar rpar ) ( postfix_expression_sufix )* -> lpar rpar ( postfix_expression_sufix )* | ( lpar argument_expression_list rpar ) ( postfix_expression_sufix )* -> ^( FUNCTION_CALL ^( ARGUMENT_LIST ( lpar argument_expression_list rpar )* ) ( postfix_expression_sufix )* ) | ( dotOp identifier ) ( postfix_expression_sufix )* -> ^( dotOp identifier ) ( postfix_expression_sufix )* | ( ptrOp identifier ) ( postfix_expression_sufix )* -> ^( ptrOp identifier ) ( postfix_expression_sufix )* | ( lbrack expression rbrack ) ( postfix_expression_sufix )* -> lbrack expression rbrack ( postfix_expression_sufix )* )
            int alt71=7;
            alt71 = dfa71.predict(input);
            switch (alt71) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:527:5: incOp ( postfix_expression_sufix )*
                    {
                    pushFollow(FOLLOW_incOp_in_postfix_expression_opts2483);
                    incOp224=incOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_incOp.add(incOp224.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:527:11: ( postfix_expression_sufix )*
                    loop64:
                    do {
                        int alt64=2;
                        alt64 = dfa64.predict(input);
                        switch (alt64) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: postfix_expression_sufix
                    	    {
                    	    pushFollow(FOLLOW_postfix_expression_sufix_in_postfix_expression_opts2485);
                    	    postfix_expression_sufix225=postfix_expression_sufix();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_postfix_expression_sufix.add(postfix_expression_sufix225.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop64;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: postfix_expression_sufix, incOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 527:37: -> ^( ASSIGNMENT_STATEMENT incOp ( postfix_expression_sufix )* )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:527:40: ^( ASSIGNMENT_STATEMENT incOp ( postfix_expression_sufix )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGNMENT_STATEMENT, "ASSIGNMENT_STATEMENT"), root_1);

                        adaptor.addChild(root_1, primary_expression);
                        adaptor.addChild(root_1, stream_incOp.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:527:92: ( postfix_expression_sufix )*
                        while ( stream_postfix_expression_sufix.hasNext() ) {
                            adaptor.addChild(root_1, stream_postfix_expression_sufix.nextTree());

                        }
                        stream_postfix_expression_sufix.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:528:12: decOp ( postfix_expression_sufix )*
                    {
                    pushFollow(FOLLOW_decOp_in_postfix_expression_opts2513);
                    decOp226=decOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_decOp.add(decOp226.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:528:18: ( postfix_expression_sufix )*
                    loop65:
                    do {
                        int alt65=2;
                        alt65 = dfa65.predict(input);
                        switch (alt65) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: postfix_expression_sufix
                    	    {
                    	    pushFollow(FOLLOW_postfix_expression_sufix_in_postfix_expression_opts2515);
                    	    postfix_expression_sufix227=postfix_expression_sufix();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_postfix_expression_sufix.add(postfix_expression_sufix227.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop65;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: postfix_expression_sufix, decOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 528:44: -> ^( ASSIGNMENT_STATEMENT decOp ( postfix_expression_sufix )* )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:528:47: ^( ASSIGNMENT_STATEMENT decOp ( postfix_expression_sufix )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGNMENT_STATEMENT, "ASSIGNMENT_STATEMENT"), root_1);

                        adaptor.addChild(root_1, primary_expression);
                        adaptor.addChild(root_1, stream_decOp.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:528:98: ( postfix_expression_sufix )*
                        while ( stream_postfix_expression_sufix.hasNext() ) {
                            adaptor.addChild(root_1, stream_postfix_expression_sufix.nextTree());

                        }
                        stream_postfix_expression_sufix.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:529:12: ( lpar rpar ) ( postfix_expression_sufix )*
                    {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:529:12: ( lpar rpar )
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:529:13: lpar rpar
                    {
                    pushFollow(FOLLOW_lpar_in_postfix_expression_opts2544);
                    lpar228=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lpar.add(lpar228.getTree());
                    pushFollow(FOLLOW_rpar_in_postfix_expression_opts2546);
                    rpar229=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rpar.add(rpar229.getTree());

                    }

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:529:24: ( postfix_expression_sufix )*
                    loop66:
                    do {
                        int alt66=2;
                        alt66 = dfa66.predict(input);
                        switch (alt66) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: postfix_expression_sufix
                    	    {
                    	    pushFollow(FOLLOW_postfix_expression_sufix_in_postfix_expression_opts2549);
                    	    postfix_expression_sufix230=postfix_expression_sufix();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_postfix_expression_sufix.add(postfix_expression_sufix230.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop66;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: lpar, postfix_expression_sufix, rpar
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 529:50: -> lpar rpar ( postfix_expression_sufix )*
                    {
                        adaptor.addChild(root_0, primary_expression);
                        adaptor.addChild(root_0, stream_lpar.nextTree());
                        adaptor.addChild(root_0, stream_rpar.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:529:85: ( postfix_expression_sufix )*
                        while ( stream_postfix_expression_sufix.hasNext() ) {
                            adaptor.addChild(root_0, stream_postfix_expression_sufix.nextTree());

                        }
                        stream_postfix_expression_sufix.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:530:12: ( lpar argument_expression_list rpar ) ( postfix_expression_sufix )*
                    {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:530:12: ( lpar argument_expression_list rpar )
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:530:13: lpar argument_expression_list rpar
                    {
                    pushFollow(FOLLOW_lpar_in_postfix_expression_opts2575);
                    lpar231=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lpar.add(lpar231.getTree());
                    pushFollow(FOLLOW_argument_expression_list_in_postfix_expression_opts2577);
                    argument_expression_list232=argument_expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_argument_expression_list.add(argument_expression_list232.getTree());
                    pushFollow(FOLLOW_rpar_in_postfix_expression_opts2579);
                    rpar233=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rpar.add(rpar233.getTree());

                    }

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:530:49: ( postfix_expression_sufix )*
                    loop67:
                    do {
                        int alt67=2;
                        alt67 = dfa67.predict(input);
                        switch (alt67) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: postfix_expression_sufix
                    	    {
                    	    pushFollow(FOLLOW_postfix_expression_sufix_in_postfix_expression_opts2582);
                    	    postfix_expression_sufix234=postfix_expression_sufix();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_postfix_expression_sufix.add(postfix_expression_sufix234.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop67;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: rpar, lpar, postfix_expression_sufix, argument_expression_list
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 530:75: -> ^( FUNCTION_CALL ^( ARGUMENT_LIST ( lpar argument_expression_list rpar )* ) ( postfix_expression_sufix )* )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:530:78: ^( FUNCTION_CALL ^( ARGUMENT_LIST ( lpar argument_expression_list rpar )* ) ( postfix_expression_sufix )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

                        adaptor.addChild(root_1, primary_expression);
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:530:117: ^( ARGUMENT_LIST ( lpar argument_expression_list rpar )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARGUMENT_LIST, "ARGUMENT_LIST"), root_2);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:530:134: ( lpar argument_expression_list rpar )*
                        while ( stream_rpar.hasNext()||stream_lpar.hasNext()||stream_argument_expression_list.hasNext() ) {
                            adaptor.addChild(root_2, stream_lpar.nextTree());
                            adaptor.addChild(root_2, stream_argument_expression_list.nextTree());
                            adaptor.addChild(root_2, stream_rpar.nextTree());

                        }
                        stream_rpar.reset();
                        stream_lpar.reset();
                        stream_argument_expression_list.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:530:176: ( postfix_expression_sufix )*
                        while ( stream_postfix_expression_sufix.hasNext() ) {
                            adaptor.addChild(root_1, stream_postfix_expression_sufix.nextTree());

                        }
                        stream_postfix_expression_sufix.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:532:12: ( dotOp identifier ) ( postfix_expression_sufix )*
                    {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:532:12: ( dotOp identifier )
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:532:13: dotOp identifier
                    {
                    pushFollow(FOLLOW_dotOp_in_postfix_expression_opts2637);
                    dotOp235=dotOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dotOp.add(dotOp235.getTree());
                    pushFollow(FOLLOW_identifier_in_postfix_expression_opts2639);
                    identifier236=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier236.getTree());

                    }

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:532:31: ( postfix_expression_sufix )*
                    loop68:
                    do {
                        int alt68=2;
                        alt68 = dfa68.predict(input);
                        switch (alt68) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: postfix_expression_sufix
                    	    {
                    	    pushFollow(FOLLOW_postfix_expression_sufix_in_postfix_expression_opts2642);
                    	    postfix_expression_sufix237=postfix_expression_sufix();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_postfix_expression_sufix.add(postfix_expression_sufix237.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop68;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: postfix_expression_sufix, identifier, dotOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 532:57: -> ^( dotOp identifier ) ( postfix_expression_sufix )*
                    {
                        adaptor.addChild(root_0, primary_expression);
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:532:83: ^( dotOp identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_dotOp.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:532:103: ( postfix_expression_sufix )*
                        while ( stream_postfix_expression_sufix.hasNext() ) {
                            adaptor.addChild(root_0, stream_postfix_expression_sufix.nextTree());

                        }
                        stream_postfix_expression_sufix.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:533:12: ( ptrOp identifier ) ( postfix_expression_sufix )*
                    {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:533:12: ( ptrOp identifier )
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:533:13: ptrOp identifier
                    {
                    pushFollow(FOLLOW_ptrOp_in_postfix_expression_opts2671);
                    ptrOp238=ptrOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ptrOp.add(ptrOp238.getTree());
                    pushFollow(FOLLOW_identifier_in_postfix_expression_opts2673);
                    identifier239=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier239.getTree());

                    }

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:533:31: ( postfix_expression_sufix )*
                    loop69:
                    do {
                        int alt69=2;
                        alt69 = dfa69.predict(input);
                        switch (alt69) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: postfix_expression_sufix
                    	    {
                    	    pushFollow(FOLLOW_postfix_expression_sufix_in_postfix_expression_opts2676);
                    	    postfix_expression_sufix240=postfix_expression_sufix();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_postfix_expression_sufix.add(postfix_expression_sufix240.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop69;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: identifier, ptrOp, postfix_expression_sufix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 533:57: -> ^( ptrOp identifier ) ( postfix_expression_sufix )*
                    {
                        adaptor.addChild(root_0, primary_expression);
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:533:82: ^( ptrOp identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_ptrOp.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:533:102: ( postfix_expression_sufix )*
                        while ( stream_postfix_expression_sufix.hasNext() ) {
                            adaptor.addChild(root_0, stream_postfix_expression_sufix.nextTree());

                        }
                        stream_postfix_expression_sufix.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:534:12: ( lbrack expression rbrack ) ( postfix_expression_sufix )*
                    {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:534:12: ( lbrack expression rbrack )
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:534:13: lbrack expression rbrack
                    {
                    pushFollow(FOLLOW_lbrack_in_postfix_expression_opts2709);
                    lbrack241=lbrack();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lbrack.add(lbrack241.getTree());
                    pushFollow(FOLLOW_expression_in_postfix_expression_opts2711);
                    expression242=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression242.getTree());
                    pushFollow(FOLLOW_rbrack_in_postfix_expression_opts2713);
                    rbrack243=rbrack();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rbrack.add(rbrack243.getTree());

                    }

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:534:39: ( postfix_expression_sufix )*
                    loop70:
                    do {
                        int alt70=2;
                        alt70 = dfa70.predict(input);
                        switch (alt70) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: postfix_expression_sufix
                    	    {
                    	    pushFollow(FOLLOW_postfix_expression_sufix_in_postfix_expression_opts2716);
                    	    postfix_expression_sufix244=postfix_expression_sufix();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_postfix_expression_sufix.add(postfix_expression_sufix244.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop70;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: rbrack, expression, lbrack, postfix_expression_sufix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 534:65: -> lbrack expression rbrack ( postfix_expression_sufix )*
                    {
                        adaptor.addChild(root_0, primary_expression);
                        adaptor.addChild(root_0, stream_lbrack.nextTree());
                        adaptor.addChild(root_0, stream_expression.nextTree());
                        adaptor.addChild(root_0, stream_rbrack.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:534:115: ( postfix_expression_sufix )*
                        while ( stream_postfix_expression_sufix.hasNext() ) {
                            adaptor.addChild(root_0, stream_postfix_expression_sufix.nextTree());

                        }
                        stream_postfix_expression_sufix.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, postfix_expression_opts_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "postfix_expression_opts"

    public static class postfix_expression_sufix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postfix_expression_sufix"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:538:1: postfix_expression_sufix : ( lbrack expression rbrack | lpar rpar | lpar argument_expression_list rpar | dotOp identifier | ptrOp identifier | incOp | decOp );
    public final CLangParser.postfix_expression_sufix_return postfix_expression_sufix() throws RecognitionException {
        CLangParser.postfix_expression_sufix_return retval = new CLangParser.postfix_expression_sufix_return();
        retval.start = input.LT(1);
        int postfix_expression_sufix_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.lbrack_return lbrack245 = null;

        CLangParser.expression_return expression246 = null;

        CLangParser.rbrack_return rbrack247 = null;

        CLangParser.lpar_return lpar248 = null;

        CLangParser.rpar_return rpar249 = null;

        CLangParser.lpar_return lpar250 = null;

        CLangParser.argument_expression_list_return argument_expression_list251 = null;

        CLangParser.rpar_return rpar252 = null;

        CLangParser.dotOp_return dotOp253 = null;

        CLangParser.identifier_return identifier254 = null;

        CLangParser.ptrOp_return ptrOp255 = null;

        CLangParser.identifier_return identifier256 = null;

        CLangParser.incOp_return incOp257 = null;

        CLangParser.decOp_return decOp258 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:539:3: ( lbrack expression rbrack | lpar rpar | lpar argument_expression_list rpar | dotOp identifier | ptrOp identifier | incOp | decOp )
            int alt72=7;
            alt72 = dfa72.predict(input);
            switch (alt72) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:539:8: lbrack expression rbrack
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lbrack_in_postfix_expression_sufix2758);
                    lbrack245=lbrack();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lbrack245.getTree());
                    pushFollow(FOLLOW_expression_in_postfix_expression_sufix2760);
                    expression246=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression246.getTree());
                    pushFollow(FOLLOW_rbrack_in_postfix_expression_sufix2762);
                    rbrack247=rbrack();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbrack247.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:540:13: lpar rpar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lpar_in_postfix_expression_sufix2776);
                    lpar248=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar248.getTree());
                    pushFollow(FOLLOW_rpar_in_postfix_expression_sufix2778);
                    rpar249=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar249.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:541:13: lpar argument_expression_list rpar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lpar_in_postfix_expression_sufix2792);
                    lpar250=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar250.getTree());
                    pushFollow(FOLLOW_argument_expression_list_in_postfix_expression_sufix2794);
                    argument_expression_list251=argument_expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_expression_list251.getTree());
                    pushFollow(FOLLOW_rpar_in_postfix_expression_sufix2796);
                    rpar252=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar252.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:542:13: dotOp identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dotOp_in_postfix_expression_sufix2810);
                    dotOp253=dotOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dotOp253.getTree());
                    pushFollow(FOLLOW_identifier_in_postfix_expression_sufix2812);
                    identifier254=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier254.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:543:13: ptrOp identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ptrOp_in_postfix_expression_sufix2826);
                    ptrOp255=ptrOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ptrOp255.getTree());
                    pushFollow(FOLLOW_identifier_in_postfix_expression_sufix2828);
                    identifier256=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier256.getTree());

                    }
                    break;
                case 6 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:544:13: incOp
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_incOp_in_postfix_expression_sufix2842);
                    incOp257=incOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, incOp257.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:545:13: decOp
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_decOp_in_postfix_expression_sufix2857);
                    decOp258=decOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decOp258.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, postfix_expression_sufix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "postfix_expression_sufix"

    public static class unary_operator_h_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_operator_h"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:548:1: unary_operator_h : unary_operator -> ^( OPERATOR unary_operator ) ;
    public final CLangParser.unary_operator_h_return unary_operator_h() throws RecognitionException {
        CLangParser.unary_operator_h_return retval = new CLangParser.unary_operator_h_return();
        retval.start = input.LT(1);
        int unary_operator_h_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.unary_operator_return unary_operator259 = null;


        RewriteRuleSubtreeStream stream_unary_operator=new RewriteRuleSubtreeStream(adaptor,"rule unary_operator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:549:2: ( unary_operator -> ^( OPERATOR unary_operator ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:549:4: unary_operator
            {
            pushFollow(FOLLOW_unary_operator_in_unary_operator_h2870);
            unary_operator259=unary_operator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unary_operator.add(unary_operator259.getTree());


            // AST REWRITE
            // elements: unary_operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 549:19: -> ^( OPERATOR unary_operator )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:549:22: ^( OPERATOR unary_operator )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_unary_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, unary_operator_h_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unary_operator_h"

    public static class unary_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_operator"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:552:1: unary_operator : ( '&' | '*' | '+' | '-' | '~' | '!' );
    public final CLangParser.unary_operator_return unary_operator() throws RecognitionException {
        CLangParser.unary_operator_return retval = new CLangParser.unary_operator_return();
        retval.start = input.LT(1);
        int unary_operator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set260=null;

        CommonTree set260_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:553:2: ( '&' | '*' | '+' | '-' | '~' | '!' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set260=(Token)input.LT(1);
            if ( input.LA(1)==101||(input.LA(1)>=103 && input.LA(1)<=104)||(input.LA(1)>=112 && input.LA(1)<=114) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set260));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, unary_operator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unary_operator"

    public static class primary_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary_expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:561:1: primary_expression : ( identifier | constant_h | type_specifier_h | lpar expression rpar );
    public final CLangParser.primary_expression_return primary_expression() throws RecognitionException {
        CLangParser.primary_expression_return retval = new CLangParser.primary_expression_return();
        retval.start = input.LT(1);
        int primary_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.identifier_return identifier261 = null;

        CLangParser.constant_h_return constant_h262 = null;

        CLangParser.type_specifier_h_return type_specifier_h263 = null;

        CLangParser.lpar_return lpar264 = null;

        CLangParser.expression_return expression265 = null;

        CLangParser.rpar_return rpar266 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:562:2: ( identifier | constant_h | type_specifier_h | lpar expression rpar )
            int alt73=4;
            alt73 = dfa73.predict(input);
            switch (alt73) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:562:4: identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_identifier_in_primary_expression2927);
                    identifier261=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier261.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:563:4: constant_h
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_h_in_primary_expression2932);
                    constant_h262=constant_h();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_h262.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:564:4: type_specifier_h
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_specifier_h_in_primary_expression2937);
                    type_specifier_h263=type_specifier_h();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_specifier_h263.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:565:4: lpar expression rpar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lpar_in_primary_expression2942);
                    lpar264=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar264.getTree());
                    pushFollow(FOLLOW_expression_in_primary_expression2944);
                    expression265=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression265.getTree());
                    pushFollow(FOLLOW_rpar_in_primary_expression2946);
                    rpar266=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar266.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, primary_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primary_expression"

    public static class constant_h_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant_h"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:568:1: constant_h : constant -> ^( CONST constant ) ;
    public final CLangParser.constant_h_return constant_h() throws RecognitionException {
        CLangParser.constant_h_return retval = new CLangParser.constant_h_return();
        retval.start = input.LT(1);
        int constant_h_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.constant_return constant267 = null;


        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:569:2: ( constant -> ^( CONST constant ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:569:4: constant
            {
            pushFollow(FOLLOW_constant_in_constant_h2957);
            constant267=constant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constant.add(constant267.getTree());


            // AST REWRITE
            // elements: constant
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 569:13: -> ^( CONST constant )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:569:16: ^( CONST constant )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONST, "CONST"), root_1);

                adaptor.addChild(root_1, stream_constant.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, constant_h_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constant_h"

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:576:1: constant : ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | FLOATING_POINT_LITERAL );
    public final CLangParser.constant_return constant() throws RecognitionException {
        CLangParser.constant_return retval = new CLangParser.constant_return();
        retval.start = input.LT(1);
        int constant_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set268=null;

        CommonTree set268_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:577:5: ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | FLOATING_POINT_LITERAL )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set268=(Token)input.LT(1);
            if ( (input.LA(1)>=HEX_LITERAL && input.LA(1)<=FLOATING_POINT_LITERAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set268));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, constant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constant"

    public static class decimal_lit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decimal_lit"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:595:1: decimal_lit : DECIMAL_LITERAL -> ^( CONST DECIMAL_LITERAL ) ;
    public final CLangParser.decimal_lit_return decimal_lit() throws RecognitionException {
        CLangParser.decimal_lit_return retval = new CLangParser.decimal_lit_return();
        retval.start = input.LT(1);
        int decimal_lit_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DECIMAL_LITERAL269=null;

        CommonTree DECIMAL_LITERAL269_tree=null;
        RewriteRuleTokenStream stream_DECIMAL_LITERAL=new RewriteRuleTokenStream(adaptor,"token DECIMAL_LITERAL");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:596:2: ( DECIMAL_LITERAL -> ^( CONST DECIMAL_LITERAL ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:596:4: DECIMAL_LITERAL
            {
            DECIMAL_LITERAL269=(Token)match(input,DECIMAL_LITERAL,FOLLOW_DECIMAL_LITERAL_in_decimal_lit3047); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECIMAL_LITERAL.add(DECIMAL_LITERAL269);



            // AST REWRITE
            // elements: DECIMAL_LITERAL
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 597:3: -> ^( CONST DECIMAL_LITERAL )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:597:6: ^( CONST DECIMAL_LITERAL )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONST, "CONST"), root_1);

                adaptor.addChild(root_1, stream_DECIMAL_LITERAL.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, decimal_lit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "decimal_lit"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:602:1: expression : assignment_expression ( comma assignment_expression )* ;
    public final CLangParser.expression_return expression() throws RecognitionException {
        CLangParser.expression_return retval = new CLangParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.assignment_expression_return assignment_expression270 = null;

        CLangParser.comma_return comma271 = null;

        CLangParser.assignment_expression_return assignment_expression272 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:603:2: ( assignment_expression ( comma assignment_expression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:603:4: assignment_expression ( comma assignment_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_assignment_expression_in_expression3072);
            assignment_expression270=assignment_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_expression270.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:603:26: ( comma assignment_expression )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==63) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:603:28: comma assignment_expression
            	    {
            	    pushFollow(FOLLOW_comma_in_expression3076);
            	    comma271=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma271.getTree());
            	    pushFollow(FOLLOW_assignment_expression_in_expression3078);
            	    assignment_expression272=assignment_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_expression272.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class constant_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant_expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:606:1: constant_expression : conditional_expression ;
    public final CLangParser.constant_expression_return constant_expression() throws RecognitionException {
        CLangParser.constant_expression_return retval = new CLangParser.constant_expression_return();
        retval.start = input.LT(1);
        int constant_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.conditional_expression_return conditional_expression273 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:607:2: ( conditional_expression )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:607:4: conditional_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conditional_expression_in_constant_expression3091);
            conditional_expression273=conditional_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditional_expression273.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, constant_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constant_expression"

    public static class assignment_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignment_expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:610:1: assignment_expression : ( lvalue assignment_operator assignment_expression -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignment_operator lvalue ^( VALUE assignment_expression ) ) ) | conditional_expression );
    public final CLangParser.assignment_expression_return assignment_expression() throws RecognitionException {
        CLangParser.assignment_expression_return retval = new CLangParser.assignment_expression_return();
        retval.start = input.LT(1);
        int assignment_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.lvalue_return lvalue274 = null;

        CLangParser.assignment_operator_return assignment_operator275 = null;

        CLangParser.assignment_expression_return assignment_expression276 = null;

        CLangParser.conditional_expression_return conditional_expression277 = null;


        RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
        RewriteRuleSubtreeStream stream_assignment_operator=new RewriteRuleSubtreeStream(adaptor,"rule assignment_operator");
        RewriteRuleSubtreeStream stream_assignment_expression=new RewriteRuleSubtreeStream(adaptor,"rule assignment_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:611:2: ( lvalue assignment_operator assignment_expression -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignment_operator lvalue ^( VALUE assignment_expression ) ) ) | conditional_expression )
            int alt75=2;
            alt75 = dfa75.predict(input);
            switch (alt75) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:611:4: lvalue assignment_operator assignment_expression
                    {
                    pushFollow(FOLLOW_lvalue_in_assignment_expression3102);
                    lvalue274=lvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lvalue.add(lvalue274.getTree());
                    pushFollow(FOLLOW_assignment_operator_in_assignment_expression3104);
                    assignment_operator275=assignment_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignment_operator.add(assignment_operator275.getTree());
                    pushFollow(FOLLOW_assignment_expression_in_assignment_expression3106);
                    assignment_expression276=assignment_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignment_expression.add(assignment_expression276.getTree());


                    // AST REWRITE
                    // elements: lvalue, assignment_operator, assignment_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 611:53: -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignment_operator lvalue ^( VALUE assignment_expression ) ) )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:611:56: ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignment_operator lvalue ^( VALUE assignment_expression ) ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGNMENT_STATEMENT, "ASSIGNMENT_STATEMENT"), root_1);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:611:80: ^( ASSIGN_OPERATOR assignment_operator lvalue ^( VALUE assignment_expression ) )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGN_OPERATOR, "ASSIGN_OPERATOR"), root_2);

                        adaptor.addChild(root_2, stream_assignment_operator.nextTree());
                        adaptor.addChild(root_2, stream_lvalue.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:611:128: ^( VALUE assignment_expression )
                        {
                        CommonTree root_3 = (CommonTree)adaptor.nil();
                        root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VALUE, "VALUE"), root_3);

                        adaptor.addChild(root_3, stream_assignment_expression.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:612:4: conditional_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_conditional_expression_in_assignment_expression3136);
                    conditional_expression277=conditional_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditional_expression277.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, assignment_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignment_expression"

    public static class lvalue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lvalue"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:615:1: lvalue : unary_expression ;
    public final CLangParser.lvalue_return lvalue() throws RecognitionException {
        CLangParser.lvalue_return retval = new CLangParser.lvalue_return();
        retval.start = input.LT(1);
        int lvalue_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.unary_expression_return unary_expression278 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:616:2: ( unary_expression )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:616:4: unary_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unary_expression_in_lvalue3147);
            unary_expression278=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression278.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, lvalue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lvalue"

    public static class assignment_operator_h_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignment_operator_h"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:619:1: assignment_operator_h : assignment_operator -> ^( ASSIGN_OPERATOR assignment_operator ) ;
    public final CLangParser.assignment_operator_h_return assignment_operator_h() throws RecognitionException {
        CLangParser.assignment_operator_h_return retval = new CLangParser.assignment_operator_h_return();
        retval.start = input.LT(1);
        int assignment_operator_h_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.assignment_operator_return assignment_operator279 = null;


        RewriteRuleSubtreeStream stream_assignment_operator=new RewriteRuleSubtreeStream(adaptor,"rule assignment_operator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:620:2: ( assignment_operator -> ^( ASSIGN_OPERATOR assignment_operator ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:620:4: assignment_operator
            {
            pushFollow(FOLLOW_assignment_operator_in_assignment_operator_h3158);
            assignment_operator279=assignment_operator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_assignment_operator.add(assignment_operator279.getTree());


            // AST REWRITE
            // elements: assignment_operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 620:24: -> ^( ASSIGN_OPERATOR assignment_operator )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:620:27: ^( ASSIGN_OPERATOR assignment_operator )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGN_OPERATOR, "ASSIGN_OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_assignment_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, assignment_operator_h_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignment_operator_h"

    public static class assignment_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignment_operator"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:623:1: assignment_operator : ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' );
    public final CLangParser.assignment_operator_return assignment_operator() throws RecognitionException {
        CLangParser.assignment_operator_return retval = new CLangParser.assignment_operator_return();
        retval.start = input.LT(1);
        int assignment_operator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set280=null;

        CommonTree set280_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:624:2: ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set280=(Token)input.LT(1);
            if ( input.LA(1)==62||(input.LA(1)>=115 && input.LA(1)<=124) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set280));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, assignment_operator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignment_operator"

    public static class conditional_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditional_expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:637:1: conditional_expression : logical_or_expression ( qMarkSep expression colon conditional_expression )? ;
    public final CLangParser.conditional_expression_return conditional_expression() throws RecognitionException {
        CLangParser.conditional_expression_return retval = new CLangParser.conditional_expression_return();
        retval.start = input.LT(1);
        int conditional_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.logical_or_expression_return logical_or_expression281 = null;

        CLangParser.qMarkSep_return qMarkSep282 = null;

        CLangParser.expression_return expression283 = null;

        CLangParser.colon_return colon284 = null;

        CLangParser.conditional_expression_return conditional_expression285 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:638:2: ( logical_or_expression ( qMarkSep expression colon conditional_expression )? )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:638:4: logical_or_expression ( qMarkSep expression colon conditional_expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_logical_or_expression_in_conditional_expression3241);
            logical_or_expression281=logical_or_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logical_or_expression281.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:638:26: ( qMarkSep expression colon conditional_expression )?
            int alt76=2;
            alt76 = dfa76.predict(input);
            switch (alt76) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:638:28: qMarkSep expression colon conditional_expression
                    {
                    pushFollow(FOLLOW_qMarkSep_in_conditional_expression3245);
                    qMarkSep282=qMarkSep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qMarkSep282.getTree());
                    pushFollow(FOLLOW_expression_in_conditional_expression3247);
                    expression283=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression283.getTree());
                    pushFollow(FOLLOW_colon_in_conditional_expression3249);
                    colon284=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon284.getTree());
                    pushFollow(FOLLOW_conditional_expression_in_conditional_expression3251);
                    conditional_expression285=conditional_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditional_expression285.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, conditional_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditional_expression"

    public static class qMarkSep_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qMarkSep"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:641:1: qMarkSep : '?' -> ^( OPERATOR '?' ) ;
    public final CLangParser.qMarkSep_return qMarkSep() throws RecognitionException {
        CLangParser.qMarkSep_return retval = new CLangParser.qMarkSep_return();
        retval.start = input.LT(1);
        int qMarkSep_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal286=null;

        CommonTree char_literal286_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:641:10: ( '?' -> ^( OPERATOR '?' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:641:12: '?'
            {
            char_literal286=(Token)match(input,125,FOLLOW_125_in_qMarkSep3263); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(char_literal286);



            // AST REWRITE
            // elements: 125
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 641:16: -> ^( OPERATOR '?' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:641:19: ^( OPERATOR '?' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_125.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, qMarkSep_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qMarkSep"

    public static class logOpOr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logOpOr"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:642:1: logOpOr : '||' -> ^( LOGICAL_OPERATOR '||' ) ;
    public final CLangParser.logOpOr_return logOpOr() throws RecognitionException {
        CLangParser.logOpOr_return retval = new CLangParser.logOpOr_return();
        retval.start = input.LT(1);
        int logOpOr_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal287=null;

        CommonTree string_literal287_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:642:10: ( '||' -> ^( LOGICAL_OPERATOR '||' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:642:12: '||'
            {
            string_literal287=(Token)match(input,126,FOLLOW_126_in_logOpOr3282); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(string_literal287);



            // AST REWRITE
            // elements: 126
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 642:17: -> ^( LOGICAL_OPERATOR '||' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:642:20: ^( LOGICAL_OPERATOR '||' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOGICAL_OPERATOR, "LOGICAL_OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_126.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, logOpOr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logOpOr"

    public static class logOpAnd_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logOpAnd"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:643:1: logOpAnd : '&&' -> ^( LOGICAL_OPERATOR '&&' ) ;
    public final CLangParser.logOpAnd_return logOpAnd() throws RecognitionException {
        CLangParser.logOpAnd_return retval = new CLangParser.logOpAnd_return();
        retval.start = input.LT(1);
        int logOpAnd_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal288=null;

        CommonTree string_literal288_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:643:10: ( '&&' -> ^( LOGICAL_OPERATOR '&&' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:643:12: '&&'
            {
            string_literal288=(Token)match(input,127,FOLLOW_127_in_logOpAnd3302); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(string_literal288);



            // AST REWRITE
            // elements: 127
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 643:17: -> ^( LOGICAL_OPERATOR '&&' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:643:20: ^( LOGICAL_OPERATOR '&&' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOGICAL_OPERATOR, "LOGICAL_OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_127.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, logOpAnd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logOpAnd"

    public static class orOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:644:1: orOp : '|' -> ^( OPERATOR '|' ) ;
    public final CLangParser.orOp_return orOp() throws RecognitionException {
        CLangParser.orOp_return retval = new CLangParser.orOp_return();
        retval.start = input.LT(1);
        int orOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal289=null;

        CommonTree char_literal289_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:644:7: ( '|' -> ^( OPERATOR '|' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:644:9: '|'
            {
            char_literal289=(Token)match(input,128,FOLLOW_128_in_orOp3323); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal289);



            // AST REWRITE
            // elements: 128
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 644:13: -> ^( OPERATOR '|' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:644:16: ^( OPERATOR '|' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_128.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, orOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "orOp"

    public static class andOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:645:1: andOp : '&' -> ^( OPERATOR '&' ) ;
    public final CLangParser.andOp_return andOp() throws RecognitionException {
        CLangParser.andOp_return retval = new CLangParser.andOp_return();
        retval.start = input.LT(1);
        int andOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal290=null;

        CommonTree char_literal290_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:645:8: ( '&' -> ^( OPERATOR '&' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:645:10: '&'
            {
            char_literal290=(Token)match(input,112,FOLLOW_112_in_andOp3342); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_112.add(char_literal290);



            // AST REWRITE
            // elements: 112
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 645:14: -> ^( OPERATOR '&' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:645:17: ^( OPERATOR '&' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_112.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, andOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andOp"

    public static class xorOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xorOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:646:1: xorOp : '^' -> ^( OPERATOR '^' ) ;
    public final CLangParser.xorOp_return xorOp() throws RecognitionException {
        CLangParser.xorOp_return retval = new CLangParser.xorOp_return();
        retval.start = input.LT(1);
        int xorOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal291=null;

        CommonTree char_literal291_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:646:8: ( '^' -> ^( OPERATOR '^' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:646:10: '^'
            {
            char_literal291=(Token)match(input,129,FOLLOW_129_in_xorOp3361); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(char_literal291);



            // AST REWRITE
            // elements: 129
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 646:14: -> ^( OPERATOR '^' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:646:17: ^( OPERATOR '^' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_129.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, xorOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xorOp"

    public static class eqOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eqOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:647:1: eqOp : '==' -> ^( COMPARISON_OPERATOR '==' ) ;
    public final CLangParser.eqOp_return eqOp() throws RecognitionException {
        CLangParser.eqOp_return retval = new CLangParser.eqOp_return();
        retval.start = input.LT(1);
        int eqOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal292=null;

        CommonTree string_literal292_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:647:7: ( '==' -> ^( COMPARISON_OPERATOR '==' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:647:9: '=='
            {
            string_literal292=(Token)match(input,130,FOLLOW_130_in_eqOp3380); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(string_literal292);



            // AST REWRITE
            // elements: 130
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 647:14: -> ^( COMPARISON_OPERATOR '==' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:647:17: ^( COMPARISON_OPERATOR '==' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARISON_OPERATOR, "COMPARISON_OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_130.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, eqOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "eqOp"

    public static class neOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:648:1: neOp : '!=' -> ^( COMPARISON_OPERATOR '!=' ) ;
    public final CLangParser.neOp_return neOp() throws RecognitionException {
        CLangParser.neOp_return retval = new CLangParser.neOp_return();
        retval.start = input.LT(1);
        int neOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal293=null;

        CommonTree string_literal293_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:648:7: ( '!=' -> ^( COMPARISON_OPERATOR '!=' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:648:9: '!='
            {
            string_literal293=(Token)match(input,131,FOLLOW_131_in_neOp3399); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(string_literal293);



            // AST REWRITE
            // elements: 131
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 648:14: -> ^( COMPARISON_OPERATOR '!=' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:648:17: ^( COMPARISON_OPERATOR '!=' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARISON_OPERATOR, "COMPARISON_OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_131.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, neOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "neOp"

    public static class lssOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lssOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:649:1: lssOp : '<' -> ^( COMPARISON_OPERATOR '<' ) ;
    public final CLangParser.lssOp_return lssOp() throws RecognitionException {
        CLangParser.lssOp_return retval = new CLangParser.lssOp_return();
        retval.start = input.LT(1);
        int lssOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal294=null;

        CommonTree char_literal294_tree=null;
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:649:8: ( '<' -> ^( COMPARISON_OPERATOR '<' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:649:10: '<'
            {
            char_literal294=(Token)match(input,132,FOLLOW_132_in_lssOp3418); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_132.add(char_literal294);



            // AST REWRITE
            // elements: 132
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 649:14: -> ^( COMPARISON_OPERATOR '<' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:649:17: ^( COMPARISON_OPERATOR '<' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARISON_OPERATOR, "COMPARISON_OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_132.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, lssOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lssOp"

    public static class gtrOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "gtrOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:650:1: gtrOp : '>' -> ^( COMPARISON_OPERATOR '>' ) ;
    public final CLangParser.gtrOp_return gtrOp() throws RecognitionException {
        CLangParser.gtrOp_return retval = new CLangParser.gtrOp_return();
        retval.start = input.LT(1);
        int gtrOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal295=null;

        CommonTree char_literal295_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:650:8: ( '>' -> ^( COMPARISON_OPERATOR '>' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:650:10: '>'
            {
            char_literal295=(Token)match(input,133,FOLLOW_133_in_gtrOp3437); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal295);



            // AST REWRITE
            // elements: 133
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 650:14: -> ^( COMPARISON_OPERATOR '>' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:650:17: ^( COMPARISON_OPERATOR '>' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARISON_OPERATOR, "COMPARISON_OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_133.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, gtrOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "gtrOp"

    public static class leqOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "leqOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:651:1: leqOp : '<=' -> ^( COMPARISON_OPERATOR '<=' ) ;
    public final CLangParser.leqOp_return leqOp() throws RecognitionException {
        CLangParser.leqOp_return retval = new CLangParser.leqOp_return();
        retval.start = input.LT(1);
        int leqOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal296=null;

        CommonTree string_literal296_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:651:8: ( '<=' -> ^( COMPARISON_OPERATOR '<=' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:651:10: '<='
            {
            string_literal296=(Token)match(input,134,FOLLOW_134_in_leqOp3456); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(string_literal296);



            // AST REWRITE
            // elements: 134
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 651:15: -> ^( COMPARISON_OPERATOR '<=' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:651:18: ^( COMPARISON_OPERATOR '<=' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARISON_OPERATOR, "COMPARISON_OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_134.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, leqOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "leqOp"

    public static class geqOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "geqOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:652:1: geqOp : '>=' -> ^( COMPARISON_OPERATOR '>=' ) ;
    public final CLangParser.geqOp_return geqOp() throws RecognitionException {
        CLangParser.geqOp_return retval = new CLangParser.geqOp_return();
        retval.start = input.LT(1);
        int geqOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal297=null;

        CommonTree string_literal297_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:652:8: ( '>=' -> ^( COMPARISON_OPERATOR '>=' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:652:10: '>='
            {
            string_literal297=(Token)match(input,135,FOLLOW_135_in_geqOp3475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(string_literal297);



            // AST REWRITE
            // elements: 135
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 652:15: -> ^( COMPARISON_OPERATOR '>=' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:652:18: ^( COMPARISON_OPERATOR '>=' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARISON_OPERATOR, "COMPARISON_OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_135.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, geqOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "geqOp"

    public static class shlOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shlOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:653:1: shlOp : '<<' -> ^( OPERATOR '<<' ) ;
    public final CLangParser.shlOp_return shlOp() throws RecognitionException {
        CLangParser.shlOp_return retval = new CLangParser.shlOp_return();
        retval.start = input.LT(1);
        int shlOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal298=null;

        CommonTree string_literal298_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:653:8: ( '<<' -> ^( OPERATOR '<<' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:653:10: '<<'
            {
            string_literal298=(Token)match(input,136,FOLLOW_136_in_shlOp3494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(string_literal298);



            // AST REWRITE
            // elements: 136
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 653:15: -> ^( OPERATOR '<<' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:653:18: ^( OPERATOR '<<' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_136.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, shlOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shlOp"

    public static class shrOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shrOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:654:1: shrOp : '>>' -> ^( OPERATOR '>>' ) ;
    public final CLangParser.shrOp_return shrOp() throws RecognitionException {
        CLangParser.shrOp_return retval = new CLangParser.shrOp_return();
        retval.start = input.LT(1);
        int shrOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal299=null;

        CommonTree string_literal299_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:654:8: ( '>>' -> ^( OPERATOR '>>' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:654:10: '>>'
            {
            string_literal299=(Token)match(input,137,FOLLOW_137_in_shrOp3513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(string_literal299);



            // AST REWRITE
            // elements: 137
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 654:15: -> ^( OPERATOR '>>' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:654:18: ^( OPERATOR '>>' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_137.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, shrOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shrOp"

    public static class relational_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relational_op"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:656:1: relational_op : ( lssOp | gtrOp | leqOp | geqOp );
    public final CLangParser.relational_op_return relational_op() throws RecognitionException {
        CLangParser.relational_op_return retval = new CLangParser.relational_op_return();
        retval.start = input.LT(1);
        int relational_op_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.lssOp_return lssOp300 = null;

        CLangParser.gtrOp_return gtrOp301 = null;

        CLangParser.leqOp_return leqOp302 = null;

        CLangParser.geqOp_return geqOp303 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:657:3: ( lssOp | gtrOp | leqOp | geqOp )
            int alt77=4;
            switch ( input.LA(1) ) {
            case 132:
                {
                alt77=1;
                }
                break;
            case 133:
                {
                alt77=2;
                }
                break;
            case 134:
                {
                alt77=3;
                }
                break;
            case 135:
                {
                alt77=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }

            switch (alt77) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:657:5: lssOp
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lssOp_in_relational_op3534);
                    lssOp300=lssOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lssOp300.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:657:13: gtrOp
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_gtrOp_in_relational_op3538);
                    gtrOp301=gtrOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gtrOp301.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:657:21: leqOp
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_leqOp_in_relational_op3542);
                    leqOp302=leqOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, leqOp302.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:657:29: geqOp
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_geqOp_in_relational_op3546);
                    geqOp303=geqOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, geqOp303.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, relational_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relational_op"

    public static class equality_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equality_op"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:660:1: equality_op : ( eqOp | neOp );
    public final CLangParser.equality_op_return equality_op() throws RecognitionException {
        CLangParser.equality_op_return retval = new CLangParser.equality_op_return();
        retval.start = input.LT(1);
        int equality_op_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.eqOp_return eqOp304 = null;

        CLangParser.neOp_return neOp305 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:661:3: ( eqOp | neOp )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==130) ) {
                alt78=1;
            }
            else if ( (LA78_0==131) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:661:5: eqOp
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eqOp_in_equality_op3562);
                    eqOp304=eqOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eqOp304.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:661:12: neOp
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_neOp_in_equality_op3566);
                    neOp305=neOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neOp305.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, equality_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equality_op"

    public static class logical_or_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logical_or_expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:665:1: logical_or_expression : logical_and_expression ( logOpOr logical_and_expression )* ;
    public final CLangParser.logical_or_expression_return logical_or_expression() throws RecognitionException {
        CLangParser.logical_or_expression_return retval = new CLangParser.logical_or_expression_return();
        retval.start = input.LT(1);
        int logical_or_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.logical_and_expression_return logical_and_expression306 = null;

        CLangParser.logOpOr_return logOpOr307 = null;

        CLangParser.logical_and_expression_return logical_and_expression308 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:666:2: ( logical_and_expression ( logOpOr logical_and_expression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:666:4: logical_and_expression ( logOpOr logical_and_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_logical_and_expression_in_logical_or_expression3580);
            logical_and_expression306=logical_and_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logical_and_expression306.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:666:27: ( logOpOr logical_and_expression )*
            loop79:
            do {
                int alt79=2;
                alt79 = dfa79.predict(input);
                switch (alt79) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:666:29: logOpOr logical_and_expression
            	    {
            	    pushFollow(FOLLOW_logOpOr_in_logical_or_expression3584);
            	    logOpOr307=logOpOr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(logOpOr307.getTree(), root_0);
            	    pushFollow(FOLLOW_logical_and_expression_in_logical_or_expression3587);
            	    logical_and_expression308=logical_and_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, logical_and_expression308.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, logical_or_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logical_or_expression"

    public static class logical_and_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logical_and_expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:669:1: logical_and_expression : inclusive_or_expression ( logOpAnd inclusive_or_expression )* ;
    public final CLangParser.logical_and_expression_return logical_and_expression() throws RecognitionException {
        CLangParser.logical_and_expression_return retval = new CLangParser.logical_and_expression_return();
        retval.start = input.LT(1);
        int logical_and_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.inclusive_or_expression_return inclusive_or_expression309 = null;

        CLangParser.logOpAnd_return logOpAnd310 = null;

        CLangParser.inclusive_or_expression_return inclusive_or_expression311 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:670:2: ( inclusive_or_expression ( logOpAnd inclusive_or_expression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:670:4: inclusive_or_expression ( logOpAnd inclusive_or_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_inclusive_or_expression_in_logical_and_expression3601);
            inclusive_or_expression309=inclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusive_or_expression309.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:670:28: ( logOpAnd inclusive_or_expression )*
            loop80:
            do {
                int alt80=2;
                alt80 = dfa80.predict(input);
                switch (alt80) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:670:30: logOpAnd inclusive_or_expression
            	    {
            	    pushFollow(FOLLOW_logOpAnd_in_logical_and_expression3605);
            	    logOpAnd310=logOpAnd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(logOpAnd310.getTree(), root_0);
            	    pushFollow(FOLLOW_inclusive_or_expression_in_logical_and_expression3608);
            	    inclusive_or_expression311=inclusive_or_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusive_or_expression311.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, logical_and_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logical_and_expression"

    public static class inclusive_or_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusive_or_expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:673:1: inclusive_or_expression : exclusive_or_expression ( orOp exclusive_or_expression )* ;
    public final CLangParser.inclusive_or_expression_return inclusive_or_expression() throws RecognitionException {
        CLangParser.inclusive_or_expression_return retval = new CLangParser.inclusive_or_expression_return();
        retval.start = input.LT(1);
        int inclusive_or_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.exclusive_or_expression_return exclusive_or_expression312 = null;

        CLangParser.orOp_return orOp313 = null;

        CLangParser.exclusive_or_expression_return exclusive_or_expression314 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:674:2: ( exclusive_or_expression ( orOp exclusive_or_expression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:674:4: exclusive_or_expression ( orOp exclusive_or_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression3622);
            exclusive_or_expression312=exclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusive_or_expression312.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:674:28: ( orOp exclusive_or_expression )*
            loop81:
            do {
                int alt81=2;
                alt81 = dfa81.predict(input);
                switch (alt81) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:674:30: orOp exclusive_or_expression
            	    {
            	    pushFollow(FOLLOW_orOp_in_inclusive_or_expression3626);
            	    orOp313=orOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(orOp313.getTree(), root_0);
            	    pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression3629);
            	    exclusive_or_expression314=exclusive_or_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusive_or_expression314.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, inclusive_or_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusive_or_expression"

    public static class exclusive_or_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusive_or_expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:677:1: exclusive_or_expression : and_expression ( xorOp and_expression )* ;
    public final CLangParser.exclusive_or_expression_return exclusive_or_expression() throws RecognitionException {
        CLangParser.exclusive_or_expression_return retval = new CLangParser.exclusive_or_expression_return();
        retval.start = input.LT(1);
        int exclusive_or_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.and_expression_return and_expression315 = null;

        CLangParser.xorOp_return xorOp316 = null;

        CLangParser.and_expression_return and_expression317 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:678:2: ( and_expression ( xorOp and_expression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:678:4: and_expression ( xorOp and_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_and_expression_in_exclusive_or_expression3643);
            and_expression315=and_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_expression315.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:678:19: ( xorOp and_expression )*
            loop82:
            do {
                int alt82=2;
                alt82 = dfa82.predict(input);
                switch (alt82) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:678:21: xorOp and_expression
            	    {
            	    pushFollow(FOLLOW_xorOp_in_exclusive_or_expression3647);
            	    xorOp316=xorOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(xorOp316.getTree(), root_0);
            	    pushFollow(FOLLOW_and_expression_in_exclusive_or_expression3650);
            	    and_expression317=and_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_expression317.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, exclusive_or_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusive_or_expression"

    public static class and_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:681:1: and_expression : equality_expression ( andOp equality_expression )* ;
    public final CLangParser.and_expression_return and_expression() throws RecognitionException {
        CLangParser.and_expression_return retval = new CLangParser.and_expression_return();
        retval.start = input.LT(1);
        int and_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.equality_expression_return equality_expression318 = null;

        CLangParser.andOp_return andOp319 = null;

        CLangParser.equality_expression_return equality_expression320 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:682:2: ( equality_expression ( andOp equality_expression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:682:4: equality_expression ( andOp equality_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_equality_expression_in_and_expression3664);
            equality_expression318=equality_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equality_expression318.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:682:24: ( andOp equality_expression )*
            loop83:
            do {
                int alt83=2;
                alt83 = dfa83.predict(input);
                switch (alt83) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:682:26: andOp equality_expression
            	    {
            	    pushFollow(FOLLOW_andOp_in_and_expression3668);
            	    andOp319=andOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(andOp319.getTree(), root_0);
            	    pushFollow(FOLLOW_equality_expression_in_and_expression3671);
            	    equality_expression320=equality_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equality_expression320.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, and_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "and_expression"

    public static class equality_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equality_expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:685:1: equality_expression : relational_expression ( equality_op relational_expression )* ;
    public final CLangParser.equality_expression_return equality_expression() throws RecognitionException {
        CLangParser.equality_expression_return retval = new CLangParser.equality_expression_return();
        retval.start = input.LT(1);
        int equality_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.relational_expression_return relational_expression321 = null;

        CLangParser.equality_op_return equality_op322 = null;

        CLangParser.relational_expression_return relational_expression323 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:686:2: ( relational_expression ( equality_op relational_expression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:686:4: relational_expression ( equality_op relational_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_relational_expression_in_equality_expression3686);
            relational_expression321=relational_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_expression321.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:686:26: ( equality_op relational_expression )*
            loop84:
            do {
                int alt84=2;
                alt84 = dfa84.predict(input);
                switch (alt84) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:686:28: equality_op relational_expression
            	    {
            	    pushFollow(FOLLOW_equality_op_in_equality_expression3690);
            	    equality_op322=equality_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(equality_op322.getTree(), root_0);
            	    pushFollow(FOLLOW_relational_expression_in_equality_expression3693);
            	    relational_expression323=relational_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_expression323.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, equality_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equality_expression"

    public static class relational_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relational_expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:689:1: relational_expression : shift_expression ( relational_op shift_expression )* ;
    public final CLangParser.relational_expression_return relational_expression() throws RecognitionException {
        CLangParser.relational_expression_return retval = new CLangParser.relational_expression_return();
        retval.start = input.LT(1);
        int relational_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.shift_expression_return shift_expression324 = null;

        CLangParser.relational_op_return relational_op325 = null;

        CLangParser.shift_expression_return shift_expression326 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:690:2: ( shift_expression ( relational_op shift_expression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:690:4: shift_expression ( relational_op shift_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_shift_expression_in_relational_expression3708);
            shift_expression324=shift_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shift_expression324.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:690:21: ( relational_op shift_expression )*
            loop85:
            do {
                int alt85=2;
                alt85 = dfa85.predict(input);
                switch (alt85) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:690:23: relational_op shift_expression
            	    {
            	    pushFollow(FOLLOW_relational_op_in_relational_expression3712);
            	    relational_op325=relational_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(relational_op325.getTree(), root_0);
            	    pushFollow(FOLLOW_shift_expression_in_relational_expression3715);
            	    shift_expression326=shift_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shift_expression326.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, relational_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relational_expression"

    public static class shift_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shift_expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:693:1: shift_expression : additive_expression ( ( shlOp | shrOp ) additive_expression )* ;
    public final CLangParser.shift_expression_return shift_expression() throws RecognitionException {
        CLangParser.shift_expression_return retval = new CLangParser.shift_expression_return();
        retval.start = input.LT(1);
        int shift_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.additive_expression_return additive_expression327 = null;

        CLangParser.shlOp_return shlOp328 = null;

        CLangParser.shrOp_return shrOp329 = null;

        CLangParser.additive_expression_return additive_expression330 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:694:2: ( additive_expression ( ( shlOp | shrOp ) additive_expression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:694:4: additive_expression ( ( shlOp | shrOp ) additive_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_additive_expression_in_shift_expression3729);
            additive_expression327=additive_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additive_expression327.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:694:24: ( ( shlOp | shrOp ) additive_expression )*
            loop87:
            do {
                int alt87=2;
                alt87 = dfa87.predict(input);
                switch (alt87) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:694:26: ( shlOp | shrOp ) additive_expression
            	    {
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:694:26: ( shlOp | shrOp )
            	    int alt86=2;
            	    int LA86_0 = input.LA(1);

            	    if ( (LA86_0==136) ) {
            	        alt86=1;
            	    }
            	    else if ( (LA86_0==137) ) {
            	        alt86=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 86, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt86) {
            	        case 1 :
            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:694:28: shlOp
            	            {
            	            pushFollow(FOLLOW_shlOp_in_shift_expression3735);
            	            shlOp328=shlOp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, shlOp328.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:694:36: shrOp
            	            {
            	            pushFollow(FOLLOW_shrOp_in_shift_expression3739);
            	            shrOp329=shrOp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, shrOp329.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_additive_expression_in_shift_expression3744);
            	    additive_expression330=additive_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additive_expression330.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, shift_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shift_expression"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:699:1: statement : ( labeled_statement | compound_statement | expression_statement | selection_statement -> ^( BRANCH_STATEMENT selection_statement ) | iteration_statement -> ^( LOOP_STATEMENT iteration_statement ) | jump_statement -> ^( JUMP_STATEMENT jump_statement ) | asm_statement );
    public final CLangParser.statement_return statement() throws RecognitionException {
        CLangParser.statement_return retval = new CLangParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.labeled_statement_return labeled_statement331 = null;

        CLangParser.compound_statement_return compound_statement332 = null;

        CLangParser.expression_statement_return expression_statement333 = null;

        CLangParser.selection_statement_return selection_statement334 = null;

        CLangParser.iteration_statement_return iteration_statement335 = null;

        CLangParser.jump_statement_return jump_statement336 = null;

        CLangParser.asm_statement_return asm_statement337 = null;


        RewriteRuleSubtreeStream stream_selection_statement=new RewriteRuleSubtreeStream(adaptor,"rule selection_statement");
        RewriteRuleSubtreeStream stream_iteration_statement=new RewriteRuleSubtreeStream(adaptor,"rule iteration_statement");
        RewriteRuleSubtreeStream stream_jump_statement=new RewriteRuleSubtreeStream(adaptor,"rule jump_statement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:700:2: ( labeled_statement | compound_statement | expression_statement | selection_statement -> ^( BRANCH_STATEMENT selection_statement ) | iteration_statement -> ^( LOOP_STATEMENT iteration_statement ) | jump_statement -> ^( JUMP_STATEMENT jump_statement ) | asm_statement )
            int alt88=7;
            alt88 = dfa88.predict(input);
            switch (alt88) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:700:4: labeled_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_labeled_statement_in_statement3760);
                    labeled_statement331=labeled_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, labeled_statement331.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:701:4: compound_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_compound_statement_in_statement3765);
                    compound_statement332=compound_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_statement332.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:702:4: expression_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_statement_in_statement3770);
                    expression_statement333=expression_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_statement333.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:703:4: selection_statement
                    {
                    pushFollow(FOLLOW_selection_statement_in_statement3775);
                    selection_statement334=selection_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selection_statement.add(selection_statement334.getTree());


                    // AST REWRITE
                    // elements: selection_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 703:25: -> ^( BRANCH_STATEMENT selection_statement )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:703:28: ^( BRANCH_STATEMENT selection_statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH_STATEMENT, "BRANCH_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_selection_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:704:4: iteration_statement
                    {
                    pushFollow(FOLLOW_iteration_statement_in_statement3791);
                    iteration_statement335=iteration_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_iteration_statement.add(iteration_statement335.getTree());


                    // AST REWRITE
                    // elements: iteration_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 704:25: -> ^( LOOP_STATEMENT iteration_statement )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:704:28: ^( LOOP_STATEMENT iteration_statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOOP_STATEMENT, "LOOP_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_iteration_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:705:4: jump_statement
                    {
                    pushFollow(FOLLOW_jump_statement_in_statement3807);
                    jump_statement336=jump_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_jump_statement.add(jump_statement336.getTree());


                    // AST REWRITE
                    // elements: jump_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 705:22: -> ^( JUMP_STATEMENT jump_statement )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:705:25: ^( JUMP_STATEMENT jump_statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JUMP_STATEMENT, "JUMP_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_jump_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:706:4: asm_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_asm_statement_in_statement3825);
                    asm_statement337=asm_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asm_statement337.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class string_lit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "string_lit"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:709:1: string_lit : STRING_LITERAL -> ^( CONST STRING_LITERAL ) ;
    public final CLangParser.string_lit_return string_lit() throws RecognitionException {
        CLangParser.string_lit_return retval = new CLangParser.string_lit_return();
        retval.start = input.LT(1);
        int string_lit_StartIndex = input.index();
        CommonTree root_0 = null;

        Token STRING_LITERAL338=null;

        CommonTree STRING_LITERAL338_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:710:2: ( STRING_LITERAL -> ^( CONST STRING_LITERAL ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:710:4: STRING_LITERAL
            {
            STRING_LITERAL338=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_string_lit3836); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(STRING_LITERAL338);



            // AST REWRITE
            // elements: STRING_LITERAL
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 711:3: -> ^( CONST STRING_LITERAL )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:711:6: ^( CONST STRING_LITERAL )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONST, "CONST"), root_1);

                adaptor.addChild(root_1, stream_STRING_LITERAL.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, string_lit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "string_lit"

    public static class asm_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asm_statement"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:714:1: asm_statement : ( asm_or_cv )+ lpar string_lit ( asm_output_operands )? ( asm_input_operands )? ( asm_clobbered_registers )? rpar ;
    public final CLangParser.asm_statement_return asm_statement() throws RecognitionException {
        CLangParser.asm_statement_return retval = new CLangParser.asm_statement_return();
        retval.start = input.LT(1);
        int asm_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.asm_or_cv_return asm_or_cv339 = null;

        CLangParser.lpar_return lpar340 = null;

        CLangParser.string_lit_return string_lit341 = null;

        CLangParser.asm_output_operands_return asm_output_operands342 = null;

        CLangParser.asm_input_operands_return asm_input_operands343 = null;

        CLangParser.asm_clobbered_registers_return asm_clobbered_registers344 = null;

        CLangParser.rpar_return rpar345 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:715:2: ( ( asm_or_cv )+ lpar string_lit ( asm_output_operands )? ( asm_input_operands )? ( asm_clobbered_registers )? rpar )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:715:4: ( asm_or_cv )+ lpar string_lit ( asm_output_operands )? ( asm_input_operands )? ( asm_clobbered_registers )? rpar
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:715:4: ( asm_or_cv )+
            int cnt89=0;
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( ((LA89_0>=97 && LA89_0<=98)||(LA89_0>=138 && LA89_0<=147)) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: asm_or_cv
            	    {
            	    pushFollow(FOLLOW_asm_or_cv_in_asm_statement3859);
            	    asm_or_cv339=asm_or_cv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, asm_or_cv339.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt89 >= 1 ) break loop89;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(89, input);
                        throw eee;
                }
                cnt89++;
            } while (true);

            pushFollow(FOLLOW_lpar_in_asm_statement3862);
            lpar340=lpar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar340.getTree());
            pushFollow(FOLLOW_string_lit_in_asm_statement3864);
            string_lit341=string_lit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, string_lit341.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:715:31: ( asm_output_operands )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==64) ) {
                int LA90_1 = input.LA(2);

                if ( (synpred177_CLang()) ) {
                    alt90=1;
                }
            }
            switch (alt90) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: asm_output_operands
                    {
                    pushFollow(FOLLOW_asm_output_operands_in_asm_statement3866);
                    asm_output_operands342=asm_output_operands();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asm_output_operands342.getTree());

                    }
                    break;

            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:715:52: ( asm_input_operands )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==64) ) {
                int LA91_1 = input.LA(2);

                if ( (synpred178_CLang()) ) {
                    alt91=1;
                }
            }
            switch (alt91) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: asm_input_operands
                    {
                    pushFollow(FOLLOW_asm_input_operands_in_asm_statement3869);
                    asm_input_operands343=asm_input_operands();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asm_input_operands343.getTree());

                    }
                    break;

            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:715:72: ( asm_clobbered_registers )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==64) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: asm_clobbered_registers
                    {
                    pushFollow(FOLLOW_asm_clobbered_registers_in_asm_statement3872);
                    asm_clobbered_registers344=asm_clobbered_registers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asm_clobbered_registers344.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rpar_in_asm_statement3875);
            rpar345=rpar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar345.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, asm_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "asm_statement"

    public static class asm_output_operands_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asm_output_operands"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:718:1: asm_output_operands : colon ( asm_operand ( comma asm_operand )* )? ;
    public final CLangParser.asm_output_operands_return asm_output_operands() throws RecognitionException {
        CLangParser.asm_output_operands_return retval = new CLangParser.asm_output_operands_return();
        retval.start = input.LT(1);
        int asm_output_operands_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.colon_return colon346 = null;

        CLangParser.asm_operand_return asm_operand347 = null;

        CLangParser.comma_return comma348 = null;

        CLangParser.asm_operand_return asm_operand349 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:719:2: ( colon ( asm_operand ( comma asm_operand )* )? )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:719:4: colon ( asm_operand ( comma asm_operand )* )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_colon_in_asm_output_operands3886);
            colon346=colon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon346.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:719:10: ( asm_operand ( comma asm_operand )* )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==STRING_LITERAL) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:719:12: asm_operand ( comma asm_operand )*
                    {
                    pushFollow(FOLLOW_asm_operand_in_asm_output_operands3890);
                    asm_operand347=asm_operand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asm_operand347.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:719:24: ( comma asm_operand )*
                    loop93:
                    do {
                        int alt93=2;
                        int LA93_0 = input.LA(1);

                        if ( (LA93_0==63) ) {
                            alt93=1;
                        }


                        switch (alt93) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:719:26: comma asm_operand
                    	    {
                    	    pushFollow(FOLLOW_comma_in_asm_output_operands3894);
                    	    comma348=comma();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma348.getTree());
                    	    pushFollow(FOLLOW_asm_operand_in_asm_output_operands3896);
                    	    asm_operand349=asm_operand();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, asm_operand349.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop93;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, asm_output_operands_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "asm_output_operands"

    public static class asm_input_operands_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asm_input_operands"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:722:1: asm_input_operands : colon ( asm_operand ( comma asm_operand )* )? ;
    public final CLangParser.asm_input_operands_return asm_input_operands() throws RecognitionException {
        CLangParser.asm_input_operands_return retval = new CLangParser.asm_input_operands_return();
        retval.start = input.LT(1);
        int asm_input_operands_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.colon_return colon350 = null;

        CLangParser.asm_operand_return asm_operand351 = null;

        CLangParser.comma_return comma352 = null;

        CLangParser.asm_operand_return asm_operand353 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:723:2: ( colon ( asm_operand ( comma asm_operand )* )? )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:723:4: colon ( asm_operand ( comma asm_operand )* )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_colon_in_asm_input_operands3913);
            colon350=colon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon350.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:723:10: ( asm_operand ( comma asm_operand )* )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==STRING_LITERAL) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:723:12: asm_operand ( comma asm_operand )*
                    {
                    pushFollow(FOLLOW_asm_operand_in_asm_input_operands3917);
                    asm_operand351=asm_operand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asm_operand351.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:723:24: ( comma asm_operand )*
                    loop95:
                    do {
                        int alt95=2;
                        int LA95_0 = input.LA(1);

                        if ( (LA95_0==63) ) {
                            alt95=1;
                        }


                        switch (alt95) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:723:26: comma asm_operand
                    	    {
                    	    pushFollow(FOLLOW_comma_in_asm_input_operands3921);
                    	    comma352=comma();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma352.getTree());
                    	    pushFollow(FOLLOW_asm_operand_in_asm_input_operands3923);
                    	    asm_operand353=asm_operand();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, asm_operand353.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop95;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, asm_input_operands_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "asm_input_operands"

    public static class asm_operand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asm_operand"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:726:1: asm_operand : string_lit lpar expression rpar ;
    public final CLangParser.asm_operand_return asm_operand() throws RecognitionException {
        CLangParser.asm_operand_return retval = new CLangParser.asm_operand_return();
        retval.start = input.LT(1);
        int asm_operand_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.string_lit_return string_lit354 = null;

        CLangParser.lpar_return lpar355 = null;

        CLangParser.expression_return expression356 = null;

        CLangParser.rpar_return rpar357 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:727:2: ( string_lit lpar expression rpar )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:727:4: string_lit lpar expression rpar
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_string_lit_in_asm_operand3940);
            string_lit354=string_lit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, string_lit354.getTree());
            pushFollow(FOLLOW_lpar_in_asm_operand3942);
            lpar355=lpar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar355.getTree());
            pushFollow(FOLLOW_expression_in_asm_operand3944);
            expression356=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression356.getTree());
            pushFollow(FOLLOW_rpar_in_asm_operand3946);
            rpar357=rpar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar357.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, asm_operand_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "asm_operand"

    public static class asm_clobbered_registers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asm_clobbered_registers"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:730:1: asm_clobbered_registers : colon ( string_lit ( comma string_lit )* )? ;
    public final CLangParser.asm_clobbered_registers_return asm_clobbered_registers() throws RecognitionException {
        CLangParser.asm_clobbered_registers_return retval = new CLangParser.asm_clobbered_registers_return();
        retval.start = input.LT(1);
        int asm_clobbered_registers_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.colon_return colon358 = null;

        CLangParser.string_lit_return string_lit359 = null;

        CLangParser.comma_return comma360 = null;

        CLangParser.string_lit_return string_lit361 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:731:2: ( colon ( string_lit ( comma string_lit )* )? )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:731:4: colon ( string_lit ( comma string_lit )* )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_colon_in_asm_clobbered_registers3957);
            colon358=colon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon358.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:731:10: ( string_lit ( comma string_lit )* )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==STRING_LITERAL) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:731:12: string_lit ( comma string_lit )*
                    {
                    pushFollow(FOLLOW_string_lit_in_asm_clobbered_registers3961);
                    string_lit359=string_lit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string_lit359.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:731:23: ( comma string_lit )*
                    loop97:
                    do {
                        int alt97=2;
                        int LA97_0 = input.LA(1);

                        if ( (LA97_0==63) ) {
                            alt97=1;
                        }


                        switch (alt97) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:731:25: comma string_lit
                    	    {
                    	    pushFollow(FOLLOW_comma_in_asm_clobbered_registers3965);
                    	    comma360=comma();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma360.getTree());
                    	    pushFollow(FOLLOW_string_lit_in_asm_clobbered_registers3967);
                    	    string_lit361=string_lit();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, string_lit361.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop97;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, asm_clobbered_registers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "asm_clobbered_registers"

    public static class asm_or_cv_kw_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asm_or_cv_kw"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:734:1: asm_or_cv_kw : asm_or_cv -> ^( KEYWORD asm_or_cv ) ;
    public final CLangParser.asm_or_cv_kw_return asm_or_cv_kw() throws RecognitionException {
        CLangParser.asm_or_cv_kw_return retval = new CLangParser.asm_or_cv_kw_return();
        retval.start = input.LT(1);
        int asm_or_cv_kw_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.asm_or_cv_return asm_or_cv362 = null;


        RewriteRuleSubtreeStream stream_asm_or_cv=new RewriteRuleSubtreeStream(adaptor,"rule asm_or_cv");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:735:2: ( asm_or_cv -> ^( KEYWORD asm_or_cv ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:735:4: asm_or_cv
            {
            pushFollow(FOLLOW_asm_or_cv_in_asm_or_cv_kw3984);
            asm_or_cv362=asm_or_cv();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_asm_or_cv.add(asm_or_cv362.getTree());


            // AST REWRITE
            // elements: asm_or_cv
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 736:3: -> ^( KEYWORD asm_or_cv )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:736:6: ^( KEYWORD asm_or_cv )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                adaptor.addChild(root_1, stream_asm_or_cv.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, asm_or_cv_kw_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "asm_or_cv_kw"

    public static class asm_or_cv_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asm_or_cv"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:739:1: asm_or_cv : ( '__asm__' | 'asm' | 'asm__' | '__asm' | cv_qualifier );
    public final CLangParser.asm_or_cv_return asm_or_cv() throws RecognitionException {
        CLangParser.asm_or_cv_return retval = new CLangParser.asm_or_cv_return();
        retval.start = input.LT(1);
        int asm_or_cv_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal363=null;
        Token string_literal364=null;
        Token string_literal365=null;
        Token string_literal366=null;
        CLangParser.cv_qualifier_return cv_qualifier367 = null;


        CommonTree string_literal363_tree=null;
        CommonTree string_literal364_tree=null;
        CommonTree string_literal365_tree=null;
        CommonTree string_literal366_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:740:2: ( '__asm__' | 'asm' | 'asm__' | '__asm' | cv_qualifier )
            int alt99=5;
            switch ( input.LA(1) ) {
            case 138:
                {
                alt99=1;
                }
                break;
            case 139:
                {
                alt99=2;
                }
                break;
            case 140:
                {
                alt99=3;
                }
                break;
            case 141:
                {
                alt99=4;
                }
                break;
            case 97:
            case 98:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
                {
                alt99=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;
            }

            switch (alt99) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:740:4: '__asm__'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal363=(Token)match(input,138,FOLLOW_138_in_asm_or_cv4007); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal363_tree = (CommonTree)adaptor.create(string_literal363);
                    adaptor.addChild(root_0, string_literal363_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:741:4: 'asm'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal364=(Token)match(input,139,FOLLOW_139_in_asm_or_cv4012); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal364_tree = (CommonTree)adaptor.create(string_literal364);
                    adaptor.addChild(root_0, string_literal364_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:742:4: 'asm__'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal365=(Token)match(input,140,FOLLOW_140_in_asm_or_cv4017); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal365_tree = (CommonTree)adaptor.create(string_literal365);
                    adaptor.addChild(root_0, string_literal365_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:743:4: '__asm'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal366=(Token)match(input,141,FOLLOW_141_in_asm_or_cv4022); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal366_tree = (CommonTree)adaptor.create(string_literal366);
                    adaptor.addChild(root_0, string_literal366_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:744:4: cv_qualifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_cv_qualifier_in_asm_or_cv4027);
                    cv_qualifier367=cv_qualifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cv_qualifier367.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, asm_or_cv_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "asm_or_cv"

    public static class cv_qualifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cv_qualifier"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:747:1: cv_qualifier : ( 'const' | 'volatile' | '__const' | '__const__' | 'const__' | '__volatile__' | '__volatile' | 'volatile__' );
    public final CLangParser.cv_qualifier_return cv_qualifier() throws RecognitionException {
        CLangParser.cv_qualifier_return retval = new CLangParser.cv_qualifier_return();
        retval.start = input.LT(1);
        int cv_qualifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set368=null;

        CommonTree set368_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:748:2: ( 'const' | 'volatile' | '__const' | '__const__' | 'const__' | '__volatile__' | '__volatile' | 'volatile__' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set368=(Token)input.LT(1);
            if ( (input.LA(1)>=97 && input.LA(1)<=98)||(input.LA(1)>=142 && input.LA(1)<=147) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set368));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, cv_qualifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cv_qualifier"

    public static class identifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifier"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:758:1: identifier : IDENTIFIER -> ^( NAME IDENTIFIER ) ;
    public final CLangParser.identifier_return identifier() throws RecognitionException {
        CLangParser.identifier_return retval = new CLangParser.identifier_return();
        retval.start = input.LT(1);
        int identifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER369=null;

        CommonTree IDENTIFIER369_tree=null;
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:759:2: ( IDENTIFIER -> ^( NAME IDENTIFIER ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:759:4: IDENTIFIER
            {
            IDENTIFIER369=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_identifier4084); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER369);



            // AST REWRITE
            // elements: IDENTIFIER
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 759:15: -> ^( NAME IDENTIFIER )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:759:18: ^( NAME IDENTIFIER )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifier"

    public static class labeled_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "labeled_statement"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:762:1: labeled_statement : ( identifier colon statement | 'case' constant_expression colon statement -> ^( KEYWORD 'case' ) constant_expression colon ^( BLOCK_SCOPE statement ) | 'default' colon statement -> ^( KEYWORD 'default' ) colon ^( BLOCK_SCOPE statement ) );
    public final CLangParser.labeled_statement_return labeled_statement() throws RecognitionException {
        CLangParser.labeled_statement_return retval = new CLangParser.labeled_statement_return();
        retval.start = input.LT(1);
        int labeled_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal373=null;
        Token string_literal377=null;
        CLangParser.identifier_return identifier370 = null;

        CLangParser.colon_return colon371 = null;

        CLangParser.statement_return statement372 = null;

        CLangParser.constant_expression_return constant_expression374 = null;

        CLangParser.colon_return colon375 = null;

        CLangParser.statement_return statement376 = null;

        CLangParser.colon_return colon378 = null;

        CLangParser.statement_return statement379 = null;


        CommonTree string_literal373_tree=null;
        CommonTree string_literal377_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_constant_expression=new RewriteRuleSubtreeStream(adaptor,"rule constant_expression");
        RewriteRuleSubtreeStream stream_colon=new RewriteRuleSubtreeStream(adaptor,"rule colon");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:763:2: ( identifier colon statement | 'case' constant_expression colon statement -> ^( KEYWORD 'case' ) constant_expression colon ^( BLOCK_SCOPE statement ) | 'default' colon statement -> ^( KEYWORD 'default' ) colon ^( BLOCK_SCOPE statement ) )
            int alt100=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
                {
                alt100=1;
                }
                break;
            case 148:
                {
                alt100=2;
                }
                break;
            case 149:
                {
                alt100=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;
            }

            switch (alt100) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:763:4: identifier colon statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_identifier_in_labeled_statement4105);
                    identifier370=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier370.getTree());
                    pushFollow(FOLLOW_colon_in_labeled_statement4107);
                    colon371=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon371.getTree());
                    pushFollow(FOLLOW_statement_in_labeled_statement4109);
                    statement372=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement372.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:765:4: 'case' constant_expression colon statement
                    {
                    string_literal373=(Token)match(input,148,FOLLOW_148_in_labeled_statement4115); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_148.add(string_literal373);

                    pushFollow(FOLLOW_constant_expression_in_labeled_statement4117);
                    constant_expression374=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant_expression.add(constant_expression374.getTree());
                    pushFollow(FOLLOW_colon_in_labeled_statement4119);
                    colon375=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_colon.add(colon375.getTree());
                    pushFollow(FOLLOW_statement_in_labeled_statement4121);
                    statement376=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement376.getTree());


                    // AST REWRITE
                    // elements: statement, constant_expression, colon, 148
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 766:3: -> ^( KEYWORD 'case' ) constant_expression colon ^( BLOCK_SCOPE statement )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:766:6: ^( KEYWORD 'case' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                        adaptor.addChild(root_1, stream_148.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_constant_expression.nextTree());
                        adaptor.addChild(root_0, stream_colon.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:766:52: ^( BLOCK_SCOPE statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, "BLOCK_SCOPE"), root_1);

                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:768:4: 'default' colon statement
                    {
                    string_literal377=(Token)match(input,149,FOLLOW_149_in_labeled_statement4149); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_149.add(string_literal377);

                    pushFollow(FOLLOW_colon_in_labeled_statement4151);
                    colon378=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_colon.add(colon378.getTree());
                    pushFollow(FOLLOW_statement_in_labeled_statement4153);
                    statement379=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement379.getTree());


                    // AST REWRITE
                    // elements: colon, 149, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 769:3: -> ^( KEYWORD 'default' ) colon ^( BLOCK_SCOPE statement )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:769:6: ^( KEYWORD 'default' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                        adaptor.addChild(root_1, stream_149.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_colon.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:769:35: ^( BLOCK_SCOPE statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, "BLOCK_SCOPE"), root_1);

                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, labeled_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "labeled_statement"

    public static class compound_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_statement"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:772:1: compound_statement : lbrace ( external_declaration )* ( statement )* rbrace ;
    public final CLangParser.compound_statement_return compound_statement() throws RecognitionException {
        Symbols_stack.push(new Symbols_scope());

        CLangParser.compound_statement_return retval = new CLangParser.compound_statement_return();
        retval.start = input.LT(1);
        int compound_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.lbrace_return lbrace380 = null;

        CLangParser.external_declaration_return external_declaration381 = null;

        CLangParser.statement_return statement382 = null;

        CLangParser.rbrace_return rbrace383 = null;




          ((Symbols_scope)Symbols_stack.peek()).types = new HashSet();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:777:2: ( lbrace ( external_declaration )* ( statement )* rbrace )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:777:4: lbrace ( external_declaration )* ( statement )* rbrace
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_lbrace_in_compound_statement4195);
            lbrace380=lbrace();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lbrace380.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:777:11: ( external_declaration )*
            loop101:
            do {
                int alt101=2;
                alt101 = dfa101.predict(input);
                switch (alt101) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: external_declaration
            	    {
            	    pushFollow(FOLLOW_external_declaration_in_compound_statement4197);
            	    external_declaration381=external_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, external_declaration381.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:777:33: ( statement )*
            loop102:
            do {
                int alt102=2;
                alt102 = dfa102.predict(input);
                switch (alt102) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_compound_statement4200);
            	    statement382=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement382.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);

            pushFollow(FOLLOW_rbrace_in_compound_statement4203);
            rbrace383=rbrace();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rbrace383.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, compound_statement_StartIndex); }
            Symbols_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "compound_statement"

    public static class expression_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression_statement"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:785:1: expression_statement : ( semi | expression semi );
    public final CLangParser.expression_statement_return expression_statement() throws RecognitionException {
        CLangParser.expression_statement_return retval = new CLangParser.expression_statement_return();
        retval.start = input.LT(1);
        int expression_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.semi_return semi384 = null;

        CLangParser.expression_return expression385 = null;

        CLangParser.semi_return semi386 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:786:2: ( semi | expression semi )
            int alt103=2;
            alt103 = dfa103.predict(input);
            switch (alt103) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:786:4: semi
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_semi_in_expression_statement4221);
                    semi384=semi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, semi384.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:787:4: expression semi
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_expression_statement4226);
                    expression385=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression385.getTree());
                    pushFollow(FOLLOW_semi_in_expression_statement4228);
                    semi386=semi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, semi386.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, expression_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression_statement"

    public static class selection_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selection_statement"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:790:1: selection_statement : ( 'if' lpar expression rpar statement ( options {k=1; backtrack=false; } : 'else' statement )? -> ^( BRANCH ^( KEYWORD 'if' ) lpar ^( CONDITION expression ) rpar ^( BLOCK_SCOPE statement ) ) ( ^( BRANCH ^( KEYWORD 'else' ) ^( BLOCK_SCOPE statement ) ) )? | 'switch' lpar expression rpar statement -> ^( KEYWORD 'switch' ) lpar ^( CONDITION expression ) rpar ^( BRANCH ^( BLOCK_SCOPE statement ) ) );
    public final CLangParser.selection_statement_return selection_statement() throws RecognitionException {
        CLangParser.selection_statement_return retval = new CLangParser.selection_statement_return();
        retval.start = input.LT(1);
        int selection_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal387=null;
        Token string_literal392=null;
        Token string_literal394=null;
        CLangParser.lpar_return lpar388 = null;

        CLangParser.expression_return expression389 = null;

        CLangParser.rpar_return rpar390 = null;

        CLangParser.statement_return statement391 = null;

        CLangParser.statement_return statement393 = null;

        CLangParser.lpar_return lpar395 = null;

        CLangParser.expression_return expression396 = null;

        CLangParser.rpar_return rpar397 = null;

        CLangParser.statement_return statement398 = null;


        CommonTree string_literal387_tree=null;
        CommonTree string_literal392_tree=null;
        CommonTree string_literal394_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_lpar=new RewriteRuleSubtreeStream(adaptor,"rule lpar");
        RewriteRuleSubtreeStream stream_rpar=new RewriteRuleSubtreeStream(adaptor,"rule rpar");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:791:2: ( 'if' lpar expression rpar statement ( options {k=1; backtrack=false; } : 'else' statement )? -> ^( BRANCH ^( KEYWORD 'if' ) lpar ^( CONDITION expression ) rpar ^( BLOCK_SCOPE statement ) ) ( ^( BRANCH ^( KEYWORD 'else' ) ^( BLOCK_SCOPE statement ) ) )? | 'switch' lpar expression rpar statement -> ^( KEYWORD 'switch' ) lpar ^( CONDITION expression ) rpar ^( BRANCH ^( BLOCK_SCOPE statement ) ) )
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==150) ) {
                alt105=1;
            }
            else if ( (LA105_0==152) ) {
                alt105=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;
            }
            switch (alt105) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:791:4: 'if' lpar expression rpar statement ( options {k=1; backtrack=false; } : 'else' statement )?
                    {
                    string_literal387=(Token)match(input,150,FOLLOW_150_in_selection_statement4239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_150.add(string_literal387);

                    pushFollow(FOLLOW_lpar_in_selection_statement4241);
                    lpar388=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lpar.add(lpar388.getTree());
                    pushFollow(FOLLOW_expression_in_selection_statement4243);
                    expression389=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression389.getTree());
                    pushFollow(FOLLOW_rpar_in_selection_statement4245);
                    rpar390=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rpar.add(rpar390.getTree());
                    pushFollow(FOLLOW_statement_in_selection_statement4247);
                    statement391=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement391.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:791:40: ( options {k=1; backtrack=false; } : 'else' statement )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==151) ) {
                        int LA104_2 = input.LA(2);

                        if ( (true) ) {
                            alt104=1;
                        }
                    }
                    switch (alt104) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:791:73: 'else' statement
                            {
                            string_literal392=(Token)match(input,151,FOLLOW_151_in_selection_statement4262); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_151.add(string_literal392);

                            pushFollow(FOLLOW_statement_in_selection_statement4264);
                            statement393=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement393.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: 150, statement, 151, expression, statement, lpar, rpar
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 792:3: -> ^( BRANCH ^( KEYWORD 'if' ) lpar ^( CONDITION expression ) rpar ^( BLOCK_SCOPE statement ) ) ( ^( BRANCH ^( KEYWORD 'else' ) ^( BLOCK_SCOPE statement ) ) )?
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:792:5: ^( BRANCH ^( KEYWORD 'if' ) lpar ^( CONDITION expression ) rpar ^( BLOCK_SCOPE statement ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH, "BRANCH"), root_1);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:792:16: ^( KEYWORD 'if' )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_2);

                        adaptor.addChild(root_2, stream_150.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_lpar.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:792:39: ^( CONDITION expression )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONDITION, "CONDITION"), root_2);

                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_rpar.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:792:70: ^( BLOCK_SCOPE statement )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, "BLOCK_SCOPE"), root_2);

                        adaptor.addChild(root_2, stream_statement.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:793:6: ( ^( BRANCH ^( KEYWORD 'else' ) ^( BLOCK_SCOPE statement ) ) )?
                        if ( stream_151.hasNext()||stream_statement.hasNext() ) {
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:793:6: ^( BRANCH ^( KEYWORD 'else' ) ^( BLOCK_SCOPE statement ) )
                            {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH, "BRANCH"), root_1);

                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:793:16: ^( KEYWORD 'else' )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_2);

                            adaptor.addChild(root_2, stream_151.nextNode());

                            adaptor.addChild(root_1, root_2);
                            }
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:793:36: ^( BLOCK_SCOPE statement )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, "BLOCK_SCOPE"), root_2);

                            adaptor.addChild(root_2, stream_statement.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_151.reset();
                        stream_statement.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:795:4: 'switch' lpar expression rpar statement
                    {
                    string_literal394=(Token)match(input,152,FOLLOW_152_in_selection_statement4336); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_152.add(string_literal394);

                    pushFollow(FOLLOW_lpar_in_selection_statement4338);
                    lpar395=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lpar.add(lpar395.getTree());
                    pushFollow(FOLLOW_expression_in_selection_statement4340);
                    expression396=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression396.getTree());
                    pushFollow(FOLLOW_rpar_in_selection_statement4342);
                    rpar397=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rpar.add(rpar397.getTree());
                    pushFollow(FOLLOW_statement_in_selection_statement4344);
                    statement398=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement398.getTree());


                    // AST REWRITE
                    // elements: rpar, 152, statement, lpar, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 796:3: -> ^( KEYWORD 'switch' ) lpar ^( CONDITION expression ) rpar ^( BRANCH ^( BLOCK_SCOPE statement ) )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:796:6: ^( KEYWORD 'switch' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                        adaptor.addChild(root_1, stream_152.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_lpar.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:796:33: ^( CONDITION expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONDITION, "CONDITION"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_rpar.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:797:6: ^( BRANCH ^( BLOCK_SCOPE statement ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH, "BRANCH"), root_1);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:797:16: ^( BLOCK_SCOPE statement )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, "BLOCK_SCOPE"), root_2);

                        adaptor.addChild(root_2, stream_statement.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, selection_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selection_statement"

    public static class iteration_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iteration_statement"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:800:1: iteration_statement : ( 'while' lpar expression rpar statement -> ^( KEYWORD 'while' ) lpar ^( CONDITION expression ) rpar ^( BLOCK_SCOPE statement ) | 'do' statement 'while' lpar expression rpar semi -> ^( KEYWORD 'do' ) ^( BLOCK_SCOPE statement ) ^( KEYWORD 'while' ) lpar ^( CONDITION expression ) rpar semi | 'for' lpar expression_statement expression_statement ( expression )? rpar statement -> ^( KEYWORD 'for' ) lpar ^( INIT expression_statement ) ^( CONDITION expression_statement ) ( ^( STEP expression ) )? rpar ^( BLOCK_SCOPE statement ) );
    public final CLangParser.iteration_statement_return iteration_statement() throws RecognitionException {
        CLangParser.iteration_statement_return retval = new CLangParser.iteration_statement_return();
        retval.start = input.LT(1);
        int iteration_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal399=null;
        Token string_literal404=null;
        Token string_literal406=null;
        Token string_literal411=null;
        CLangParser.lpar_return lpar400 = null;

        CLangParser.expression_return expression401 = null;

        CLangParser.rpar_return rpar402 = null;

        CLangParser.statement_return statement403 = null;

        CLangParser.statement_return statement405 = null;

        CLangParser.lpar_return lpar407 = null;

        CLangParser.expression_return expression408 = null;

        CLangParser.rpar_return rpar409 = null;

        CLangParser.semi_return semi410 = null;

        CLangParser.lpar_return lpar412 = null;

        CLangParser.expression_statement_return expression_statement413 = null;

        CLangParser.expression_statement_return expression_statement414 = null;

        CLangParser.expression_return expression415 = null;

        CLangParser.rpar_return rpar416 = null;

        CLangParser.statement_return statement417 = null;


        CommonTree string_literal399_tree=null;
        CommonTree string_literal404_tree=null;
        CommonTree string_literal406_tree=null;
        CommonTree string_literal411_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_lpar=new RewriteRuleSubtreeStream(adaptor,"rule lpar");
        RewriteRuleSubtreeStream stream_expression_statement=new RewriteRuleSubtreeStream(adaptor,"rule expression_statement");
        RewriteRuleSubtreeStream stream_semi=new RewriteRuleSubtreeStream(adaptor,"rule semi");
        RewriteRuleSubtreeStream stream_rpar=new RewriteRuleSubtreeStream(adaptor,"rule rpar");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:801:2: ( 'while' lpar expression rpar statement -> ^( KEYWORD 'while' ) lpar ^( CONDITION expression ) rpar ^( BLOCK_SCOPE statement ) | 'do' statement 'while' lpar expression rpar semi -> ^( KEYWORD 'do' ) ^( BLOCK_SCOPE statement ) ^( KEYWORD 'while' ) lpar ^( CONDITION expression ) rpar semi | 'for' lpar expression_statement expression_statement ( expression )? rpar statement -> ^( KEYWORD 'for' ) lpar ^( INIT expression_statement ) ^( CONDITION expression_statement ) ( ^( STEP expression ) )? rpar ^( BLOCK_SCOPE statement ) )
            int alt107=3;
            switch ( input.LA(1) ) {
            case 153:
                {
                alt107=1;
                }
                break;
            case 154:
                {
                alt107=2;
                }
                break;
            case 155:
                {
                alt107=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;
            }

            switch (alt107) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:801:4: 'while' lpar expression rpar statement
                    {
                    string_literal399=(Token)match(input,153,FOLLOW_153_in_iteration_statement4396); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_153.add(string_literal399);

                    pushFollow(FOLLOW_lpar_in_iteration_statement4398);
                    lpar400=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lpar.add(lpar400.getTree());
                    pushFollow(FOLLOW_expression_in_iteration_statement4400);
                    expression401=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression401.getTree());
                    pushFollow(FOLLOW_rpar_in_iteration_statement4402);
                    rpar402=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rpar.add(rpar402.getTree());
                    pushFollow(FOLLOW_statement_in_iteration_statement4404);
                    statement403=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement403.getTree());


                    // AST REWRITE
                    // elements: expression, rpar, statement, lpar, 153
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 802:3: -> ^( KEYWORD 'while' ) lpar ^( CONDITION expression ) rpar ^( BLOCK_SCOPE statement )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:802:6: ^( KEYWORD 'while' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                        adaptor.addChild(root_1, stream_153.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_lpar.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:802:32: ^( CONDITION expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONDITION, "CONDITION"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_rpar.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:802:63: ^( BLOCK_SCOPE statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, "BLOCK_SCOPE"), root_1);

                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:804:4: 'do' statement 'while' lpar expression rpar semi
                    {
                    string_literal404=(Token)match(input,154,FOLLOW_154_in_iteration_statement4440); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_154.add(string_literal404);

                    pushFollow(FOLLOW_statement_in_iteration_statement4442);
                    statement405=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement405.getTree());
                    string_literal406=(Token)match(input,153,FOLLOW_153_in_iteration_statement4444); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_153.add(string_literal406);

                    pushFollow(FOLLOW_lpar_in_iteration_statement4446);
                    lpar407=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lpar.add(lpar407.getTree());
                    pushFollow(FOLLOW_expression_in_iteration_statement4448);
                    expression408=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression408.getTree());
                    pushFollow(FOLLOW_rpar_in_iteration_statement4450);
                    rpar409=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rpar.add(rpar409.getTree());
                    pushFollow(FOLLOW_semi_in_iteration_statement4452);
                    semi410=semi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_semi.add(semi410.getTree());


                    // AST REWRITE
                    // elements: semi, lpar, 154, rpar, expression, statement, 153
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 805:3: -> ^( KEYWORD 'do' ) ^( BLOCK_SCOPE statement ) ^( KEYWORD 'while' ) lpar ^( CONDITION expression ) rpar semi
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:805:6: ^( KEYWORD 'do' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                        adaptor.addChild(root_1, stream_154.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:805:24: ^( BLOCK_SCOPE statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, "BLOCK_SCOPE"), root_1);

                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:806:6: ^( KEYWORD 'while' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                        adaptor.addChild(root_1, stream_153.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_lpar.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:806:32: ^( CONDITION expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONDITION, "CONDITION"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_rpar.nextTree());
                        adaptor.addChild(root_0, stream_semi.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:808:4: 'for' lpar expression_statement expression_statement ( expression )? rpar statement
                    {
                    string_literal411=(Token)match(input,155,FOLLOW_155_in_iteration_statement4503); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_155.add(string_literal411);

                    pushFollow(FOLLOW_lpar_in_iteration_statement4505);
                    lpar412=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lpar.add(lpar412.getTree());
                    pushFollow(FOLLOW_expression_statement_in_iteration_statement4507);
                    expression_statement413=expression_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression_statement.add(expression_statement413.getTree());
                    pushFollow(FOLLOW_expression_statement_in_iteration_statement4509);
                    expression_statement414=expression_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression_statement.add(expression_statement414.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:808:57: ( expression )?
                    int alt106=2;
                    alt106 = dfa106.predict(input);
                    switch (alt106) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: expression
                            {
                            pushFollow(FOLLOW_expression_in_iteration_statement4511);
                            expression415=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression415.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_rpar_in_iteration_statement4514);
                    rpar416=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rpar.add(rpar416.getTree());
                    pushFollow(FOLLOW_statement_in_iteration_statement4516);
                    statement417=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement417.getTree());


                    // AST REWRITE
                    // elements: rpar, statement, expression_statement, expression, 155, expression_statement, lpar
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 809:3: -> ^( KEYWORD 'for' ) lpar ^( INIT expression_statement ) ^( CONDITION expression_statement ) ( ^( STEP expression ) )? rpar ^( BLOCK_SCOPE statement )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:809:6: ^( KEYWORD 'for' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                        adaptor.addChild(root_1, stream_155.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_lpar.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:809:30: ^( INIT expression_statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INIT, "INIT"), root_1);

                        adaptor.addChild(root_1, stream_expression_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:810:6: ^( CONDITION expression_statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONDITION, "CONDITION"), root_1);

                        adaptor.addChild(root_1, stream_expression_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:810:42: ( ^( STEP expression ) )?
                        if ( stream_expression.hasNext() ) {
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:810:42: ^( STEP expression )
                            {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STEP, "STEP"), root_1);

                            adaptor.addChild(root_1, stream_expression.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, stream_rpar.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:810:67: ^( BLOCK_SCOPE statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, "BLOCK_SCOPE"), root_1);

                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, iteration_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "iteration_statement"

    public static class jump_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jump_statement"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:813:1: jump_statement : ( 'goto' identifier semi -> ^( KEYWORD 'goto' ) identifier semi | 'continue' semi -> ^( KEYWORD 'continue' ) semi | 'break' semi -> ^( KEYWORD 'break' ) semi | 'return' semi -> ^( KEYWORD 'return' ) semi | 'return' expression semi -> ^( KEYWORD 'return' ) expression semi );
    public final CLangParser.jump_statement_return jump_statement() throws RecognitionException {
        CLangParser.jump_statement_return retval = new CLangParser.jump_statement_return();
        retval.start = input.LT(1);
        int jump_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal418=null;
        Token string_literal421=null;
        Token string_literal423=null;
        Token string_literal425=null;
        Token string_literal427=null;
        CLangParser.identifier_return identifier419 = null;

        CLangParser.semi_return semi420 = null;

        CLangParser.semi_return semi422 = null;

        CLangParser.semi_return semi424 = null;

        CLangParser.semi_return semi426 = null;

        CLangParser.expression_return expression428 = null;

        CLangParser.semi_return semi429 = null;


        CommonTree string_literal418_tree=null;
        CommonTree string_literal421_tree=null;
        CommonTree string_literal423_tree=null;
        CommonTree string_literal425_tree=null;
        CommonTree string_literal427_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_semi=new RewriteRuleSubtreeStream(adaptor,"rule semi");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:814:2: ( 'goto' identifier semi -> ^( KEYWORD 'goto' ) identifier semi | 'continue' semi -> ^( KEYWORD 'continue' ) semi | 'break' semi -> ^( KEYWORD 'break' ) semi | 'return' semi -> ^( KEYWORD 'return' ) semi | 'return' expression semi -> ^( KEYWORD 'return' ) expression semi )
            int alt108=5;
            alt108 = dfa108.predict(input);
            switch (alt108) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:814:4: 'goto' identifier semi
                    {
                    string_literal418=(Token)match(input,156,FOLLOW_156_in_jump_statement4576); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_156.add(string_literal418);

                    pushFollow(FOLLOW_identifier_in_jump_statement4578);
                    identifier419=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier419.getTree());
                    pushFollow(FOLLOW_semi_in_jump_statement4580);
                    semi420=semi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_semi.add(semi420.getTree());


                    // AST REWRITE
                    // elements: semi, 156, identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 815:3: -> ^( KEYWORD 'goto' ) identifier semi
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:815:6: ^( KEYWORD 'goto' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                        adaptor.addChild(root_1, stream_156.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_identifier.nextTree());
                        adaptor.addChild(root_0, stream_semi.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:817:4: 'continue' semi
                    {
                    string_literal421=(Token)match(input,157,FOLLOW_157_in_jump_statement4602); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(string_literal421);

                    pushFollow(FOLLOW_semi_in_jump_statement4604);
                    semi422=semi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_semi.add(semi422.getTree());


                    // AST REWRITE
                    // elements: semi, 157
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 818:3: -> ^( KEYWORD 'continue' ) semi
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:818:6: ^( KEYWORD 'continue' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                        adaptor.addChild(root_1, stream_157.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_semi.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:820:4: 'break' semi
                    {
                    string_literal423=(Token)match(input,158,FOLLOW_158_in_jump_statement4624); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_158.add(string_literal423);

                    pushFollow(FOLLOW_semi_in_jump_statement4626);
                    semi424=semi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_semi.add(semi424.getTree());


                    // AST REWRITE
                    // elements: 158, semi
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 821:3: -> ^( KEYWORD 'break' ) semi
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:821:6: ^( KEYWORD 'break' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                        adaptor.addChild(root_1, stream_158.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_semi.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:823:4: 'return' semi
                    {
                    string_literal425=(Token)match(input,159,FOLLOW_159_in_jump_statement4646); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_159.add(string_literal425);

                    pushFollow(FOLLOW_semi_in_jump_statement4648);
                    semi426=semi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_semi.add(semi426.getTree());


                    // AST REWRITE
                    // elements: 159, semi
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 824:3: -> ^( KEYWORD 'return' ) semi
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:824:6: ^( KEYWORD 'return' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                        adaptor.addChild(root_1, stream_159.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_semi.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:826:4: 'return' expression semi
                    {
                    string_literal427=(Token)match(input,159,FOLLOW_159_in_jump_statement4668); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_159.add(string_literal427);

                    pushFollow(FOLLOW_expression_in_jump_statement4670);
                    expression428=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression428.getTree());
                    pushFollow(FOLLOW_semi_in_jump_statement4672);
                    semi429=semi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_semi.add(semi429.getTree());


                    // AST REWRITE
                    // elements: semi, 159, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 827:3: -> ^( KEYWORD 'return' ) expression semi
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:827:6: ^( KEYWORD 'return' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_1);

                        adaptor.addChild(root_1, stream_159.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_expression.nextTree());
                        adaptor.addChild(root_0, stream_semi.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, jump_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jump_statement"

    public static class attributes_or_asm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attributes_or_asm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:830:1: attributes_or_asm : attribute_spec ;
    public final CLangParser.attributes_or_asm_return attributes_or_asm() throws RecognitionException {
        CLangParser.attributes_or_asm_return retval = new CLangParser.attributes_or_asm_return();
        retval.start = input.LT(1);
        int attributes_or_asm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_spec_return attribute_spec430 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:831:2: ( attribute_spec )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:831:4: attribute_spec
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_attribute_spec_in_attributes_or_asm4699);
            attribute_spec430=attribute_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_spec430.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, attributes_or_asm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attributes_or_asm"

    public static class attribute_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_name"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:835:1: attribute_name : '__attribute__' -> ^( '__attribute__' ) ;
    public final CLangParser.attribute_name_return attribute_name() throws RecognitionException {
        CLangParser.attribute_name_return retval = new CLangParser.attribute_name_return();
        retval.start = input.LT(1);
        int attribute_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal431=null;

        CommonTree string_literal431_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:836:2: ( '__attribute__' -> ^( '__attribute__' ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:836:4: '__attribute__'
            {
            string_literal431=(Token)match(input,160,FOLLOW_160_in_attribute_name4711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal431);



            // AST REWRITE
            // elements: 160
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 837:3: -> ^( '__attribute__' )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:837:6: ^( '__attribute__' )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_160.nextNode(), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, attribute_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_name"

    public static class attribute_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_spec"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:840:1: attribute_spec : attribute_name lpar lpar attribute_extension ( comma attribute_extension )* rpar rpar ;
    public final CLangParser.attribute_spec_return attribute_spec() throws RecognitionException {
        CLangParser.attribute_spec_return retval = new CLangParser.attribute_spec_return();
        retval.start = input.LT(1);
        int attribute_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_name_return attribute_name432 = null;

        CLangParser.lpar_return lpar433 = null;

        CLangParser.lpar_return lpar434 = null;

        CLangParser.attribute_extension_return attribute_extension435 = null;

        CLangParser.comma_return comma436 = null;

        CLangParser.attribute_extension_return attribute_extension437 = null;

        CLangParser.rpar_return rpar438 = null;

        CLangParser.rpar_return rpar439 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:841:2: ( attribute_name lpar lpar attribute_extension ( comma attribute_extension )* rpar rpar )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:841:4: attribute_name lpar lpar attribute_extension ( comma attribute_extension )* rpar rpar
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_attribute_name_in_attribute_spec4732);
            attribute_name432=attribute_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_name432.getTree());
            pushFollow(FOLLOW_lpar_in_attribute_spec4734);
            lpar433=lpar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar433.getTree());
            pushFollow(FOLLOW_lpar_in_attribute_spec4736);
            lpar434=lpar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar434.getTree());
            pushFollow(FOLLOW_attribute_extension_in_attribute_spec4738);
            attribute_extension435=attribute_extension();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_extension435.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:841:49: ( comma attribute_extension )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==63) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:841:51: comma attribute_extension
            	    {
            	    pushFollow(FOLLOW_comma_in_attribute_spec4742);
            	    comma436=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma436.getTree());
            	    pushFollow(FOLLOW_attribute_extension_in_attribute_spec4744);
            	    attribute_extension437=attribute_extension();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_extension437.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);

            pushFollow(FOLLOW_rpar_in_attribute_spec4749);
            rpar438=rpar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar438.getTree());
            pushFollow(FOLLOW_rpar_in_attribute_spec4751);
            rpar439=rpar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar439.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, attribute_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_spec"

    public static class attribute_extension_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_extension"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:905:1: attribute_extension : ( attribute_alias_nm lpar string_lit rpar | attribute_aligned_nm ( lpar decimal_lit rpar )? | attribute_always_inline_nm | attribute_cdecl_nm | attribute_cleanup_nm lpar identifier rpar | attribute_const_nm | attribute_constructor_nm | attribute_deprecated_nm | attribute_destructor_nm | attribute_dllexport_nm | attribute_dllimport_nm | attribute_eightbit_nm | attribute_format_nm lpar format_archetype comma decimal_lit comma decimal_lit rpar | attribute_leaf_nm | attribute_malloc_nm | attribute_mode_nm lpar identifier rpar | attribute_noinline_nm | attribute_noreturn_nm | attribute_used_nm | attribute_unused_nm | attribute_nonnull_nm ( lpar decimal_lit ( comma decimal_lit )* rpar )? | attribute_nothrow_nm | attribute_pure_nm | attribute_trans_union_nm | attribute_vector_size_nm lpar decimal_lit rpar | attribute_visibility_nm | attribute_weak_nm );
    public final CLangParser.attribute_extension_return attribute_extension() throws RecognitionException {
        CLangParser.attribute_extension_return retval = new CLangParser.attribute_extension_return();
        retval.start = input.LT(1);
        int attribute_extension_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_alias_nm_return attribute_alias_nm440 = null;

        CLangParser.lpar_return lpar441 = null;

        CLangParser.string_lit_return string_lit442 = null;

        CLangParser.rpar_return rpar443 = null;

        CLangParser.attribute_aligned_nm_return attribute_aligned_nm444 = null;

        CLangParser.lpar_return lpar445 = null;

        CLangParser.decimal_lit_return decimal_lit446 = null;

        CLangParser.rpar_return rpar447 = null;

        CLangParser.attribute_always_inline_nm_return attribute_always_inline_nm448 = null;

        CLangParser.attribute_cdecl_nm_return attribute_cdecl_nm449 = null;

        CLangParser.attribute_cleanup_nm_return attribute_cleanup_nm450 = null;

        CLangParser.lpar_return lpar451 = null;

        CLangParser.identifier_return identifier452 = null;

        CLangParser.rpar_return rpar453 = null;

        CLangParser.attribute_const_nm_return attribute_const_nm454 = null;

        CLangParser.attribute_constructor_nm_return attribute_constructor_nm455 = null;

        CLangParser.attribute_deprecated_nm_return attribute_deprecated_nm456 = null;

        CLangParser.attribute_destructor_nm_return attribute_destructor_nm457 = null;

        CLangParser.attribute_dllexport_nm_return attribute_dllexport_nm458 = null;

        CLangParser.attribute_dllimport_nm_return attribute_dllimport_nm459 = null;

        CLangParser.attribute_eightbit_nm_return attribute_eightbit_nm460 = null;

        CLangParser.attribute_format_nm_return attribute_format_nm461 = null;

        CLangParser.lpar_return lpar462 = null;

        CLangParser.format_archetype_return format_archetype463 = null;

        CLangParser.comma_return comma464 = null;

        CLangParser.decimal_lit_return decimal_lit465 = null;

        CLangParser.comma_return comma466 = null;

        CLangParser.decimal_lit_return decimal_lit467 = null;

        CLangParser.rpar_return rpar468 = null;

        CLangParser.attribute_leaf_nm_return attribute_leaf_nm469 = null;

        CLangParser.attribute_malloc_nm_return attribute_malloc_nm470 = null;

        CLangParser.attribute_mode_nm_return attribute_mode_nm471 = null;

        CLangParser.lpar_return lpar472 = null;

        CLangParser.identifier_return identifier473 = null;

        CLangParser.rpar_return rpar474 = null;

        CLangParser.attribute_noinline_nm_return attribute_noinline_nm475 = null;

        CLangParser.attribute_noreturn_nm_return attribute_noreturn_nm476 = null;

        CLangParser.attribute_used_nm_return attribute_used_nm477 = null;

        CLangParser.attribute_unused_nm_return attribute_unused_nm478 = null;

        CLangParser.attribute_nonnull_nm_return attribute_nonnull_nm479 = null;

        CLangParser.lpar_return lpar480 = null;

        CLangParser.decimal_lit_return decimal_lit481 = null;

        CLangParser.comma_return comma482 = null;

        CLangParser.decimal_lit_return decimal_lit483 = null;

        CLangParser.rpar_return rpar484 = null;

        CLangParser.attribute_nothrow_nm_return attribute_nothrow_nm485 = null;

        CLangParser.attribute_pure_nm_return attribute_pure_nm486 = null;

        CLangParser.attribute_trans_union_nm_return attribute_trans_union_nm487 = null;

        CLangParser.attribute_vector_size_nm_return attribute_vector_size_nm488 = null;

        CLangParser.lpar_return lpar489 = null;

        CLangParser.decimal_lit_return decimal_lit490 = null;

        CLangParser.rpar_return rpar491 = null;

        CLangParser.attribute_visibility_nm_return attribute_visibility_nm492 = null;

        CLangParser.attribute_weak_nm_return attribute_weak_nm493 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:906:2: ( attribute_alias_nm lpar string_lit rpar | attribute_aligned_nm ( lpar decimal_lit rpar )? | attribute_always_inline_nm | attribute_cdecl_nm | attribute_cleanup_nm lpar identifier rpar | attribute_const_nm | attribute_constructor_nm | attribute_deprecated_nm | attribute_destructor_nm | attribute_dllexport_nm | attribute_dllimport_nm | attribute_eightbit_nm | attribute_format_nm lpar format_archetype comma decimal_lit comma decimal_lit rpar | attribute_leaf_nm | attribute_malloc_nm | attribute_mode_nm lpar identifier rpar | attribute_noinline_nm | attribute_noreturn_nm | attribute_used_nm | attribute_unused_nm | attribute_nonnull_nm ( lpar decimal_lit ( comma decimal_lit )* rpar )? | attribute_nothrow_nm | attribute_pure_nm | attribute_trans_union_nm | attribute_vector_size_nm lpar decimal_lit rpar | attribute_visibility_nm | attribute_weak_nm )
            int alt113=27;
            alt113 = dfa113.predict(input);
            switch (alt113) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:906:4: attribute_alias_nm lpar string_lit rpar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_alias_nm_in_attribute_extension4765);
                    attribute_alias_nm440=attribute_alias_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_alias_nm440.getTree());
                    pushFollow(FOLLOW_lpar_in_attribute_extension4767);
                    lpar441=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar441.getTree());
                    pushFollow(FOLLOW_string_lit_in_attribute_extension4769);
                    string_lit442=string_lit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string_lit442.getTree());
                    pushFollow(FOLLOW_rpar_in_attribute_extension4771);
                    rpar443=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar443.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:908:4: attribute_aligned_nm ( lpar decimal_lit rpar )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_aligned_nm_in_attribute_extension4777);
                    attribute_aligned_nm444=attribute_aligned_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_aligned_nm444.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:908:25: ( lpar decimal_lit rpar )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==66) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:908:27: lpar decimal_lit rpar
                            {
                            pushFollow(FOLLOW_lpar_in_attribute_extension4781);
                            lpar445=lpar();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar445.getTree());
                            pushFollow(FOLLOW_decimal_lit_in_attribute_extension4783);
                            decimal_lit446=decimal_lit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, decimal_lit446.getTree());
                            pushFollow(FOLLOW_rpar_in_attribute_extension4785);
                            rpar447=rpar();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar447.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:909:4: attribute_always_inline_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_always_inline_nm_in_attribute_extension4793);
                    attribute_always_inline_nm448=attribute_always_inline_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_always_inline_nm448.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:910:4: attribute_cdecl_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_cdecl_nm_in_attribute_extension4798);
                    attribute_cdecl_nm449=attribute_cdecl_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_cdecl_nm449.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:911:4: attribute_cleanup_nm lpar identifier rpar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_cleanup_nm_in_attribute_extension4803);
                    attribute_cleanup_nm450=attribute_cleanup_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_cleanup_nm450.getTree());
                    pushFollow(FOLLOW_lpar_in_attribute_extension4805);
                    lpar451=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar451.getTree());
                    pushFollow(FOLLOW_identifier_in_attribute_extension4807);
                    identifier452=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier452.getTree());
                    pushFollow(FOLLOW_rpar_in_attribute_extension4809);
                    rpar453=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar453.getTree());

                    }
                    break;
                case 6 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:912:4: attribute_const_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_const_nm_in_attribute_extension4814);
                    attribute_const_nm454=attribute_const_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_const_nm454.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:913:4: attribute_constructor_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_constructor_nm_in_attribute_extension4819);
                    attribute_constructor_nm455=attribute_constructor_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_constructor_nm455.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:914:4: attribute_deprecated_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_deprecated_nm_in_attribute_extension4824);
                    attribute_deprecated_nm456=attribute_deprecated_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_deprecated_nm456.getTree());

                    }
                    break;
                case 9 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:915:4: attribute_destructor_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_destructor_nm_in_attribute_extension4829);
                    attribute_destructor_nm457=attribute_destructor_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_destructor_nm457.getTree());

                    }
                    break;
                case 10 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:916:4: attribute_dllexport_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_dllexport_nm_in_attribute_extension4834);
                    attribute_dllexport_nm458=attribute_dllexport_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_dllexport_nm458.getTree());

                    }
                    break;
                case 11 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:917:4: attribute_dllimport_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_dllimport_nm_in_attribute_extension4839);
                    attribute_dllimport_nm459=attribute_dllimport_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_dllimport_nm459.getTree());

                    }
                    break;
                case 12 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:918:4: attribute_eightbit_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_eightbit_nm_in_attribute_extension4844);
                    attribute_eightbit_nm460=attribute_eightbit_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_eightbit_nm460.getTree());

                    }
                    break;
                case 13 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:919:4: attribute_format_nm lpar format_archetype comma decimal_lit comma decimal_lit rpar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_format_nm_in_attribute_extension4849);
                    attribute_format_nm461=attribute_format_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_format_nm461.getTree());
                    pushFollow(FOLLOW_lpar_in_attribute_extension4851);
                    lpar462=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar462.getTree());
                    pushFollow(FOLLOW_format_archetype_in_attribute_extension4853);
                    format_archetype463=format_archetype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, format_archetype463.getTree());
                    pushFollow(FOLLOW_comma_in_attribute_extension4855);
                    comma464=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma464.getTree());
                    pushFollow(FOLLOW_decimal_lit_in_attribute_extension4857);
                    decimal_lit465=decimal_lit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decimal_lit465.getTree());
                    pushFollow(FOLLOW_comma_in_attribute_extension4859);
                    comma466=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma466.getTree());
                    pushFollow(FOLLOW_decimal_lit_in_attribute_extension4861);
                    decimal_lit467=decimal_lit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decimal_lit467.getTree());
                    pushFollow(FOLLOW_rpar_in_attribute_extension4863);
                    rpar468=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar468.getTree());

                    }
                    break;
                case 14 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:920:4: attribute_leaf_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_leaf_nm_in_attribute_extension4868);
                    attribute_leaf_nm469=attribute_leaf_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_leaf_nm469.getTree());

                    }
                    break;
                case 15 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:921:4: attribute_malloc_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_malloc_nm_in_attribute_extension4873);
                    attribute_malloc_nm470=attribute_malloc_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_malloc_nm470.getTree());

                    }
                    break;
                case 16 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:922:4: attribute_mode_nm lpar identifier rpar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_mode_nm_in_attribute_extension4878);
                    attribute_mode_nm471=attribute_mode_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_mode_nm471.getTree());
                    pushFollow(FOLLOW_lpar_in_attribute_extension4880);
                    lpar472=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar472.getTree());
                    pushFollow(FOLLOW_identifier_in_attribute_extension4882);
                    identifier473=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier473.getTree());
                    pushFollow(FOLLOW_rpar_in_attribute_extension4884);
                    rpar474=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar474.getTree());

                    }
                    break;
                case 17 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:923:4: attribute_noinline_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_noinline_nm_in_attribute_extension4889);
                    attribute_noinline_nm475=attribute_noinline_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_noinline_nm475.getTree());

                    }
                    break;
                case 18 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:924:4: attribute_noreturn_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_noreturn_nm_in_attribute_extension4894);
                    attribute_noreturn_nm476=attribute_noreturn_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_noreturn_nm476.getTree());

                    }
                    break;
                case 19 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:925:4: attribute_used_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_used_nm_in_attribute_extension4899);
                    attribute_used_nm477=attribute_used_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_used_nm477.getTree());

                    }
                    break;
                case 20 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:926:4: attribute_unused_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_unused_nm_in_attribute_extension4904);
                    attribute_unused_nm478=attribute_unused_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_unused_nm478.getTree());

                    }
                    break;
                case 21 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:927:4: attribute_nonnull_nm ( lpar decimal_lit ( comma decimal_lit )* rpar )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_nonnull_nm_in_attribute_extension4909);
                    attribute_nonnull_nm479=attribute_nonnull_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_nonnull_nm479.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:927:25: ( lpar decimal_lit ( comma decimal_lit )* rpar )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==66) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:927:27: lpar decimal_lit ( comma decimal_lit )* rpar
                            {
                            pushFollow(FOLLOW_lpar_in_attribute_extension4913);
                            lpar480=lpar();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar480.getTree());
                            pushFollow(FOLLOW_decimal_lit_in_attribute_extension4915);
                            decimal_lit481=decimal_lit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, decimal_lit481.getTree());
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:927:44: ( comma decimal_lit )*
                            loop111:
                            do {
                                int alt111=2;
                                int LA111_0 = input.LA(1);

                                if ( (LA111_0==63) ) {
                                    alt111=1;
                                }


                                switch (alt111) {
                            	case 1 :
                            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:927:46: comma decimal_lit
                            	    {
                            	    pushFollow(FOLLOW_comma_in_attribute_extension4919);
                            	    comma482=comma();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma482.getTree());
                            	    pushFollow(FOLLOW_decimal_lit_in_attribute_extension4921);
                            	    decimal_lit483=decimal_lit();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, decimal_lit483.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop111;
                                }
                            } while (true);

                            pushFollow(FOLLOW_rpar_in_attribute_extension4926);
                            rpar484=rpar();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar484.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 22 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:928:4: attribute_nothrow_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_nothrow_nm_in_attribute_extension4934);
                    attribute_nothrow_nm485=attribute_nothrow_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_nothrow_nm485.getTree());

                    }
                    break;
                case 23 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:929:4: attribute_pure_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_pure_nm_in_attribute_extension4939);
                    attribute_pure_nm486=attribute_pure_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_pure_nm486.getTree());

                    }
                    break;
                case 24 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:930:4: attribute_trans_union_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_trans_union_nm_in_attribute_extension4944);
                    attribute_trans_union_nm487=attribute_trans_union_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_trans_union_nm487.getTree());

                    }
                    break;
                case 25 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:931:4: attribute_vector_size_nm lpar decimal_lit rpar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_vector_size_nm_in_attribute_extension4949);
                    attribute_vector_size_nm488=attribute_vector_size_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_vector_size_nm488.getTree());
                    pushFollow(FOLLOW_lpar_in_attribute_extension4951);
                    lpar489=lpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lpar489.getTree());
                    pushFollow(FOLLOW_decimal_lit_in_attribute_extension4953);
                    decimal_lit490=decimal_lit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decimal_lit490.getTree());
                    pushFollow(FOLLOW_rpar_in_attribute_extension4955);
                    rpar491=rpar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rpar491.getTree());

                    }
                    break;
                case 26 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:932:4: attribute_visibility_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_visibility_nm_in_attribute_extension4960);
                    attribute_visibility_nm492=attribute_visibility_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_visibility_nm492.getTree());

                    }
                    break;
                case 27 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:933:4: attribute_weak_nm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attribute_weak_nm_in_attribute_extension4965);
                    attribute_weak_nm493=attribute_weak_nm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_weak_nm493.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, attribute_extension_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_extension"

    public static class attribute_alias_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_alias_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:936:1: attribute_alias_nm : attribute_alias -> ^( NAME attribute_alias ) ;
    public final CLangParser.attribute_alias_nm_return attribute_alias_nm() throws RecognitionException {
        CLangParser.attribute_alias_nm_return retval = new CLangParser.attribute_alias_nm_return();
        retval.start = input.LT(1);
        int attribute_alias_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_alias_return attribute_alias494 = null;


        RewriteRuleSubtreeStream stream_attribute_alias=new RewriteRuleSubtreeStream(adaptor,"rule attribute_alias");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:937:2: ( attribute_alias -> ^( NAME attribute_alias ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:937:4: attribute_alias
            {
            pushFollow(FOLLOW_attribute_alias_in_attribute_alias_nm4976);
            attribute_alias494=attribute_alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_alias.add(attribute_alias494.getTree());


            // AST REWRITE
            // elements: attribute_alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 938:3: -> ^( NAME attribute_alias )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:938:6: ^( NAME attribute_alias )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_alias.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, attribute_alias_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_alias_nm"

    public static class attribute_alias_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_alias"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:941:1: attribute_alias : ( 'alias' | '__alias__' | '__alias' | 'alias__' );
    public final CLangParser.attribute_alias_return attribute_alias() throws RecognitionException {
        CLangParser.attribute_alias_return retval = new CLangParser.attribute_alias_return();
        retval.start = input.LT(1);
        int attribute_alias_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set495=null;

        CommonTree set495_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:942:2: ( 'alias' | '__alias__' | '__alias' | 'alias__' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set495=(Token)input.LT(1);
            if ( (input.LA(1)>=161 && input.LA(1)<=164) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set495));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, attribute_alias_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_alias"

    public static class attribute_aligned_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_aligned_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:948:1: attribute_aligned_nm : attribute_aligned -> ^( NAME attribute_aligned ) ;
    public final CLangParser.attribute_aligned_nm_return attribute_aligned_nm() throws RecognitionException {
        CLangParser.attribute_aligned_nm_return retval = new CLangParser.attribute_aligned_nm_return();
        retval.start = input.LT(1);
        int attribute_aligned_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_aligned_return attribute_aligned496 = null;


        RewriteRuleSubtreeStream stream_attribute_aligned=new RewriteRuleSubtreeStream(adaptor,"rule attribute_aligned");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:949:2: ( attribute_aligned -> ^( NAME attribute_aligned ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:949:4: attribute_aligned
            {
            pushFollow(FOLLOW_attribute_aligned_in_attribute_aligned_nm5025);
            attribute_aligned496=attribute_aligned();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_aligned.add(attribute_aligned496.getTree());


            // AST REWRITE
            // elements: attribute_aligned
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 950:3: -> ^( NAME attribute_aligned )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:950:6: ^( NAME attribute_aligned )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_aligned.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, attribute_aligned_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_aligned_nm"

    public static class attribute_aligned_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_aligned"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:953:1: attribute_aligned : ( '__aligned__' | '__aligned' | 'aligned__' | 'aligned' );
    public final CLangParser.attribute_aligned_return attribute_aligned() throws RecognitionException {
        CLangParser.attribute_aligned_return retval = new CLangParser.attribute_aligned_return();
        retval.start = input.LT(1);
        int attribute_aligned_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set497=null;

        CommonTree set497_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:954:2: ( '__aligned__' | '__aligned' | 'aligned__' | 'aligned' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set497=(Token)input.LT(1);
            if ( (input.LA(1)>=165 && input.LA(1)<=168) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set497));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, attribute_aligned_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_aligned"

    public static class attribute_always_inline_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_always_inline_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:967:1: attribute_always_inline_nm : attribute_always_inline -> ^( NAME attribute_always_inline ) ;
    public final CLangParser.attribute_always_inline_nm_return attribute_always_inline_nm() throws RecognitionException {
        CLangParser.attribute_always_inline_nm_return retval = new CLangParser.attribute_always_inline_nm_return();
        retval.start = input.LT(1);
        int attribute_always_inline_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_always_inline_return attribute_always_inline498 = null;


        RewriteRuleSubtreeStream stream_attribute_always_inline=new RewriteRuleSubtreeStream(adaptor,"rule attribute_always_inline");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:968:2: ( attribute_always_inline -> ^( NAME attribute_always_inline ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:968:4: attribute_always_inline
            {
            pushFollow(FOLLOW_attribute_always_inline_in_attribute_always_inline_nm5077);
            attribute_always_inline498=attribute_always_inline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_always_inline.add(attribute_always_inline498.getTree());


            // AST REWRITE
            // elements: attribute_always_inline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 969:3: -> ^( NAME attribute_always_inline )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:969:6: ^( NAME attribute_always_inline )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_always_inline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, attribute_always_inline_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_always_inline_nm"

    public static class attribute_always_inline_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_always_inline"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:972:1: attribute_always_inline : ( '__always_inline__' | '__always_inline' | 'always_inline__' | 'always_inline' );
    public final CLangParser.attribute_always_inline_return attribute_always_inline() throws RecognitionException {
        CLangParser.attribute_always_inline_return retval = new CLangParser.attribute_always_inline_return();
        retval.start = input.LT(1);
        int attribute_always_inline_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set499=null;

        CommonTree set499_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:973:2: ( '__always_inline__' | '__always_inline' | 'always_inline__' | 'always_inline' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set499=(Token)input.LT(1);
            if ( (input.LA(1)>=169 && input.LA(1)<=172) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set499));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, attribute_always_inline_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_always_inline"

    public static class attribute_cdecl_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_cdecl_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:979:1: attribute_cdecl_nm : attribute_cdecl -> ^( NAME attribute_cdecl ) ;
    public final CLangParser.attribute_cdecl_nm_return attribute_cdecl_nm() throws RecognitionException {
        CLangParser.attribute_cdecl_nm_return retval = new CLangParser.attribute_cdecl_nm_return();
        retval.start = input.LT(1);
        int attribute_cdecl_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_cdecl_return attribute_cdecl500 = null;


        RewriteRuleSubtreeStream stream_attribute_cdecl=new RewriteRuleSubtreeStream(adaptor,"rule attribute_cdecl");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:980:2: ( attribute_cdecl -> ^( NAME attribute_cdecl ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:980:4: attribute_cdecl
            {
            pushFollow(FOLLOW_attribute_cdecl_in_attribute_cdecl_nm5126);
            attribute_cdecl500=attribute_cdecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_cdecl.add(attribute_cdecl500.getTree());


            // AST REWRITE
            // elements: attribute_cdecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 981:3: -> ^( NAME attribute_cdecl )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:981:6: ^( NAME attribute_cdecl )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_cdecl.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, attribute_cdecl_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_cdecl_nm"

    public static class attribute_cdecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_cdecl"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:984:1: attribute_cdecl : ( 'cdecl' | '__cdecl__' | '__cdecl' | 'cdecl__' );
    public final CLangParser.attribute_cdecl_return attribute_cdecl() throws RecognitionException {
        CLangParser.attribute_cdecl_return retval = new CLangParser.attribute_cdecl_return();
        retval.start = input.LT(1);
        int attribute_cdecl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set501=null;

        CommonTree set501_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:985:2: ( 'cdecl' | '__cdecl__' | '__cdecl' | 'cdecl__' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set501=(Token)input.LT(1);
            if ( (input.LA(1)>=173 && input.LA(1)<=176) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set501));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, attribute_cdecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_cdecl"

    public static class attribute_cleanup_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_cleanup_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:991:1: attribute_cleanup_nm : attribute_cleanup -> ^( NAME attribute_cleanup ) ;
    public final CLangParser.attribute_cleanup_nm_return attribute_cleanup_nm() throws RecognitionException {
        CLangParser.attribute_cleanup_nm_return retval = new CLangParser.attribute_cleanup_nm_return();
        retval.start = input.LT(1);
        int attribute_cleanup_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_cleanup_return attribute_cleanup502 = null;


        RewriteRuleSubtreeStream stream_attribute_cleanup=new RewriteRuleSubtreeStream(adaptor,"rule attribute_cleanup");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:992:2: ( attribute_cleanup -> ^( NAME attribute_cleanup ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:992:4: attribute_cleanup
            {
            pushFollow(FOLLOW_attribute_cleanup_in_attribute_cleanup_nm5175);
            attribute_cleanup502=attribute_cleanup();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_cleanup.add(attribute_cleanup502.getTree());


            // AST REWRITE
            // elements: attribute_cleanup
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 993:3: -> ^( NAME attribute_cleanup )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:993:6: ^( NAME attribute_cleanup )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_cleanup.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, attribute_cleanup_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_cleanup_nm"

    public static class attribute_cleanup_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_cleanup"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:996:1: attribute_cleanup : ( '__cleanup__' | '__cleanup' | 'cleanup__' | 'cleanup' );
    public final CLangParser.attribute_cleanup_return attribute_cleanup() throws RecognitionException {
        CLangParser.attribute_cleanup_return retval = new CLangParser.attribute_cleanup_return();
        retval.start = input.LT(1);
        int attribute_cleanup_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set503=null;

        CommonTree set503_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:997:2: ( '__cleanup__' | '__cleanup' | 'cleanup__' | 'cleanup' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set503=(Token)input.LT(1);
            if ( (input.LA(1)>=177 && input.LA(1)<=180) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set503));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, attribute_cleanup_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_cleanup"

    public static class attribute_const_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_const_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1003:1: attribute_const_nm : attribute_const -> ^( NAME attribute_const ) ;
    public final CLangParser.attribute_const_nm_return attribute_const_nm() throws RecognitionException {
        CLangParser.attribute_const_nm_return retval = new CLangParser.attribute_const_nm_return();
        retval.start = input.LT(1);
        int attribute_const_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_const_return attribute_const504 = null;


        RewriteRuleSubtreeStream stream_attribute_const=new RewriteRuleSubtreeStream(adaptor,"rule attribute_const");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1004:2: ( attribute_const -> ^( NAME attribute_const ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1004:4: attribute_const
            {
            pushFollow(FOLLOW_attribute_const_in_attribute_const_nm5224);
            attribute_const504=attribute_const();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_const.add(attribute_const504.getTree());


            // AST REWRITE
            // elements: attribute_const
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1005:3: -> ^( NAME attribute_const )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1005:6: ^( NAME attribute_const )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_const.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, attribute_const_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_const_nm"

    public static class attribute_const_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_const"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1008:1: attribute_const : ( '__const__' | '__const' | 'const__' | 'const' );
    public final CLangParser.attribute_const_return attribute_const() throws RecognitionException {
        CLangParser.attribute_const_return retval = new CLangParser.attribute_const_return();
        retval.start = input.LT(1);
        int attribute_const_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set505=null;

        CommonTree set505_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1009:2: ( '__const__' | '__const' | 'const__' | 'const' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set505=(Token)input.LT(1);
            if ( input.LA(1)==97||(input.LA(1)>=142 && input.LA(1)<=144) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set505));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, attribute_const_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_const"

    public static class attribute_constructor_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_constructor_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1015:1: attribute_constructor_nm : attribute_constructor -> ^( NAME attribute_constructor ) ;
    public final CLangParser.attribute_constructor_nm_return attribute_constructor_nm() throws RecognitionException {
        CLangParser.attribute_constructor_nm_return retval = new CLangParser.attribute_constructor_nm_return();
        retval.start = input.LT(1);
        int attribute_constructor_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_constructor_return attribute_constructor506 = null;


        RewriteRuleSubtreeStream stream_attribute_constructor=new RewriteRuleSubtreeStream(adaptor,"rule attribute_constructor");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1016:2: ( attribute_constructor -> ^( NAME attribute_constructor ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1016:4: attribute_constructor
            {
            pushFollow(FOLLOW_attribute_constructor_in_attribute_constructor_nm5273);
            attribute_constructor506=attribute_constructor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_constructor.add(attribute_constructor506.getTree());


            // AST REWRITE
            // elements: attribute_constructor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1017:3: -> ^( NAME attribute_constructor )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1017:6: ^( NAME attribute_constructor )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_constructor.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, attribute_constructor_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_constructor_nm"

    public static class attribute_constructor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_constructor"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1020:1: attribute_constructor : ( '__constructor__' | '__constructor' | 'constructor__' | 'constructor' );
    public final CLangParser.attribute_constructor_return attribute_constructor() throws RecognitionException {
        CLangParser.attribute_constructor_return retval = new CLangParser.attribute_constructor_return();
        retval.start = input.LT(1);
        int attribute_constructor_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set507=null;

        CommonTree set507_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1021:2: ( '__constructor__' | '__constructor' | 'constructor__' | 'constructor' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set507=(Token)input.LT(1);
            if ( (input.LA(1)>=181 && input.LA(1)<=184) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set507));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, attribute_constructor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_constructor"

    public static class attribute_deprecated_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_deprecated_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1027:1: attribute_deprecated_nm : attribute_deprecated -> ^( NAME attribute_deprecated ) ;
    public final CLangParser.attribute_deprecated_nm_return attribute_deprecated_nm() throws RecognitionException {
        CLangParser.attribute_deprecated_nm_return retval = new CLangParser.attribute_deprecated_nm_return();
        retval.start = input.LT(1);
        int attribute_deprecated_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_deprecated_return attribute_deprecated508 = null;


        RewriteRuleSubtreeStream stream_attribute_deprecated=new RewriteRuleSubtreeStream(adaptor,"rule attribute_deprecated");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1028:2: ( attribute_deprecated -> ^( NAME attribute_deprecated ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1028:4: attribute_deprecated
            {
            pushFollow(FOLLOW_attribute_deprecated_in_attribute_deprecated_nm5322);
            attribute_deprecated508=attribute_deprecated();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_deprecated.add(attribute_deprecated508.getTree());


            // AST REWRITE
            // elements: attribute_deprecated
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1029:3: -> ^( NAME attribute_deprecated )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1029:6: ^( NAME attribute_deprecated )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_deprecated.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, attribute_deprecated_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_deprecated_nm"

    public static class attribute_deprecated_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_deprecated"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1032:1: attribute_deprecated : ( '__deprecated__' | '__deprecated' | 'deprecated__' | 'deprecated' );
    public final CLangParser.attribute_deprecated_return attribute_deprecated() throws RecognitionException {
        CLangParser.attribute_deprecated_return retval = new CLangParser.attribute_deprecated_return();
        retval.start = input.LT(1);
        int attribute_deprecated_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set509=null;

        CommonTree set509_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1033:2: ( '__deprecated__' | '__deprecated' | 'deprecated__' | 'deprecated' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set509=(Token)input.LT(1);
            if ( (input.LA(1)>=185 && input.LA(1)<=188) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set509));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, attribute_deprecated_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_deprecated"

    public static class attribute_destructor_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_destructor_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1039:1: attribute_destructor_nm : attribute_destructor -> ^( NAME attribute_destructor ) ;
    public final CLangParser.attribute_destructor_nm_return attribute_destructor_nm() throws RecognitionException {
        CLangParser.attribute_destructor_nm_return retval = new CLangParser.attribute_destructor_nm_return();
        retval.start = input.LT(1);
        int attribute_destructor_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_destructor_return attribute_destructor510 = null;


        RewriteRuleSubtreeStream stream_attribute_destructor=new RewriteRuleSubtreeStream(adaptor,"rule attribute_destructor");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1040:2: ( attribute_destructor -> ^( NAME attribute_destructor ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1040:4: attribute_destructor
            {
            pushFollow(FOLLOW_attribute_destructor_in_attribute_destructor_nm5371);
            attribute_destructor510=attribute_destructor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_destructor.add(attribute_destructor510.getTree());


            // AST REWRITE
            // elements: attribute_destructor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1041:3: -> ^( NAME attribute_destructor )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1041:6: ^( NAME attribute_destructor )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_destructor.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, attribute_destructor_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_destructor_nm"

    public static class attribute_destructor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_destructor"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1044:1: attribute_destructor : ( '__destructor__' | '__destructor' | 'destructor__' | 'destructor' );
    public final CLangParser.attribute_destructor_return attribute_destructor() throws RecognitionException {
        CLangParser.attribute_destructor_return retval = new CLangParser.attribute_destructor_return();
        retval.start = input.LT(1);
        int attribute_destructor_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set511=null;

        CommonTree set511_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1045:2: ( '__destructor__' | '__destructor' | 'destructor__' | 'destructor' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set511=(Token)input.LT(1);
            if ( (input.LA(1)>=189 && input.LA(1)<=192) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set511));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, attribute_destructor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_destructor"

    public static class attribute_dllexport_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_dllexport_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1051:1: attribute_dllexport_nm : attribute_dllexport -> ^( NAME attribute_dllexport ) ;
    public final CLangParser.attribute_dllexport_nm_return attribute_dllexport_nm() throws RecognitionException {
        CLangParser.attribute_dllexport_nm_return retval = new CLangParser.attribute_dllexport_nm_return();
        retval.start = input.LT(1);
        int attribute_dllexport_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_dllexport_return attribute_dllexport512 = null;


        RewriteRuleSubtreeStream stream_attribute_dllexport=new RewriteRuleSubtreeStream(adaptor,"rule attribute_dllexport");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1052:2: ( attribute_dllexport -> ^( NAME attribute_dllexport ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1052:4: attribute_dllexport
            {
            pushFollow(FOLLOW_attribute_dllexport_in_attribute_dllexport_nm5420);
            attribute_dllexport512=attribute_dllexport();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_dllexport.add(attribute_dllexport512.getTree());


            // AST REWRITE
            // elements: attribute_dllexport
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1053:3: -> ^( NAME attribute_dllexport )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1053:6: ^( NAME attribute_dllexport )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_dllexport.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, attribute_dllexport_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_dllexport_nm"

    public static class attribute_dllexport_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_dllexport"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1056:1: attribute_dllexport : ( '__dllexport__' | '__dllexport' | 'dllexport__' | 'dllexport' );
    public final CLangParser.attribute_dllexport_return attribute_dllexport() throws RecognitionException {
        CLangParser.attribute_dllexport_return retval = new CLangParser.attribute_dllexport_return();
        retval.start = input.LT(1);
        int attribute_dllexport_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set513=null;

        CommonTree set513_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1057:2: ( '__dllexport__' | '__dllexport' | 'dllexport__' | 'dllexport' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set513=(Token)input.LT(1);
            if ( (input.LA(1)>=193 && input.LA(1)<=196) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set513));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, attribute_dllexport_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_dllexport"

    public static class attribute_dllimport_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_dllimport_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1063:1: attribute_dllimport_nm : attribute_dllimport -> ^( NAME attribute_dllimport ) ;
    public final CLangParser.attribute_dllimport_nm_return attribute_dllimport_nm() throws RecognitionException {
        CLangParser.attribute_dllimport_nm_return retval = new CLangParser.attribute_dllimport_nm_return();
        retval.start = input.LT(1);
        int attribute_dllimport_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_dllimport_return attribute_dllimport514 = null;


        RewriteRuleSubtreeStream stream_attribute_dllimport=new RewriteRuleSubtreeStream(adaptor,"rule attribute_dllimport");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1064:2: ( attribute_dllimport -> ^( NAME attribute_dllimport ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1064:4: attribute_dllimport
            {
            pushFollow(FOLLOW_attribute_dllimport_in_attribute_dllimport_nm5469);
            attribute_dllimport514=attribute_dllimport();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_dllimport.add(attribute_dllimport514.getTree());


            // AST REWRITE
            // elements: attribute_dllimport
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1065:3: -> ^( NAME attribute_dllimport )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1065:6: ^( NAME attribute_dllimport )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_dllimport.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, attribute_dllimport_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_dllimport_nm"

    public static class attribute_dllimport_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_dllimport"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1068:1: attribute_dllimport : ( '__dllimport__' | '__dllimport' | 'dllimport__' | 'dllimport' );
    public final CLangParser.attribute_dllimport_return attribute_dllimport() throws RecognitionException {
        CLangParser.attribute_dllimport_return retval = new CLangParser.attribute_dllimport_return();
        retval.start = input.LT(1);
        int attribute_dllimport_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set515=null;

        CommonTree set515_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1069:2: ( '__dllimport__' | '__dllimport' | 'dllimport__' | 'dllimport' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set515=(Token)input.LT(1);
            if ( (input.LA(1)>=197 && input.LA(1)<=200) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set515));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, attribute_dllimport_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_dllimport"

    public static class attribute_eightbit_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_eightbit_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1075:1: attribute_eightbit_nm : attribute_eightbit -> ^( attribute_eightbit ) ;
    public final CLangParser.attribute_eightbit_nm_return attribute_eightbit_nm() throws RecognitionException {
        CLangParser.attribute_eightbit_nm_return retval = new CLangParser.attribute_eightbit_nm_return();
        retval.start = input.LT(1);
        int attribute_eightbit_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_eightbit_return attribute_eightbit516 = null;


        RewriteRuleSubtreeStream stream_attribute_eightbit=new RewriteRuleSubtreeStream(adaptor,"rule attribute_eightbit");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1076:2: ( attribute_eightbit -> ^( attribute_eightbit ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1076:4: attribute_eightbit
            {
            pushFollow(FOLLOW_attribute_eightbit_in_attribute_eightbit_nm5518);
            attribute_eightbit516=attribute_eightbit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_eightbit.add(attribute_eightbit516.getTree());


            // AST REWRITE
            // elements: attribute_eightbit
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1077:3: -> ^( attribute_eightbit )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1077:6: ^( attribute_eightbit )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_attribute_eightbit.nextNode(), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, attribute_eightbit_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_eightbit_nm"

    public static class attribute_eightbit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_eightbit"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1080:1: attribute_eightbit : ( '__eightbit__' | '__eightbit' | 'eightbit__' | 'eightbit' );
    public final CLangParser.attribute_eightbit_return attribute_eightbit() throws RecognitionException {
        CLangParser.attribute_eightbit_return retval = new CLangParser.attribute_eightbit_return();
        retval.start = input.LT(1);
        int attribute_eightbit_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set517=null;

        CommonTree set517_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1081:2: ( '__eightbit__' | '__eightbit' | 'eightbit__' | 'eightbit' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set517=(Token)input.LT(1);
            if ( (input.LA(1)>=201 && input.LA(1)<=204) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set517));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, attribute_eightbit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_eightbit"

    public static class attribute_format_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_format_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1087:1: attribute_format_nm : attribute_format -> ^( NAME attribute_format ) ;
    public final CLangParser.attribute_format_nm_return attribute_format_nm() throws RecognitionException {
        CLangParser.attribute_format_nm_return retval = new CLangParser.attribute_format_nm_return();
        retval.start = input.LT(1);
        int attribute_format_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_format_return attribute_format518 = null;


        RewriteRuleSubtreeStream stream_attribute_format=new RewriteRuleSubtreeStream(adaptor,"rule attribute_format");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1088:2: ( attribute_format -> ^( NAME attribute_format ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1088:4: attribute_format
            {
            pushFollow(FOLLOW_attribute_format_in_attribute_format_nm5565);
            attribute_format518=attribute_format();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_format.add(attribute_format518.getTree());


            // AST REWRITE
            // elements: attribute_format
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1089:3: -> ^( NAME attribute_format )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1089:6: ^( NAME attribute_format )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_format.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, attribute_format_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_format_nm"

    public static class attribute_format_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_format"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1092:1: attribute_format : ( '__format__' | '__format' | 'format__' | 'format' );
    public final CLangParser.attribute_format_return attribute_format() throws RecognitionException {
        CLangParser.attribute_format_return retval = new CLangParser.attribute_format_return();
        retval.start = input.LT(1);
        int attribute_format_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set519=null;

        CommonTree set519_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1093:2: ( '__format__' | '__format' | 'format__' | 'format' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set519=(Token)input.LT(1);
            if ( (input.LA(1)>=205 && input.LA(1)<=208) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set519));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, attribute_format_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_format"

    public static class format_archetype_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "format_archetype_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1099:1: format_archetype_nm : format_archetype -> ^( NAME format_archetype ) ;
    public final CLangParser.format_archetype_nm_return format_archetype_nm() throws RecognitionException {
        CLangParser.format_archetype_nm_return retval = new CLangParser.format_archetype_nm_return();
        retval.start = input.LT(1);
        int format_archetype_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.format_archetype_return format_archetype520 = null;


        RewriteRuleSubtreeStream stream_format_archetype=new RewriteRuleSubtreeStream(adaptor,"rule format_archetype");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1100:2: ( format_archetype -> ^( NAME format_archetype ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1100:4: format_archetype
            {
            pushFollow(FOLLOW_format_archetype_in_format_archetype_nm5614);
            format_archetype520=format_archetype();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_format_archetype.add(format_archetype520.getTree());


            // AST REWRITE
            // elements: format_archetype
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1101:3: -> ^( NAME format_archetype )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1101:6: ^( NAME format_archetype )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_format_archetype.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, format_archetype_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "format_archetype_nm"

    public static class format_archetype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "format_archetype"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1104:1: format_archetype : ( 'printf' | '__printf__' | '__printf' | 'printf__' | 'scanf' | '__scanf__' | '__scanf' | 'scanf__' | 'strftime' | '__strftime__' | '__strftime' | 'strftime__' | 'strfmon' | '__strfmon__' | '__strfmon' | 'strfmon__' );
    public final CLangParser.format_archetype_return format_archetype() throws RecognitionException {
        CLangParser.format_archetype_return retval = new CLangParser.format_archetype_return();
        retval.start = input.LT(1);
        int format_archetype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set521=null;

        CommonTree set521_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1105:2: ( 'printf' | '__printf__' | '__printf' | 'printf__' | 'scanf' | '__scanf__' | '__scanf' | 'scanf__' | 'strftime' | '__strftime__' | '__strftime' | 'strftime__' | 'strfmon' | '__strfmon__' | '__strfmon' | 'strfmon__' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set521=(Token)input.LT(1);
            if ( (input.LA(1)>=209 && input.LA(1)<=224) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set521));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, format_archetype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "format_archetype"

    public static class attribute_leaf_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_leaf_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1123:1: attribute_leaf_nm : attribute_leaf -> ^( NAME attribute_leaf ) ;
    public final CLangParser.attribute_leaf_nm_return attribute_leaf_nm() throws RecognitionException {
        CLangParser.attribute_leaf_nm_return retval = new CLangParser.attribute_leaf_nm_return();
        retval.start = input.LT(1);
        int attribute_leaf_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_leaf_return attribute_leaf522 = null;


        RewriteRuleSubtreeStream stream_attribute_leaf=new RewriteRuleSubtreeStream(adaptor,"rule attribute_leaf");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1124:2: ( attribute_leaf -> ^( NAME attribute_leaf ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1124:4: attribute_leaf
            {
            pushFollow(FOLLOW_attribute_leaf_in_attribute_leaf_nm5723);
            attribute_leaf522=attribute_leaf();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_leaf.add(attribute_leaf522.getTree());


            // AST REWRITE
            // elements: attribute_leaf
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1125:3: -> ^( NAME attribute_leaf )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1125:6: ^( NAME attribute_leaf )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_leaf.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, attribute_leaf_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_leaf_nm"

    public static class attribute_leaf_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_leaf"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1128:1: attribute_leaf : ( '__leaf__' | '__leaf' | 'leaf__' | 'leaf' );
    public final CLangParser.attribute_leaf_return attribute_leaf() throws RecognitionException {
        CLangParser.attribute_leaf_return retval = new CLangParser.attribute_leaf_return();
        retval.start = input.LT(1);
        int attribute_leaf_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set523=null;

        CommonTree set523_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1129:2: ( '__leaf__' | '__leaf' | 'leaf__' | 'leaf' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set523=(Token)input.LT(1);
            if ( (input.LA(1)>=225 && input.LA(1)<=228) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set523));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, attribute_leaf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_leaf"

    public static class attribute_malloc_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_malloc_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1135:1: attribute_malloc_nm : attribute_malloc -> ^( NAME attribute_malloc ) ;
    public final CLangParser.attribute_malloc_nm_return attribute_malloc_nm() throws RecognitionException {
        CLangParser.attribute_malloc_nm_return retval = new CLangParser.attribute_malloc_nm_return();
        retval.start = input.LT(1);
        int attribute_malloc_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_malloc_return attribute_malloc524 = null;


        RewriteRuleSubtreeStream stream_attribute_malloc=new RewriteRuleSubtreeStream(adaptor,"rule attribute_malloc");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1136:2: ( attribute_malloc -> ^( NAME attribute_malloc ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1136:4: attribute_malloc
            {
            pushFollow(FOLLOW_attribute_malloc_in_attribute_malloc_nm5772);
            attribute_malloc524=attribute_malloc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_malloc.add(attribute_malloc524.getTree());


            // AST REWRITE
            // elements: attribute_malloc
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1137:3: -> ^( NAME attribute_malloc )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1137:6: ^( NAME attribute_malloc )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_malloc.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, attribute_malloc_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_malloc_nm"

    public static class attribute_malloc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_malloc"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1140:1: attribute_malloc : ( '__malloc__' | '__malloc' | 'malloc__' | 'malloc' );
    public final CLangParser.attribute_malloc_return attribute_malloc() throws RecognitionException {
        CLangParser.attribute_malloc_return retval = new CLangParser.attribute_malloc_return();
        retval.start = input.LT(1);
        int attribute_malloc_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set525=null;

        CommonTree set525_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1141:2: ( '__malloc__' | '__malloc' | 'malloc__' | 'malloc' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set525=(Token)input.LT(1);
            if ( (input.LA(1)>=229 && input.LA(1)<=232) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set525));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, attribute_malloc_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_malloc"

    public static class attribute_noinline_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_noinline_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1147:1: attribute_noinline_nm : attribute_noinline -> ^( NAME attribute_noinline ) ;
    public final CLangParser.attribute_noinline_nm_return attribute_noinline_nm() throws RecognitionException {
        CLangParser.attribute_noinline_nm_return retval = new CLangParser.attribute_noinline_nm_return();
        retval.start = input.LT(1);
        int attribute_noinline_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_noinline_return attribute_noinline526 = null;


        RewriteRuleSubtreeStream stream_attribute_noinline=new RewriteRuleSubtreeStream(adaptor,"rule attribute_noinline");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1148:2: ( attribute_noinline -> ^( NAME attribute_noinline ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1148:4: attribute_noinline
            {
            pushFollow(FOLLOW_attribute_noinline_in_attribute_noinline_nm5821);
            attribute_noinline526=attribute_noinline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_noinline.add(attribute_noinline526.getTree());


            // AST REWRITE
            // elements: attribute_noinline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1149:3: -> ^( NAME attribute_noinline )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1149:6: ^( NAME attribute_noinline )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_noinline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, attribute_noinline_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_noinline_nm"

    public static class attribute_noinline_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_noinline"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1152:1: attribute_noinline : ( '__noinline__' | '__noinline' | 'noinline__' | 'noinline' );
    public final CLangParser.attribute_noinline_return attribute_noinline() throws RecognitionException {
        CLangParser.attribute_noinline_return retval = new CLangParser.attribute_noinline_return();
        retval.start = input.LT(1);
        int attribute_noinline_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set527=null;

        CommonTree set527_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1153:2: ( '__noinline__' | '__noinline' | 'noinline__' | 'noinline' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set527=(Token)input.LT(1);
            if ( (input.LA(1)>=233 && input.LA(1)<=236) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set527));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, attribute_noinline_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_noinline"

    public static class attribute_noreturn_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_noreturn_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1159:1: attribute_noreturn_nm : attribute_noreturn -> ^( NAME attribute_noreturn ) ;
    public final CLangParser.attribute_noreturn_nm_return attribute_noreturn_nm() throws RecognitionException {
        CLangParser.attribute_noreturn_nm_return retval = new CLangParser.attribute_noreturn_nm_return();
        retval.start = input.LT(1);
        int attribute_noreturn_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_noreturn_return attribute_noreturn528 = null;


        RewriteRuleSubtreeStream stream_attribute_noreturn=new RewriteRuleSubtreeStream(adaptor,"rule attribute_noreturn");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1160:2: ( attribute_noreturn -> ^( NAME attribute_noreturn ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1160:4: attribute_noreturn
            {
            pushFollow(FOLLOW_attribute_noreturn_in_attribute_noreturn_nm5870);
            attribute_noreturn528=attribute_noreturn();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_noreturn.add(attribute_noreturn528.getTree());


            // AST REWRITE
            // elements: attribute_noreturn
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1161:3: -> ^( NAME attribute_noreturn )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1161:6: ^( NAME attribute_noreturn )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_noreturn.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, attribute_noreturn_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_noreturn_nm"

    public static class attribute_noreturn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_noreturn"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1164:1: attribute_noreturn : ( '__noreturn__' | '__noreturn' | 'noreturn__' | 'noreturn' );
    public final CLangParser.attribute_noreturn_return attribute_noreturn() throws RecognitionException {
        CLangParser.attribute_noreturn_return retval = new CLangParser.attribute_noreturn_return();
        retval.start = input.LT(1);
        int attribute_noreturn_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set529=null;

        CommonTree set529_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1165:2: ( '__noreturn__' | '__noreturn' | 'noreturn__' | 'noreturn' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set529=(Token)input.LT(1);
            if ( input.LA(1)==99||(input.LA(1)>=237 && input.LA(1)<=239) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set529));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, attribute_noreturn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_noreturn"

    public static class attribute_used_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_used_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1171:1: attribute_used_nm : attribute_used -> ^( NAME attribute_used ) ;
    public final CLangParser.attribute_used_nm_return attribute_used_nm() throws RecognitionException {
        CLangParser.attribute_used_nm_return retval = new CLangParser.attribute_used_nm_return();
        retval.start = input.LT(1);
        int attribute_used_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_used_return attribute_used530 = null;


        RewriteRuleSubtreeStream stream_attribute_used=new RewriteRuleSubtreeStream(adaptor,"rule attribute_used");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1172:2: ( attribute_used -> ^( NAME attribute_used ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1172:4: attribute_used
            {
            pushFollow(FOLLOW_attribute_used_in_attribute_used_nm5919);
            attribute_used530=attribute_used();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_used.add(attribute_used530.getTree());


            // AST REWRITE
            // elements: attribute_used
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1173:3: -> ^( NAME attribute_used )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1173:6: ^( NAME attribute_used )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_used.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, attribute_used_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_used_nm"

    public static class attribute_used_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_used"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1176:1: attribute_used : ( '__used__' | '__used' | 'used__' | 'used' );
    public final CLangParser.attribute_used_return attribute_used() throws RecognitionException {
        CLangParser.attribute_used_return retval = new CLangParser.attribute_used_return();
        retval.start = input.LT(1);
        int attribute_used_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set531=null;

        CommonTree set531_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1177:2: ( '__used__' | '__used' | 'used__' | 'used' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set531=(Token)input.LT(1);
            if ( (input.LA(1)>=240 && input.LA(1)<=243) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set531));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, attribute_used_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_used"

    public static class attribute_unused_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_unused_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1183:1: attribute_unused_nm : attribute_unused -> ^( NAME attribute_unused ) ;
    public final CLangParser.attribute_unused_nm_return attribute_unused_nm() throws RecognitionException {
        CLangParser.attribute_unused_nm_return retval = new CLangParser.attribute_unused_nm_return();
        retval.start = input.LT(1);
        int attribute_unused_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_unused_return attribute_unused532 = null;


        RewriteRuleSubtreeStream stream_attribute_unused=new RewriteRuleSubtreeStream(adaptor,"rule attribute_unused");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1184:2: ( attribute_unused -> ^( NAME attribute_unused ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1184:4: attribute_unused
            {
            pushFollow(FOLLOW_attribute_unused_in_attribute_unused_nm5968);
            attribute_unused532=attribute_unused();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_unused.add(attribute_unused532.getTree());


            // AST REWRITE
            // elements: attribute_unused
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1185:3: -> ^( NAME attribute_unused )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1185:6: ^( NAME attribute_unused )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_unused.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, attribute_unused_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_unused_nm"

    public static class attribute_unused_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_unused"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1188:1: attribute_unused : ( '__unused__' | '__unused' | 'unused__' | 'unused' );
    public final CLangParser.attribute_unused_return attribute_unused() throws RecognitionException {
        CLangParser.attribute_unused_return retval = new CLangParser.attribute_unused_return();
        retval.start = input.LT(1);
        int attribute_unused_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set533=null;

        CommonTree set533_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1189:2: ( '__unused__' | '__unused' | 'unused__' | 'unused' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set533=(Token)input.LT(1);
            if ( (input.LA(1)>=244 && input.LA(1)<=247) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set533));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, attribute_unused_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_unused"

    public static class attribute_mode_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_mode_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1195:1: attribute_mode_nm : attribute_mode -> ^( NAME attribute_mode ) ;
    public final CLangParser.attribute_mode_nm_return attribute_mode_nm() throws RecognitionException {
        CLangParser.attribute_mode_nm_return retval = new CLangParser.attribute_mode_nm_return();
        retval.start = input.LT(1);
        int attribute_mode_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_mode_return attribute_mode534 = null;


        RewriteRuleSubtreeStream stream_attribute_mode=new RewriteRuleSubtreeStream(adaptor,"rule attribute_mode");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1196:2: ( attribute_mode -> ^( NAME attribute_mode ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1196:4: attribute_mode
            {
            pushFollow(FOLLOW_attribute_mode_in_attribute_mode_nm6017);
            attribute_mode534=attribute_mode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_mode.add(attribute_mode534.getTree());


            // AST REWRITE
            // elements: attribute_mode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1197:3: -> ^( NAME attribute_mode )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1197:6: ^( NAME attribute_mode )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_mode.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, attribute_mode_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_mode_nm"

    public static class attribute_mode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_mode"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1200:1: attribute_mode : ( '__mode__' | '__mode' | 'mode__' | 'mode' );
    public final CLangParser.attribute_mode_return attribute_mode() throws RecognitionException {
        CLangParser.attribute_mode_return retval = new CLangParser.attribute_mode_return();
        retval.start = input.LT(1);
        int attribute_mode_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set535=null;

        CommonTree set535_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1201:2: ( '__mode__' | '__mode' | 'mode__' | 'mode' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set535=(Token)input.LT(1);
            if ( (input.LA(1)>=248 && input.LA(1)<=251) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set535));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, attribute_mode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_mode"

    public static class attribute_nonnull_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_nonnull_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1207:1: attribute_nonnull_nm : attribute_nonnull -> ^( NAME attribute_nonnull ) ;
    public final CLangParser.attribute_nonnull_nm_return attribute_nonnull_nm() throws RecognitionException {
        CLangParser.attribute_nonnull_nm_return retval = new CLangParser.attribute_nonnull_nm_return();
        retval.start = input.LT(1);
        int attribute_nonnull_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_nonnull_return attribute_nonnull536 = null;


        RewriteRuleSubtreeStream stream_attribute_nonnull=new RewriteRuleSubtreeStream(adaptor,"rule attribute_nonnull");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1208:2: ( attribute_nonnull -> ^( NAME attribute_nonnull ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1208:4: attribute_nonnull
            {
            pushFollow(FOLLOW_attribute_nonnull_in_attribute_nonnull_nm6066);
            attribute_nonnull536=attribute_nonnull();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_nonnull.add(attribute_nonnull536.getTree());


            // AST REWRITE
            // elements: attribute_nonnull
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1209:3: -> ^( NAME attribute_nonnull )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1209:6: ^( NAME attribute_nonnull )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_nonnull.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, attribute_nonnull_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_nonnull_nm"

    public static class attribute_nonnull_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_nonnull"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1212:1: attribute_nonnull : ( '__nonnull__' | '__nonnull' | 'nonnull__' | 'nonnull' );
    public final CLangParser.attribute_nonnull_return attribute_nonnull() throws RecognitionException {
        CLangParser.attribute_nonnull_return retval = new CLangParser.attribute_nonnull_return();
        retval.start = input.LT(1);
        int attribute_nonnull_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set537=null;

        CommonTree set537_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1213:2: ( '__nonnull__' | '__nonnull' | 'nonnull__' | 'nonnull' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set537=(Token)input.LT(1);
            if ( (input.LA(1)>=252 && input.LA(1)<=255) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set537));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, attribute_nonnull_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_nonnull"

    public static class attribute_nothrow_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_nothrow_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1219:1: attribute_nothrow_nm : attribute_nothrow -> ^( NAME attribute_nothrow ) ;
    public final CLangParser.attribute_nothrow_nm_return attribute_nothrow_nm() throws RecognitionException {
        CLangParser.attribute_nothrow_nm_return retval = new CLangParser.attribute_nothrow_nm_return();
        retval.start = input.LT(1);
        int attribute_nothrow_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_nothrow_return attribute_nothrow538 = null;


        RewriteRuleSubtreeStream stream_attribute_nothrow=new RewriteRuleSubtreeStream(adaptor,"rule attribute_nothrow");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1220:2: ( attribute_nothrow -> ^( NAME attribute_nothrow ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1220:4: attribute_nothrow
            {
            pushFollow(FOLLOW_attribute_nothrow_in_attribute_nothrow_nm6115);
            attribute_nothrow538=attribute_nothrow();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_nothrow.add(attribute_nothrow538.getTree());


            // AST REWRITE
            // elements: attribute_nothrow
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1221:3: -> ^( NAME attribute_nothrow )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1221:6: ^( NAME attribute_nothrow )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_nothrow.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, attribute_nothrow_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_nothrow_nm"

    public static class attribute_nothrow_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_nothrow"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1224:1: attribute_nothrow : ( '__nothrow__' | '__nothrow' | 'nothrow__' | 'nothrow' );
    public final CLangParser.attribute_nothrow_return attribute_nothrow() throws RecognitionException {
        CLangParser.attribute_nothrow_return retval = new CLangParser.attribute_nothrow_return();
        retval.start = input.LT(1);
        int attribute_nothrow_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set539=null;

        CommonTree set539_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1225:2: ( '__nothrow__' | '__nothrow' | 'nothrow__' | 'nothrow' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set539=(Token)input.LT(1);
            if ( (input.LA(1)>=256 && input.LA(1)<=259) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set539));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, attribute_nothrow_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_nothrow"

    public static class attribute_pure_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_pure_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1231:1: attribute_pure_nm : attribute_pure -> ^( NAME attribute_pure ) ;
    public final CLangParser.attribute_pure_nm_return attribute_pure_nm() throws RecognitionException {
        CLangParser.attribute_pure_nm_return retval = new CLangParser.attribute_pure_nm_return();
        retval.start = input.LT(1);
        int attribute_pure_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_pure_return attribute_pure540 = null;


        RewriteRuleSubtreeStream stream_attribute_pure=new RewriteRuleSubtreeStream(adaptor,"rule attribute_pure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1232:2: ( attribute_pure -> ^( NAME attribute_pure ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1232:4: attribute_pure
            {
            pushFollow(FOLLOW_attribute_pure_in_attribute_pure_nm6164);
            attribute_pure540=attribute_pure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_pure.add(attribute_pure540.getTree());


            // AST REWRITE
            // elements: attribute_pure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1233:3: -> ^( NAME attribute_pure )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1233:6: ^( NAME attribute_pure )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_pure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, attribute_pure_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_pure_nm"

    public static class attribute_pure_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_pure"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1236:1: attribute_pure : ( '__pure__' | '__pure' | 'pure__' | 'pure' );
    public final CLangParser.attribute_pure_return attribute_pure() throws RecognitionException {
        CLangParser.attribute_pure_return retval = new CLangParser.attribute_pure_return();
        retval.start = input.LT(1);
        int attribute_pure_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set541=null;

        CommonTree set541_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1237:2: ( '__pure__' | '__pure' | 'pure__' | 'pure' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set541=(Token)input.LT(1);
            if ( (input.LA(1)>=260 && input.LA(1)<=263) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set541));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, attribute_pure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_pure"

    public static class attribute_trans_union_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_trans_union_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1243:1: attribute_trans_union_nm : attribute_trans_union -> ^( NAME attribute_trans_union ) ;
    public final CLangParser.attribute_trans_union_nm_return attribute_trans_union_nm() throws RecognitionException {
        CLangParser.attribute_trans_union_nm_return retval = new CLangParser.attribute_trans_union_nm_return();
        retval.start = input.LT(1);
        int attribute_trans_union_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_trans_union_return attribute_trans_union542 = null;


        RewriteRuleSubtreeStream stream_attribute_trans_union=new RewriteRuleSubtreeStream(adaptor,"rule attribute_trans_union");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1244:2: ( attribute_trans_union -> ^( NAME attribute_trans_union ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1244:4: attribute_trans_union
            {
            pushFollow(FOLLOW_attribute_trans_union_in_attribute_trans_union_nm6213);
            attribute_trans_union542=attribute_trans_union();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_trans_union.add(attribute_trans_union542.getTree());


            // AST REWRITE
            // elements: attribute_trans_union
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1245:3: -> ^( NAME attribute_trans_union )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1245:6: ^( NAME attribute_trans_union )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_trans_union.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, attribute_trans_union_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_trans_union_nm"

    public static class attribute_trans_union_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_trans_union"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1248:1: attribute_trans_union : ( '__transparent_union__' | '__transparent_union' | 'transparent_union__' | 'transparent_union' );
    public final CLangParser.attribute_trans_union_return attribute_trans_union() throws RecognitionException {
        CLangParser.attribute_trans_union_return retval = new CLangParser.attribute_trans_union_return();
        retval.start = input.LT(1);
        int attribute_trans_union_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set543=null;

        CommonTree set543_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1249:2: ( '__transparent_union__' | '__transparent_union' | 'transparent_union__' | 'transparent_union' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set543=(Token)input.LT(1);
            if ( (input.LA(1)>=264 && input.LA(1)<=267) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set543));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, attribute_trans_union_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_trans_union"

    public static class attribute_vector_size_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_vector_size_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1255:1: attribute_vector_size_nm : attribute_vector_size -> ^( NAME attribute_vector_size ) ;
    public final CLangParser.attribute_vector_size_nm_return attribute_vector_size_nm() throws RecognitionException {
        CLangParser.attribute_vector_size_nm_return retval = new CLangParser.attribute_vector_size_nm_return();
        retval.start = input.LT(1);
        int attribute_vector_size_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_vector_size_return attribute_vector_size544 = null;


        RewriteRuleSubtreeStream stream_attribute_vector_size=new RewriteRuleSubtreeStream(adaptor,"rule attribute_vector_size");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1256:2: ( attribute_vector_size -> ^( NAME attribute_vector_size ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1256:4: attribute_vector_size
            {
            pushFollow(FOLLOW_attribute_vector_size_in_attribute_vector_size_nm6262);
            attribute_vector_size544=attribute_vector_size();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_vector_size.add(attribute_vector_size544.getTree());


            // AST REWRITE
            // elements: attribute_vector_size
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1257:3: -> ^( NAME attribute_vector_size )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1257:6: ^( NAME attribute_vector_size )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_vector_size.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, attribute_vector_size_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_vector_size_nm"

    public static class attribute_vector_size_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_vector_size"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1260:1: attribute_vector_size : ( '__vector_size__' | '__vector_size' | 'vector_size__' | 'vector_size' );
    public final CLangParser.attribute_vector_size_return attribute_vector_size() throws RecognitionException {
        CLangParser.attribute_vector_size_return retval = new CLangParser.attribute_vector_size_return();
        retval.start = input.LT(1);
        int attribute_vector_size_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set545=null;

        CommonTree set545_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1261:2: ( '__vector_size__' | '__vector_size' | 'vector_size__' | 'vector_size' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set545=(Token)input.LT(1);
            if ( (input.LA(1)>=268 && input.LA(1)<=271) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set545));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, attribute_vector_size_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_vector_size"

    public static class attribute_visibility_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_visibility_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1267:1: attribute_visibility_nm : attribute_visibility -> ^( NAME attribute_visibility ) ;
    public final CLangParser.attribute_visibility_nm_return attribute_visibility_nm() throws RecognitionException {
        CLangParser.attribute_visibility_nm_return retval = new CLangParser.attribute_visibility_nm_return();
        retval.start = input.LT(1);
        int attribute_visibility_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_visibility_return attribute_visibility546 = null;


        RewriteRuleSubtreeStream stream_attribute_visibility=new RewriteRuleSubtreeStream(adaptor,"rule attribute_visibility");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1268:2: ( attribute_visibility -> ^( NAME attribute_visibility ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1268:4: attribute_visibility
            {
            pushFollow(FOLLOW_attribute_visibility_in_attribute_visibility_nm6311);
            attribute_visibility546=attribute_visibility();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_visibility.add(attribute_visibility546.getTree());


            // AST REWRITE
            // elements: attribute_visibility
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1269:3: -> ^( NAME attribute_visibility )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1269:6: ^( NAME attribute_visibility )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_visibility.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, attribute_visibility_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_visibility_nm"

    public static class attribute_visibility_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_visibility"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1272:1: attribute_visibility : ( '__visibility__' | '__visibility' | 'visibility__' | 'visibility' );
    public final CLangParser.attribute_visibility_return attribute_visibility() throws RecognitionException {
        CLangParser.attribute_visibility_return retval = new CLangParser.attribute_visibility_return();
        retval.start = input.LT(1);
        int attribute_visibility_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set547=null;

        CommonTree set547_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1273:2: ( '__visibility__' | '__visibility' | 'visibility__' | 'visibility' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set547=(Token)input.LT(1);
            if ( (input.LA(1)>=272 && input.LA(1)<=275) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set547));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, attribute_visibility_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_visibility"

    public static class attribute_weak_nm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_weak_nm"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1279:1: attribute_weak_nm : attribute_weak -> ^( NAME attribute_weak ) ;
    public final CLangParser.attribute_weak_nm_return attribute_weak_nm() throws RecognitionException {
        CLangParser.attribute_weak_nm_return retval = new CLangParser.attribute_weak_nm_return();
        retval.start = input.LT(1);
        int attribute_weak_nm_StartIndex = input.index();
        CommonTree root_0 = null;

        CLangParser.attribute_weak_return attribute_weak548 = null;


        RewriteRuleSubtreeStream stream_attribute_weak=new RewriteRuleSubtreeStream(adaptor,"rule attribute_weak");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1280:2: ( attribute_weak -> ^( NAME attribute_weak ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1280:4: attribute_weak
            {
            pushFollow(FOLLOW_attribute_weak_in_attribute_weak_nm6360);
            attribute_weak548=attribute_weak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_weak.add(attribute_weak548.getTree());


            // AST REWRITE
            // elements: attribute_weak
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1281:3: -> ^( NAME attribute_weak )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1281:6: ^( NAME attribute_weak )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_attribute_weak.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, attribute_weak_nm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_weak_nm"

    public static class attribute_weak_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_weak"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1284:1: attribute_weak : ( '__weak__' | '__weak' | 'weak__' | 'weak' );
    public final CLangParser.attribute_weak_return attribute_weak() throws RecognitionException {
        CLangParser.attribute_weak_return retval = new CLangParser.attribute_weak_return();
        retval.start = input.LT(1);
        int attribute_weak_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set549=null;

        CommonTree set549_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:1285:2: ( '__weak__' | '__weak' | 'weak__' | 'weak' )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set549=(Token)input.LT(1);
            if ( (input.LA(1)>=276 && input.LA(1)<=279) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set549));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, attribute_weak_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_weak"

    // $ANTLR start synpred2_CLang
    public final void synpred2_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:157:6: ( declaration_specifiers )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:157:6: declaration_specifiers
        {
        pushFollow(FOLLOW_declaration_specifiers_in_synpred2_CLang309);
        declaration_specifiers();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_CLang

    // $ANTLR start synpred4_CLang
    public final void synpred4_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:157:4: ( ( declaration_specifiers )? declarator ( declaration )* '{' )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:157:6: ( declaration_specifiers )? declarator ( declaration )* '{'
        {
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:157:6: ( declaration_specifiers )?
        int alt114=2;
        alt114 = dfa114.predict(input);
        switch (alt114) {
            case 1 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: declaration_specifiers
                {
                pushFollow(FOLLOW_declaration_specifiers_in_synpred4_CLang309);
                declaration_specifiers();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_declarator_in_synpred4_CLang312);
        declarator();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:157:41: ( declaration )*
        loop115:
        do {
            int alt115=2;
            alt115 = dfa115.predict(input);
            switch (alt115) {
        	case 1 :
        	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: declaration
        	    {
        	    pushFollow(FOLLOW_declaration_in_synpred4_CLang314);
        	    declaration();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop115;
            }
        } while (true);

        match(input,70,FOLLOW_70_in_synpred4_CLang317); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_CLang

    // $ANTLR start synpred5_CLang
    public final void synpred5_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:170:4: ( declaration_specifiers )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:170:4: declaration_specifiers
        {
        pushFollow(FOLLOW_declaration_specifiers_in_synpred5_CLang353);
        declaration_specifiers();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_CLang

    // $ANTLR start synpred10_CLang
    public final void synpred10_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:213:44: ( type_specifier_s )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:213:44: type_specifier_s
        {
        pushFollow(FOLLOW_type_specifier_s_in_synpred10_CLang489);
        type_specifier_s();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_CLang

    // $ANTLR start synpred16_CLang
    public final void synpred16_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:221:7: ( type_specifier_s )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:221:7: type_specifier_s
        {
        pushFollow(FOLLOW_type_specifier_s_in_synpred16_CLang561);
        type_specifier_s();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_CLang

    // $ANTLR start synpred51_CLang
    public final void synpred51_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:328:25: ( type_specifier_s )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:328:25: type_specifier_s
        {
        pushFollow(FOLLOW_type_specifier_s_in_synpred51_CLang1181);
        type_specifier_s();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred51_CLang

    // $ANTLR start synpred63_CLang
    public final void synpred63_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:376:47: ( attribute_spec )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:376:47: attribute_spec
        {
        pushFollow(FOLLOW_attribute_spec_in_synpred63_CLang1446);
        attribute_spec();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred63_CLang

    // $ANTLR start synpred64_CLang
    public final void synpred64_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:376:4: ( ( attribute_spec )* ( pointer )? direct_declarator ( attribute_spec )* )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:376:4: ( attribute_spec )* ( pointer )? direct_declarator ( attribute_spec )*
        {
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:376:4: ( attribute_spec )*
        loop122:
        do {
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==160) ) {
                alt122=1;
            }


            switch (alt122) {
        	case 1 :
        	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: attribute_spec
        	    {
        	    pushFollow(FOLLOW_attribute_spec_in_synpred64_CLang1438);
        	    attribute_spec();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop122;
            }
        } while (true);

        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:376:20: ( pointer )?
        int alt123=2;
        int LA123_0 = input.LA(1);

        if ( (LA123_0==101) ) {
            alt123=1;
        }
        switch (alt123) {
            case 1 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: pointer
                {
                pushFollow(FOLLOW_pointer_in_synpred64_CLang1441);
                pointer();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_direct_declarator_in_synpred64_CLang1444);
        direct_declarator();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:376:47: ( attribute_spec )*
        loop124:
        do {
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==160) ) {
                alt124=1;
            }


            switch (alt124) {
        	case 1 :
        	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: attribute_spec
        	    {
        	    pushFollow(FOLLOW_attribute_spec_in_synpred64_CLang1446);
        	    attribute_spec();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop124;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred64_CLang

    // $ANTLR start synpred66_CLang
    public final void synpred66_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:377:28: ( attribute_spec )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:377:28: attribute_spec
        {
        pushFollow(FOLLOW_attribute_spec_in_synpred66_CLang1457);
        attribute_spec();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred66_CLang

    // $ANTLR start synpred68_CLang
    public final void synpred68_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:395:57: ( declarator_suffix )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:395:57: declarator_suffix
        {
        pushFollow(FOLLOW_declarator_suffix_in_synpred68_CLang1513);
        declarator_suffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred68_CLang

    // $ANTLR start synpred71_CLang
    public final void synpred71_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:401:9: ( lpar parameter_type_list rpar )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:401:9: lpar parameter_type_list rpar
        {
        pushFollow(FOLLOW_lpar_in_synpred71_CLang1553);
        lpar();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_parameter_type_list_in_synpred71_CLang1555);
        parameter_type_list();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rpar_in_synpred71_CLang1557);
        rpar();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred71_CLang

    // $ANTLR start synpred72_CLang
    public final void synpred72_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:402:9: ( lpar identifier_list rpar )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:402:9: lpar identifier_list rpar
        {
        pushFollow(FOLLOW_lpar_in_synpred72_CLang1567);
        lpar();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_identifier_list_in_synpred72_CLang1569);
        identifier_list();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rpar_in_synpred72_CLang1571);
        rpar();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred72_CLang

    // $ANTLR start synpred73_CLang
    public final void synpred73_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:409:12: ( type_qualifier_h )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:409:12: type_qualifier_h
        {
        pushFollow(FOLLOW_type_qualifier_h_in_synpred73_CLang1615);
        type_qualifier_h();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred73_CLang

    // $ANTLR start synpred74_CLang
    public final void synpred74_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:409:30: ( pointer )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:409:30: pointer
        {
        pushFollow(FOLLOW_pointer_in_synpred74_CLang1618);
        pointer();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred74_CLang

    // $ANTLR start synpred75_CLang
    public final void synpred75_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:409:4: ( timesOp ( type_qualifier_h )+ ( pointer )? )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:409:4: timesOp ( type_qualifier_h )+ ( pointer )?
        {
        pushFollow(FOLLOW_timesOp_in_synpred75_CLang1613);
        timesOp();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:409:12: ( type_qualifier_h )+
        int cnt125=0;
        loop125:
        do {
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( ((LA125_0>=97 && LA125_0<=98)) ) {
                alt125=1;
            }


            switch (alt125) {
        	case 1 :
        	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: type_qualifier_h
        	    {
        	    pushFollow(FOLLOW_type_qualifier_h_in_synpred75_CLang1615);
        	    type_qualifier_h();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt125 >= 1 ) break loop125;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(125, input);
                    throw eee;
            }
            cnt125++;
        } while (true);

        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:409:30: ( pointer )?
        int alt126=2;
        int LA126_0 = input.LA(1);

        if ( (LA126_0==101) ) {
            alt126=1;
        }
        switch (alt126) {
            case 1 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:0:0: pointer
                {
                pushFollow(FOLLOW_pointer_in_synpred75_CLang1618);
                pointer();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred75_CLang

    // $ANTLR start synpred76_CLang
    public final void synpred76_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:410:4: ( timesOp pointer )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:410:4: timesOp pointer
        {
        pushFollow(FOLLOW_timesOp_in_synpred76_CLang1624);
        timesOp();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_pointer_in_synpred76_CLang1626);
        pointer();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred76_CLang

    // $ANTLR start synpred80_CLang
    public final void synpred80_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:427:28: ( declarator )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:427:28: declarator
        {
        pushFollow(FOLLOW_declarator_in_synpred80_CLang1748);
        declarator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred80_CLang

    // $ANTLR start synpred81_CLang
    public final void synpred81_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:427:41: ( abstract_declarator )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:427:41: abstract_declarator
        {
        pushFollow(FOLLOW_abstract_declarator_in_synpred81_CLang1752);
        abstract_declarator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred81_CLang

    // $ANTLR start synpred84_CLang
    public final void synpred84_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:439:12: ( direct_abstract_declarator )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:439:12: direct_abstract_declarator
        {
        pushFollow(FOLLOW_direct_abstract_declarator_in_synpred84_CLang1802);
        direct_abstract_declarator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred84_CLang

    // $ANTLR start synpred87_CLang
    public final void synpred87_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:444:67: ( abstract_declarator_suffix )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:444:67: abstract_declarator_suffix
        {
        pushFollow(FOLLOW_abstract_declarator_suffix_in_synpred87_CLang1833);
        abstract_declarator_suffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred87_CLang

    // $ANTLR start synpred100_CLang
    public final void synpred100_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:495:4: ( lpar type_name rpar cast_expression )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:495:4: lpar type_name rpar cast_expression
        {
        pushFollow(FOLLOW_lpar_in_synpred100_CLang2156);
        lpar();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_type_name_in_synpred100_CLang2158);
        type_name();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rpar_in_synpred100_CLang2160);
        rpar();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cast_expression_in_synpred100_CLang2162);
        cast_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_CLang

    // $ANTLR start synpred101_CLang
    public final void synpred101_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:504:4: ( postfix_expression )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:504:4: postfix_expression
        {
        pushFollow(FOLLOW_postfix_expression_in_synpred101_CLang2240);
        postfix_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_CLang

    // $ANTLR start synpred103_CLang
    public final void synpred103_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:505:4: ( primary_expression ( lpar rpar )* )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:505:4: primary_expression ( lpar rpar )*
        {
        pushFollow(FOLLOW_primary_expression_in_synpred103_CLang2245);
        primary_expression();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:505:23: ( lpar rpar )*
        loop128:
        do {
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==66) ) {
                alt128=1;
            }


            switch (alt128) {
        	case 1 :
        	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:505:25: lpar rpar
        	    {
        	    pushFollow(FOLLOW_lpar_in_synpred103_CLang2249);
        	    lpar();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_rpar_in_synpred103_CLang2251);
        	    rpar();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop128;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred103_CLang

    // $ANTLR start synpred105_CLang
    public final void synpred105_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:507:9: ( primary_expression ( lpar argument_expression_list rpar )* )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:507:9: primary_expression ( lpar argument_expression_list rpar )*
        {
        pushFollow(FOLLOW_primary_expression_in_synpred105_CLang2291);
        primary_expression();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:507:28: ( lpar argument_expression_list rpar )*
        loop129:
        do {
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==66) ) {
                alt129=1;
            }


            switch (alt129) {
        	case 1 :
        	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:507:30: lpar argument_expression_list rpar
        	    {
        	    pushFollow(FOLLOW_lpar_in_synpred105_CLang2295);
        	    lpar();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_argument_expression_list_in_synpred105_CLang2297);
        	    argument_expression_list();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_rpar_in_synpred105_CLang2299);
        	    rpar();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop129;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred105_CLang

    // $ANTLR start synpred109_CLang
    public final void synpred109_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:512:4: ( sizeofOp unary_expression )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:512:4: sizeofOp unary_expression
        {
        pushFollow(FOLLOW_sizeofOp_in_synpred109_CLang2380);
        sizeofOp();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_unary_expression_in_synpred109_CLang2382);
        unary_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_CLang

    // $ANTLR start synpred110_CLang
    public final void synpred110_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:521:27: ()
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:521:27: 
        {
        }
    }
    // $ANTLR end synpred110_CLang

    // $ANTLR start synpred136_CLang
    public final void synpred136_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:562:4: ( identifier )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:562:4: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred136_CLang2927);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred136_CLang

    // $ANTLR start synpred138_CLang
    public final void synpred138_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:564:4: ( type_specifier_h )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:564:4: type_specifier_h
        {
        pushFollow(FOLLOW_type_specifier_h_in_synpred138_CLang2937);
        type_specifier_h();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred138_CLang

    // $ANTLR start synpred145_CLang
    public final void synpred145_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:611:4: ( lvalue assignment_operator assignment_expression )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:611:4: lvalue assignment_operator assignment_expression
        {
        pushFollow(FOLLOW_lvalue_in_synpred145_CLang3102);
        lvalue();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_assignment_operator_in_synpred145_CLang3104);
        assignment_operator();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_assignment_expression_in_synpred145_CLang3106);
        assignment_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred145_CLang

    // $ANTLR start synpred177_CLang
    public final void synpred177_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:715:31: ( asm_output_operands )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:715:31: asm_output_operands
        {
        pushFollow(FOLLOW_asm_output_operands_in_synpred177_CLang3866);
        asm_output_operands();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_CLang

    // $ANTLR start synpred178_CLang
    public final void synpred178_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:715:52: ( asm_input_operands )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:715:52: asm_input_operands
        {
        pushFollow(FOLLOW_asm_input_operands_in_synpred178_CLang3869);
        asm_input_operands();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_CLang

    // $ANTLR start synpred199_CLang
    public final void synpred199_CLang_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:777:11: ( external_declaration )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\c\\CLang.g:777:11: external_declaration
        {
        pushFollow(FOLLOW_external_declaration_in_synpred199_CLang4197);
        external_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred199_CLang

    // Delegated rules

    public final boolean synpred105_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_CLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_CLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA10 dfa10 = new DFA10(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA19 dfa19 = new DFA19(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA62 dfa62 = new DFA62(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA68 dfa68 = new DFA68(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA115 dfa115 = new DFA115(this);
    static final String DFA1_eotS =
        "\15\uffff";
    static final String DFA1_eofS =
        "\1\1\14\uffff";
    static final String DFA1_minS =
        "\1\52\14\uffff";
    static final String DFA1_maxS =
        "\1\u00a0\14\uffff";
    static final String DFA1_acceptS =
        "\1\uffff\1\2\1\1\12\uffff";
    static final String DFA1_specialS =
        "\15\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\2\22\uffff\1\2\4\uffff\1\2\5\uffff\36\2\72\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "()+ loopback of 137:4: ( external_declaration )+";
        }
    }
    static final String DFA2_eotS =
        "\14\uffff";
    static final String DFA2_eofS =
        "\14\uffff";
    static final String DFA2_minS =
        "\1\52\10\0\3\uffff";
    static final String DFA2_maxS =
        "\1\u00a0\10\0\3\uffff";
    static final String DFA2_acceptS =
        "\11\uffff\2\1\1\2";
    static final String DFA2_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\3\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\5\22\uffff\1\13\4\uffff\1\12\5\uffff\4\1\22\2\2\3\1\4\2"+
            "\6\2\7\1\11\72\uffff\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "141:1: external_declaration options {k=1; } : ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_0 = input.LA(1);

                         
                        int index2_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA2_0>=72 && LA2_0<=75)) ) {s = 1;}

                        else if ( ((LA2_0>=76 && LA2_0<=93)) ) {s = 2;}

                        else if ( ((LA2_0>=94 && LA2_0<=95)) ) {s = 3;}

                        else if ( (LA2_0==96) ) {s = 4;}

                        else if ( (LA2_0==IDENTIFIER) ) {s = 5;}

                        else if ( ((LA2_0>=97 && LA2_0<=98)) ) {s = 6;}

                        else if ( ((LA2_0>=99 && LA2_0<=100)) ) {s = 7;}

                        else if ( (LA2_0==160) ) {s = 8;}

                        else if ( (LA2_0==101) && (synpred4_CLang())) {s = 9;}

                        else if ( (LA2_0==66) && (synpred4_CLang())) {s = 10;}

                        else if ( (LA2_0==61) ) {s = 11;}

                         
                        input.seek(index2_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_1 = input.LA(1);

                         
                        int index2_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_CLang()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index2_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_CLang()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_CLang()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_CLang()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred4_CLang()||(synpred4_CLang()&&(isTypeName(input.LT(1).getText()))))) ) {s = 10;}

                        else if ( ((isTypeName(input.LT(1).getText()))) ) {s = 11;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_CLang()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_CLang()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_CLang()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA3_eotS =
        "\27\uffff";
    static final String DFA3_eofS =
        "\27\uffff";
    static final String DFA3_minS =
        "\1\52\4\uffff\1\52\5\uffff\1\0\1\uffff\10\0\2\uffff";
    static final String DFA3_maxS =
        "\1\u00a0\4\uffff\1\u00a0\5\uffff\1\0\1\uffff\10\0\2\uffff";
    static final String DFA3_acceptS =
        "\1\uffff\1\1\6\uffff\1\2\16\uffff";
    static final String DFA3_specialS =
        "\13\uffff\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\uffff}>";
    static final String[] DFA3_transitionS = {
            "\1\5\27\uffff\1\10\5\uffff\35\1\1\10\72\uffff\1\10",
            "",
            "",
            "",
            "",
            "\1\15\27\uffff\1\16\1\uffff\1\10\1\uffff\1\10\1\uffff\4\17"+
            "\22\20\2\21\1\22\2\23\2\24\1\1\72\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "170:4: ( declaration_specifiers )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_11 = input.LA(1);

                         
                        int index3_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index3_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA3_13 = input.LA(1);

                         
                        int index3_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index3_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA3_14 = input.LA(1);

                         
                        int index3_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index3_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA3_15 = input.LA(1);

                         
                        int index3_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index3_15);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA3_16 = input.LA(1);

                         
                        int index3_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index3_16);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA3_17 = input.LA(1);

                         
                        int index3_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index3_17);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA3_18 = input.LA(1);

                         
                        int index3_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index3_18);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA3_19 = input.LA(1);

                         
                        int index3_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index3_19);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA3_20 = input.LA(1);

                         
                        int index3_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index3_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA10_eotS =
        "\12\uffff";
    static final String DFA10_eofS =
        "\12\uffff";
    static final String DFA10_minS =
        "\1\52\11\uffff";
    static final String DFA10_maxS =
        "\1\u00a0\11\uffff";
    static final String DFA10_acceptS =
        "\1\uffff\1\1\1\2\7\uffff";
    static final String DFA10_specialS =
        "\12\uffff}>";
    static final String[] DFA10_transitionS = {
            "\1\2\22\uffff\1\1\12\uffff\35\2\73\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA10_eot = DFA.unpackEncodedString(DFA10_eotS);
    static final short[] DFA10_eof = DFA.unpackEncodedString(DFA10_eofS);
    static final char[] DFA10_min = DFA.unpackEncodedStringToUnsignedChars(DFA10_minS);
    static final char[] DFA10_max = DFA.unpackEncodedStringToUnsignedChars(DFA10_maxS);
    static final short[] DFA10_accept = DFA.unpackEncodedString(DFA10_acceptS);
    static final short[] DFA10_special = DFA.unpackEncodedString(DFA10_specialS);
    static final short[][] DFA10_transition;

    static {
        int numStates = DFA10_transitionS.length;
        DFA10_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA10_transition[i] = DFA.unpackEncodedString(DFA10_transitionS[i]);
        }
    }

    class DFA10 extends DFA {

        public DFA10(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = DFA10_eot;
            this.eof = DFA10_eof;
            this.min = DFA10_min;
            this.max = DFA10_max;
            this.accept = DFA10_accept;
            this.special = DFA10_special;
            this.transition = DFA10_transition;
        }
        public String getDescription() {
            return "206:1: declaration : ( 'typedef' ( storage_class_specifier_h | type_specifier_s | type_qualifier_h )+ init_declarator_list semi | ( attribute_spec )* declaration_specifiers ( init_declarator_list )? semi -> ( attribute_spec )* ^( VAR_DECL declaration_specifiers ( init_declarator_list )? semi ) );";
        }
    }
    static final String DFA7_eotS =
        "\27\uffff";
    static final String DFA7_eofS =
        "\27\uffff";
    static final String DFA7_minS =
        "\1\52\2\uffff\1\52\6\uffff\1\0\2\uffff\1\0\11\uffff";
    static final String DFA7_maxS =
        "\1\u00a0\2\uffff\1\u00a0\6\uffff\1\0\2\uffff\1\0\11\uffff";
    static final String DFA7_acceptS =
        "\1\uffff\1\4\3\uffff\1\1\1\2\2\uffff\1\3\15\uffff";
    static final String DFA7_specialS =
        "\12\uffff\1\0\2\uffff\1\1\11\uffff}>";
    static final String[] DFA7_transitionS = {
            "\1\3\27\uffff\1\1\5\uffff\4\5\25\6\2\11\2\uffff\1\1\72\uffff"+
            "\1\1",
            "",
            "",
            "\1\6\23\uffff\2\1\1\uffff\1\1\1\15\1\uffff\1\1\3\uffff\33"+
            "\6\2\uffff\1\6\72\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "()+ loopback of 213:14: ( storage_class_specifier_h | type_specifier_s | type_qualifier_h )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_10 = input.LA(1);

                         
                        int index7_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred10_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA7_13 = input.LA(1);

                         
                        int index7_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred10_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA11_eotS =
        "\42\uffff";
    static final String DFA11_eofS =
        "\1\1\41\uffff";
    static final String DFA11_minS =
        "\1\52\2\uffff\1\0\36\uffff";
    static final String DFA11_maxS =
        "\1\u00a0\2\uffff\1\0\36\uffff";
    static final String DFA11_acceptS =
        "\1\uffff\1\5\10\uffff\1\1\1\2\2\uffff\1\3\1\4\22\uffff";
    static final String DFA11_specialS =
        "\3\uffff\1\0\36\uffff}>";
    static final String[] DFA11_transitionS = {
            "\1\3\24\uffff\1\1\1\uffff\4\1\3\uffff\4\12\25\13\2\16\2\17"+
            "\1\1\72\uffff\1\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()+ loopback of 220:4: ( storage_class_specifier_h | type_specifier_s | type_qualifier_h | function_specifier_h )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA11_3 = input.LA(1);

                         
                        int index11_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred16_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 11;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA19_eotS =
        "\56\uffff";
    static final String DFA19_eofS =
        "\2\uffff\1\5\53\uffff";
    static final String DFA19_minS =
        "\1\136\2\52\53\uffff";
    static final String DFA19_maxS =
        "\1\137\1\106\1\u00a0\53\uffff";
    static final String DFA19_acceptS =
        "\3\uffff\1\1\1\uffff\1\2\50\uffff";
    static final String DFA19_specialS =
        "\56\uffff}>";
    static final String[] DFA19_transitionS = {
            "\2\1",
            "\1\2\33\uffff\1\3",
            "\1\5\23\uffff\10\5\1\3\37\5\1\uffff\6\5\1\uffff\3\5\2\uffff"+
            "\27\5\26\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA19_eot = DFA.unpackEncodedString(DFA19_eotS);
    static final short[] DFA19_eof = DFA.unpackEncodedString(DFA19_eofS);
    static final char[] DFA19_min = DFA.unpackEncodedStringToUnsignedChars(DFA19_minS);
    static final char[] DFA19_max = DFA.unpackEncodedStringToUnsignedChars(DFA19_maxS);
    static final short[] DFA19_accept = DFA.unpackEncodedString(DFA19_acceptS);
    static final short[] DFA19_special = DFA.unpackEncodedString(DFA19_specialS);
    static final short[][] DFA19_transition;

    static {
        int numStates = DFA19_transitionS.length;
        DFA19_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA19_transition[i] = DFA.unpackEncodedString(DFA19_transitionS[i]);
        }
    }

    class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = DFA19_eot;
            this.eof = DFA19_eof;
            this.min = DFA19_min;
            this.max = DFA19_max;
            this.accept = DFA19_accept;
            this.special = DFA19_special;
            this.transition = DFA19_transition;
        }
        public String getDescription() {
            return "300:1: struct_or_union_specifier options {k=3; } : ( struct_or_union_h ( identifier )? lbrace ( struct_declaration )* rbrace | struct_or_union_h identifier );";
        }
    }
    static final String DFA20_eotS =
        "\31\uffff";
    static final String DFA20_eofS =
        "\31\uffff";
    static final String DFA20_minS =
        "\1\52\2\uffff\1\52\10\uffff\4\0\11\uffff";
    static final String DFA20_maxS =
        "\1\u00a0\2\uffff\1\u00a0\10\uffff\4\0\11\uffff";
    static final String DFA20_acceptS =
        "\1\uffff\1\3\6\uffff\1\1\1\2\17\uffff";
    static final String DFA20_specialS =
        "\14\uffff\1\0\1\1\1\2\1\3\11\uffff}>";
    static final String[] DFA20_transitionS = {
            "\1\3\25\uffff\1\1\1\uffff\3\1\7\uffff\25\11\2\10\2\uffff\1"+
            "\1\72\uffff\1\1",
            "",
            "",
            "\1\11\24\uffff\1\1\1\17\1\1\1\15\1\11\1\14\7\uffff\27\11\2"+
            "\uffff\1\11\72\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "()+ loopback of 328:4: ( type_qualifier_h | type_specifier_s )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA20_12 = input.LA(1);

                         
                        int index20_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred51_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_12);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA20_13 = input.LA(1);

                         
                        int index20_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred51_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA20_14 = input.LA(1);

                         
                        int index20_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred51_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA20_15 = input.LA(1);

                         
                        int index20_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred51_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index20_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA24_eotS =
        "\56\uffff";
    static final String DFA24_eofS =
        "\3\uffff\1\4\52\uffff";
    static final String DFA24_minS =
        "\1\140\1\52\1\uffff\1\52\52\uffff";
    static final String DFA24_maxS =
        "\1\140\1\106\1\uffff\1\u00a0\52\uffff";
    static final String DFA24_acceptS =
        "\2\uffff\1\1\1\uffff\1\3\50\uffff\1\2";
    static final String DFA24_specialS =
        "\56\uffff}>";
    static final String[] DFA24_transitionS = {
            "\1\1",
            "\1\3\33\uffff\1\2",
            "",
            "\1\4\23\uffff\10\4\1\55\37\4\1\uffff\6\4\1\uffff\3\4\2\uffff"+
            "\27\4\26\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_eotS);
    static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_eofS);
    static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_minS);
    static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_maxS);
    static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_acceptS);
    static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_specialS);
    static final short[][] DFA24_transition;

    static {
        int numStates = DFA24_transitionS.length;
        DFA24_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA24_transition[i] = DFA.unpackEncodedString(DFA24_transitionS[i]);
        }
    }

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = DFA24_eot;
            this.eof = DFA24_eof;
            this.min = DFA24_min;
            this.max = DFA24_max;
            this.accept = DFA24_accept;
            this.special = DFA24_special;
            this.transition = DFA24_transition;
        }
        public String getDescription() {
            return "342:1: enum_specifier options {k=3; } : ( enumKw lbrace enumerator_list rbrace | enumKw identifier lbrace enumerator_list rbrace | enumKw identifier );";
        }
    }
    static final String DFA32_eotS =
        "\32\uffff";
    static final String DFA32_eofS =
        "\32\uffff";
    static final String DFA32_minS =
        "\1\52\1\102\1\0\2\uffff\1\0\24\uffff";
    static final String DFA32_maxS =
        "\1\u00a0\1\102\1\0\2\uffff\1\0\24\uffff";
    static final String DFA32_acceptS =
        "\3\uffff\1\1\25\uffff\1\2";
    static final String DFA32_specialS =
        "\2\uffff\1\0\2\uffff\1\1\24\uffff}>";
    static final String[] DFA32_transitionS = {
            "\1\3\27\uffff\1\3\42\uffff\1\2\72\uffff\1\1",
            "\1\5",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "375:1: declarator : ( ( attribute_spec )* ( pointer )? direct_declarator ( attribute_spec )* | ( attribute_spec )* pointer ( attribute_spec )* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA32_2 = input.LA(1);

                         
                        int index32_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_CLang()) ) {s = 3;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index32_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA32_5 = input.LA(1);

                         
                        int index32_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_CLang()) ) {s = 3;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index32_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 32, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA29_eotS =
        "\26\uffff";
    static final String DFA29_eofS =
        "\1\1\25\uffff";
    static final String DFA29_minS =
        "\1\52\10\uffff\1\102\12\uffff\1\0\1\uffff";
    static final String DFA29_maxS =
        "\1\u00a0\10\uffff\1\102\12\uffff\1\0\1\uffff";
    static final String DFA29_acceptS =
        "\1\uffff\1\2\23\uffff\1\1";
    static final String DFA29_specialS =
        "\24\uffff\1\0\1\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\1\22\uffff\10\1\1\uffff\1\1\1\uffff\36\1\72\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "()* loopback of 376:47: ( attribute_spec )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_20 = input.LA(1);

                         
                        int index29_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_CLang()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA31_eotS =
        "\26\uffff";
    static final String DFA31_eofS =
        "\1\1\25\uffff";
    static final String DFA31_minS =
        "\1\52\10\uffff\1\102\12\uffff\1\0\1\uffff";
    static final String DFA31_maxS =
        "\1\u00a0\10\uffff\1\102\12\uffff\1\0\1\uffff";
    static final String DFA31_acceptS =
        "\1\uffff\1\2\23\uffff\1\1";
    static final String DFA31_specialS =
        "\24\uffff\1\0\1\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\1\22\uffff\10\1\1\uffff\1\1\1\uffff\36\1\72\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "()* loopback of 377:28: ( attribute_spec )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA31_20 = input.LA(1);

                         
                        int index31_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_CLang()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA34_eotS =
        "\54\uffff";
    static final String DFA34_eofS =
        "\1\1\53\uffff";
    static final String DFA34_minS =
        "\1\52\20\uffff\2\52\1\uffff\11\0\3\uffff\13\0\1\uffff";
    static final String DFA34_maxS =
        "\1\u00a0\20\uffff\1\u00a0\1\162\1\uffff\11\0\3\uffff\13\0\1\uffff";
    static final String DFA34_acceptS =
        "\1\uffff\1\2\51\uffff\1\1";
    static final String DFA34_specialS =
        "\24\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\3\uffff\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\uffff}>";
    static final String[] DFA34_transitionS = {
            "\1\1\22\uffff\5\1\1\21\1\1\1\22\1\uffff\1\1\1\uffff\36\1\72"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\31\27\uffff\1\1\1\34\1\1\3\uffff\4\25\22\26\2\27\1\30\2"+
            "\32\2\33\1\1\72\uffff\1\24",
            "\1\42\6\43\21\uffff\1\41\2\uffff\1\40\6\uffff\22\44\2\45\1"+
            "\46\4\uffff\1\51\1\uffff\2\51\2\uffff\1\47\1\50\1\52\2\uffff"+
            "\3\51",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA34_eot = DFA.unpackEncodedString(DFA34_eotS);
    static final short[] DFA34_eof = DFA.unpackEncodedString(DFA34_eofS);
    static final char[] DFA34_min = DFA.unpackEncodedStringToUnsignedChars(DFA34_minS);
    static final char[] DFA34_max = DFA.unpackEncodedStringToUnsignedChars(DFA34_maxS);
    static final short[] DFA34_accept = DFA.unpackEncodedString(DFA34_acceptS);
    static final short[] DFA34_special = DFA.unpackEncodedString(DFA34_specialS);
    static final short[][] DFA34_transition;

    static {
        int numStates = DFA34_transitionS.length;
        DFA34_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA34_transition[i] = DFA.unpackEncodedString(DFA34_transitionS[i]);
        }
    }

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = DFA34_eot;
            this.eof = DFA34_eof;
            this.min = DFA34_min;
            this.max = DFA34_max;
            this.accept = DFA34_accept;
            this.special = DFA34_special;
            this.transition = DFA34_transition;
        }
        public String getDescription() {
            return "()* loopback of 395:57: ( declarator_suffix )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA34_20 = input.LA(1);

                         
                        int index34_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_20);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA34_21 = input.LA(1);

                         
                        int index34_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_21);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA34_22 = input.LA(1);

                         
                        int index34_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_22);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA34_23 = input.LA(1);

                         
                        int index34_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_23);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA34_24 = input.LA(1);

                         
                        int index34_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_24);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA34_25 = input.LA(1);

                         
                        int index34_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_25);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA34_26 = input.LA(1);

                         
                        int index34_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_26);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA34_27 = input.LA(1);

                         
                        int index34_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_27);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA34_28 = input.LA(1);

                         
                        int index34_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_28);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA34_32 = input.LA(1);

                         
                        int index34_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_32);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA34_33 = input.LA(1);

                         
                        int index34_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_33);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA34_34 = input.LA(1);

                         
                        int index34_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_34);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA34_35 = input.LA(1);

                         
                        int index34_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_35);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA34_36 = input.LA(1);

                         
                        int index34_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_36);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA34_37 = input.LA(1);

                         
                        int index34_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_37);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA34_38 = input.LA(1);

                         
                        int index34_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_38);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA34_39 = input.LA(1);

                         
                        int index34_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_39);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA34_40 = input.LA(1);

                         
                        int index34_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_40);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA34_41 = input.LA(1);

                         
                        int index34_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_41);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA34_42 = input.LA(1);

                         
                        int index34_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_CLang()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_42);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 34, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA35_eotS =
        "\30\uffff";
    static final String DFA35_eofS =
        "\30\uffff";
    static final String DFA35_minS =
        "\1\102\2\52\20\uffff\1\0\4\uffff";
    static final String DFA35_maxS =
        "\1\104\1\162\1\u00a0\20\uffff\1\0\4\uffff";
    static final String DFA35_acceptS =
        "\3\uffff\1\2\1\1\11\uffff\1\3\7\uffff\1\5\1\4";
    static final String DFA35_specialS =
        "\23\uffff\1\0\4\uffff}>";
    static final String[] DFA35_transitionS = {
            "\1\2\1\uffff\1\1",
            "\7\4\21\uffff\1\4\2\uffff\1\3\6\uffff\25\4\4\uffff\1\4\1\uffff"+
            "\2\4\2\uffff\3\4\2\uffff\3\4",
            "\1\23\30\uffff\1\26\4\uffff\35\16\73\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "398:1: declarator_suffix : ( lbrack constant_expression rbrack | lbrack rbrack | lpar parameter_type_list rpar | lpar identifier_list rpar | lpar rpar );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA35_19 = input.LA(1);

                         
                        int index35_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_CLang()) ) {s = 14;}

                        else if ( (synpred72_CLang()) ) {s = 23;}

                         
                        input.seek(index35_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 35, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA38_eotS =
        "\27\uffff";
    static final String DFA38_eofS =
        "\1\uffff\1\2\25\uffff";
    static final String DFA38_minS =
        "\1\145\1\52\7\uffff\1\0\10\uffff\1\0\4\uffff";
    static final String DFA38_maxS =
        "\1\145\1\u00a0\7\uffff\1\0\10\uffff\1\0\4\uffff";
    static final String DFA38_acceptS =
        "\2\uffff\1\3\22\uffff\1\1\1\2";
    static final String DFA38_specialS =
        "\11\uffff\1\0\10\uffff\1\1\4\uffff}>";
    static final String[] DFA38_transitionS = {
            "\1\1",
            "\1\2\22\uffff\10\2\1\uffff\1\2\1\uffff\31\2\2\11\2\2\1\22"+
            "\72\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "408:1: pointer : ( timesOp ( type_qualifier_h )+ ( pointer )? | timesOp pointer | timesOp );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA38_9 = input.LA(1);

                         
                        int index38_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_CLang()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index38_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA38_18 = input.LA(1);

                         
                        int index38_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_CLang()) ) {s = 22;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index38_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 38, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA36_eotS =
        "\50\uffff";
    static final String DFA36_eofS =
        "\1\1\47\uffff";
    static final String DFA36_minS =
        "\1\52\10\uffff\1\0\36\uffff";
    static final String DFA36_maxS =
        "\1\u00a0\10\uffff\1\0\36\uffff";
    static final String DFA36_acceptS =
        "\1\uffff\1\2\45\uffff\1\1";
    static final String DFA36_specialS =
        "\11\uffff\1\0\36\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\1\22\uffff\10\1\1\uffff\1\1\1\uffff\31\1\2\11\3\1\72\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "()+ loopback of 409:12: ( type_qualifier_h )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_9 = input.LA(1);

                         
                        int index36_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index36_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA37_eotS =
        "\50\uffff";
    static final String DFA37_eofS =
        "\1\2\47\uffff";
    static final String DFA37_minS =
        "\1\52\1\0\46\uffff";
    static final String DFA37_maxS =
        "\1\u00a0\1\0\46\uffff";
    static final String DFA37_acceptS =
        "\2\uffff\1\2\44\uffff\1\1";
    static final String DFA37_specialS =
        "\1\uffff\1\0\46\uffff}>";
    static final String[] DFA37_transitionS = {
            "\1\2\22\uffff\10\2\1\uffff\1\2\1\uffff\35\2\1\1\72\uffff\1"+
            "\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "409:30: ( pointer )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA37_1 = input.LA(1);

                         
                        int index37_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index37_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 37, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA41_eotS =
        "\13\uffff";
    static final String DFA41_eofS =
        "\13\uffff";
    static final String DFA41_minS =
        "\1\77\1\52\11\uffff";
    static final String DFA41_maxS =
        "\1\103\1\146\11\uffff";
    static final String DFA41_acceptS =
        "\2\uffff\1\2\1\1\7\uffff";
    static final String DFA41_specialS =
        "\13\uffff}>";
    static final String[] DFA41_transitionS = {
            "\1\1\3\uffff\1\2",
            "\1\3\35\uffff\35\3\1\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "()* loopback of 421:42: ( comma parameter_declaration )*";
        }
    }
    static final String DFA42_eotS =
        "\36\uffff";
    static final String DFA42_eofS =
        "\1\1\35\uffff";
    static final String DFA42_minS =
        "\1\52\4\uffff\1\0\1\uffff\1\52\13\uffff\2\0\1\uffff\1\0\4\uffff"+
        "\1\0\2\uffff";
    static final String DFA42_maxS =
        "\1\u00a0\4\uffff\1\0\1\uffff\1\u00a0\13\uffff\2\0\1\uffff\1\0\4"+
        "\uffff\1\0\2\uffff";
    static final String DFA42_acceptS =
        "\1\uffff\1\3\2\uffff\1\1\3\uffff\1\2\25\uffff";
    static final String DFA42_specialS =
        "\5\uffff\1\0\15\uffff\1\1\1\2\1\uffff\1\3\4\uffff\1\4\2\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\4\24\uffff\1\1\2\uffff\1\7\1\1\1\10\40\uffff\1\5\72\uffff"+
            "\1\4",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\33\27\uffff\1\24\2\10\3\uffff\35\10\1\23\72\uffff\1\26",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "()* loopback of 427:27: ( declarator | abstract_declarator )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA42_5 = input.LA(1);

                         
                        int index42_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_CLang()) ) {s = 4;}

                        else if ( (synpred81_CLang()) ) {s = 8;}

                         
                        input.seek(index42_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA42_19 = input.LA(1);

                         
                        int index42_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_CLang()) ) {s = 4;}

                        else if ( (synpred81_CLang()) ) {s = 8;}

                         
                        input.seek(index42_19);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA42_20 = input.LA(1);

                         
                        int index42_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_CLang()) ) {s = 4;}

                        else if ( (synpred81_CLang()) ) {s = 8;}

                         
                        input.seek(index42_20);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA42_22 = input.LA(1);

                         
                        int index42_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_CLang()) ) {s = 4;}

                        else if ( (synpred81_CLang()) ) {s = 8;}

                         
                        input.seek(index42_22);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA42_27 = input.LA(1);

                         
                        int index42_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_CLang()) ) {s = 4;}

                        else if ( (synpred81_CLang()) ) {s = 8;}

                         
                        input.seek(index42_27);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA45_eotS =
        "\41\uffff";
    static final String DFA45_eofS =
        "\1\3\40\uffff";
    static final String DFA45_minS =
        "\3\52\6\uffff\27\0\1\uffff";
    static final String DFA45_maxS =
        "\2\u00a0\1\162\6\uffff\27\0\1\uffff";
    static final String DFA45_acceptS =
        "\3\uffff\1\2\34\uffff\1\1";
    static final String DFA45_specialS =
        "\11\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\uffff}>";
    static final String[] DFA45_transitionS = {
            "\1\3\24\uffff\1\3\2\uffff\1\1\1\3\1\2\40\uffff\1\3\72\uffff"+
            "\1\3",
            "\1\16\27\uffff\1\23\1\21\1\24\3\uffff\4\12\22\13\2\14\1\15"+
            "\2\17\2\20\1\22\72\uffff\1\11",
            "\1\27\6\30\21\uffff\1\26\2\uffff\1\25\6\uffff\22\31\2\32\1"+
            "\33\4\uffff\1\36\1\uffff\2\36\2\uffff\1\34\1\35\1\37\2\uffff"+
            "\3\36",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "439:12: ( direct_abstract_declarator )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA45_9 = input.LA(1);

                         
                        int index45_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA45_10 = input.LA(1);

                         
                        int index45_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA45_11 = input.LA(1);

                         
                        int index45_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA45_12 = input.LA(1);

                         
                        int index45_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA45_13 = input.LA(1);

                         
                        int index45_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA45_14 = input.LA(1);

                         
                        int index45_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA45_15 = input.LA(1);

                         
                        int index45_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_15);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA45_16 = input.LA(1);

                         
                        int index45_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA45_17 = input.LA(1);

                         
                        int index45_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_17);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA45_18 = input.LA(1);

                         
                        int index45_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_18);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA45_19 = input.LA(1);

                         
                        int index45_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_19);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA45_20 = input.LA(1);

                         
                        int index45_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_20);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA45_21 = input.LA(1);

                         
                        int index45_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_21);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA45_22 = input.LA(1);

                         
                        int index45_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_22);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA45_23 = input.LA(1);

                         
                        int index45_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_23);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA45_24 = input.LA(1);

                         
                        int index45_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_24);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA45_25 = input.LA(1);

                         
                        int index45_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_25);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA45_26 = input.LA(1);

                         
                        int index45_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_26);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA45_27 = input.LA(1);

                         
                        int index45_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_27);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA45_28 = input.LA(1);

                         
                        int index45_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_28);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA45_29 = input.LA(1);

                         
                        int index45_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_29);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA45_30 = input.LA(1);

                         
                        int index45_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_30);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA45_31 = input.LA(1);

                         
                        int index45_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index45_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 45, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA47_eotS =
        "\17\uffff";
    static final String DFA47_eofS =
        "\17\uffff";
    static final String DFA47_minS =
        "\1\102\1\52\15\uffff";
    static final String DFA47_maxS =
        "\1\104\1\u00a0\15\uffff";
    static final String DFA47_acceptS =
        "\2\uffff\1\2\1\1\13\uffff";
    static final String DFA47_specialS =
        "\17\uffff}>";
    static final String[] DFA47_transitionS = {
            "\1\1\1\uffff\1\2",
            "\1\2\27\uffff\1\3\1\2\1\3\3\uffff\35\2\1\3\72\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA47_eot = DFA.unpackEncodedString(DFA47_eotS);
    static final short[] DFA47_eof = DFA.unpackEncodedString(DFA47_eofS);
    static final char[] DFA47_min = DFA.unpackEncodedStringToUnsignedChars(DFA47_minS);
    static final char[] DFA47_max = DFA.unpackEncodedStringToUnsignedChars(DFA47_maxS);
    static final short[] DFA47_accept = DFA.unpackEncodedString(DFA47_acceptS);
    static final short[] DFA47_special = DFA.unpackEncodedString(DFA47_specialS);
    static final short[][] DFA47_transition;

    static {
        int numStates = DFA47_transitionS.length;
        DFA47_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA47_transition[i] = DFA.unpackEncodedString(DFA47_transitionS[i]);
        }
    }

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = DFA47_eot;
            this.eof = DFA47_eof;
            this.min = DFA47_min;
            this.max = DFA47_max;
            this.accept = DFA47_accept;
            this.special = DFA47_special;
            this.transition = DFA47_transition;
        }
        public String getDescription() {
            return "444:4: ( lpar abstract_declarator rpar | abstract_declarator_suffix )";
        }
    }
    static final String DFA48_eotS =
        "\41\uffff";
    static final String DFA48_eofS =
        "\1\1\40\uffff";
    static final String DFA48_minS =
        "\1\52\6\uffff\2\52\11\0\3\uffff\13\0\1\uffff";
    static final String DFA48_maxS =
        "\1\u00a0\6\uffff\1\u00a0\1\162\11\0\3\uffff\13\0\1\uffff";
    static final String DFA48_acceptS =
        "\1\uffff\1\2\36\uffff\1\1";
    static final String DFA48_specialS =
        "\11\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\3\uffff\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\1\24\uffff\1\1\2\uffff\1\7\1\1\1\10\40\uffff\1\1\72\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\16\27\uffff\1\1\1\21\1\1\3\uffff\4\12\22\13\2\14\1\15\2"+
            "\17\2\20\1\1\72\uffff\1\11",
            "\1\27\6\30\21\uffff\1\26\2\uffff\1\25\6\uffff\22\31\2\32\1"+
            "\33\4\uffff\1\36\1\uffff\2\36\2\uffff\1\34\1\35\1\37\2\uffff"+
            "\3\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "()* loopback of 444:67: ( abstract_declarator_suffix )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA48_9 = input.LA(1);

                         
                        int index48_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA48_10 = input.LA(1);

                         
                        int index48_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA48_11 = input.LA(1);

                         
                        int index48_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA48_12 = input.LA(1);

                         
                        int index48_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA48_13 = input.LA(1);

                         
                        int index48_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA48_14 = input.LA(1);

                         
                        int index48_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA48_15 = input.LA(1);

                         
                        int index48_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_15);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA48_16 = input.LA(1);

                         
                        int index48_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA48_17 = input.LA(1);

                         
                        int index48_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_17);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA48_21 = input.LA(1);

                         
                        int index48_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_21);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA48_22 = input.LA(1);

                         
                        int index48_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_22);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA48_23 = input.LA(1);

                         
                        int index48_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_23);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA48_24 = input.LA(1);

                         
                        int index48_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_24);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA48_25 = input.LA(1);

                         
                        int index48_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_25);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA48_26 = input.LA(1);

                         
                        int index48_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_26);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA48_27 = input.LA(1);

                         
                        int index48_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_27);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA48_28 = input.LA(1);

                         
                        int index48_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_28);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA48_29 = input.LA(1);

                         
                        int index48_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_29);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA48_30 = input.LA(1);

                         
                        int index48_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_30);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA48_31 = input.LA(1);

                         
                        int index48_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_CLang()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA49_eotS =
        "\27\uffff";
    static final String DFA49_eofS =
        "\27\uffff";
    static final String DFA49_minS =
        "\1\102\2\52\24\uffff";
    static final String DFA49_maxS =
        "\1\104\1\162\1\u00a0\24\uffff";
    static final String DFA49_acceptS =
        "\3\uffff\1\1\1\2\11\uffff\1\4\7\uffff\1\3";
    static final String DFA49_specialS =
        "\27\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\2\1\uffff\1\1",
            "\7\4\21\uffff\1\4\2\uffff\1\3\6\uffff\25\4\4\uffff\1\4\1\uffff"+
            "\2\4\2\uffff\3\4\2\uffff\3\4",
            "\1\16\30\uffff\1\26\4\uffff\35\16\73\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "447:1: abstract_declarator_suffix : ( lbrack rbrack | lbrack constant_expression rbrack | lpar rpar | lpar parameter_type_list rpar );";
        }
    }
    static final String DFA51_eotS =
        "\14\uffff";
    static final String DFA51_eofS =
        "\14\uffff";
    static final String DFA51_minS =
        "\1\52\13\uffff";
    static final String DFA51_maxS =
        "\1\162\13\uffff";
    static final String DFA51_acceptS =
        "\1\uffff\1\1\11\uffff\1\2";
    static final String DFA51_specialS =
        "\14\uffff}>";
    static final String[] DFA51_transitionS = {
            "\7\1\21\uffff\1\1\3\uffff\1\13\5\uffff\25\1\4\uffff\1\1\1\uffff"+
            "\2\1\2\uffff\3\1\2\uffff\3\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA51_eot = DFA.unpackEncodedString(DFA51_eotS);
    static final short[] DFA51_eof = DFA.unpackEncodedString(DFA51_eofS);
    static final char[] DFA51_min = DFA.unpackEncodedStringToUnsignedChars(DFA51_minS);
    static final char[] DFA51_max = DFA.unpackEncodedStringToUnsignedChars(DFA51_maxS);
    static final short[] DFA51_accept = DFA.unpackEncodedString(DFA51_acceptS);
    static final short[] DFA51_special = DFA.unpackEncodedString(DFA51_specialS);
    static final short[][] DFA51_transition;

    static {
        int numStates = DFA51_transitionS.length;
        DFA51_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA51_transition[i] = DFA.unpackEncodedString(DFA51_transitionS[i]);
        }
    }

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = DFA51_eot;
            this.eof = DFA51_eof;
            this.min = DFA51_min;
            this.max = DFA51_max;
            this.accept = DFA51_accept;
            this.special = DFA51_special;
            this.transition = DFA51_transition;
        }
        public String getDescription() {
            return "454:1: initializer : ( assignment_expression | lbrace initializer_list ( comma )? rbrace );";
        }
    }
    static final String DFA52_eotS =
        "\17\uffff";
    static final String DFA52_eofS =
        "\17\uffff";
    static final String DFA52_minS =
        "\1\77\1\52\15\uffff";
    static final String DFA52_maxS =
        "\1\107\1\162\15\uffff";
    static final String DFA52_acceptS =
        "\2\uffff\1\2\1\1\13\uffff";
    static final String DFA52_specialS =
        "\17\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\1\7\uffff\1\2",
            "\7\3\21\uffff\1\3\3\uffff\1\3\1\2\4\uffff\25\3\4\uffff\1\3"+
            "\1\uffff\2\3\2\uffff\3\3\2\uffff\3\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "()* loopback of 460:16: ( comma initializer )*";
        }
    }
    static final String DFA56_eotS =
        "\31\uffff";
    static final String DFA56_eofS =
        "\1\1\30\uffff";
    static final String DFA56_minS =
        "\1\77\30\uffff";
    static final String DFA56_maxS =
        "\1\u00a0\30\uffff";
    static final String DFA56_acceptS =
        "\1\uffff\1\2\25\uffff\1\1\1\uffff";
    static final String DFA56_specialS =
        "\31\uffff}>";
    static final String[] DFA56_transitionS = {
            "\3\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\37\uffff\2\27\7\uffff"+
            "\1\1\14\uffff\15\1\26\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "()* loopback of 485:31: ( additive_op multiplicative_expression )*";
        }
    }
    static final String DFA57_eotS =
        "\34\uffff";
    static final String DFA57_eofS =
        "\1\1\33\uffff";
    static final String DFA57_minS =
        "\1\77\33\uffff";
    static final String DFA57_maxS =
        "\1\u00a0\33\uffff";
    static final String DFA57_acceptS =
        "\1\uffff\1\2\27\uffff\1\1\2\uffff";
    static final String DFA57_specialS =
        "\34\uffff}>";
    static final String[] DFA57_transitionS = {
            "\3\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\35\uffff\1\31\1\uffff"+
            "\2\1\2\31\5\uffff\1\1\14\uffff\15\1\26\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "()* loopback of 490:22: ( multiplicative_op cast_expression )*";
        }
    }
    static final String DFA58_eotS =
        "\26\uffff";
    static final String DFA58_eofS =
        "\26\uffff";
    static final String DFA58_minS =
        "\2\52\11\uffff\1\0\1\uffff\3\0\6\uffff";
    static final String DFA58_maxS =
        "\2\162\11\uffff\1\0\1\uffff\3\0\6\uffff";
    static final String DFA58_acceptS =
        "\2\uffff\1\2\22\uffff\1\1";
    static final String DFA58_specialS =
        "\13\uffff\1\0\1\uffff\1\1\1\2\1\3\6\uffff}>";
    static final String[] DFA58_transitionS = {
            "\7\2\21\uffff\1\1\11\uffff\25\2\4\uffff\1\2\1\uffff\2\2\2\uffff"+
            "\3\2\2\uffff\3\2",
            "\1\13\6\2\21\uffff\1\2\11\uffff\22\15\2\16\1\17\2\25\2\uffff"+
            "\1\2\1\uffff\2\2\2\uffff\3\2\2\uffff\3\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "494:1: cast_expression : ( lpar type_name rpar cast_expression | unary_expression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA58_11 = input.LA(1);

                         
                        int index58_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_CLang()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index58_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA58_13 = input.LA(1);

                         
                        int index58_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_CLang()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index58_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA58_14 = input.LA(1);

                         
                        int index58_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_CLang()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index58_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA58_15 = input.LA(1);

                         
                        int index58_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_CLang()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index58_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA61_eotS =
        "\u008d\uffff";
    static final String DFA61_eofS =
        "\u008d\uffff";
    static final String DFA61_minS =
        "\1\52\3\0\3\52\3\uffff\1\52\151\uffff\16\0\5\uffff\1\0\5\uffff";
    static final String DFA61_maxS =
        "\1\162\3\0\2\106\1\162\3\uffff\1\162\151\uffff\16\0\5\uffff\1\0"+
        "\5\uffff";
    static final String DFA61_acceptS =
        "\7\uffff\1\4\1\5\1\6\43\uffff\1\1\1\2\1\3\122\uffff\1\7\11\uffff"+
        "\1\10";
    static final String DFA61_specialS =
        "\1\uffff\1\0\1\1\1\2\160\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1"+
        "\12\1\13\1\14\1\15\1\16\1\17\1\20\5\uffff\1\21\5\uffff}>";
    static final String[] DFA61_transitionS = {
            "\1\1\6\2\21\uffff\1\6\11\uffff\22\3\2\4\1\5\4\uffff\1\11\1"+
            "\uffff\2\11\2\uffff\1\7\1\10\1\12\2\uffff\3\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\164\33\uffff\1\165",
            "\1\166\33\uffff\1\167",
            "\1\170\6\171\21\uffff\1\175\11\uffff\22\172\2\173\1\174\4"+
            "\uffff\1\u0080\1\uffff\2\u0080\2\uffff\1\176\1\177\1\u0081\2"+
            "\uffff\3\u0080",
            "",
            "",
            "",
            "\7\u0082\21\uffff\1\u0087\11\uffff\25\u0082\4\uffff\1\u0082"+
            "\1\uffff\2\u0082\2\uffff\3\u0082\2\uffff\3\u0082",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "503:1: unary_expression : ( postfix_expression | primary_expression ( lpar rpar )* -> ^( FUNCTION_CALL primary_expression ^( ARGUMENT_LIST ( lpar rpar )* ) ) | primary_expression ( lpar argument_expression_list rpar )* -> ^( FUNCTION_CALL primary_expression ^( ARGUMENT_LIST ( lpar argument_expression_list rpar )* ) ) | incOp unary_expression -> ^( ASSIGNMENT_STATEMENT incOp unary_expression ) | decOp unary_expression -> ^( ASSIGNMENT_STATEMENT decOp unary_expression ) | unary_operator_h cast_expression | sizeofOp unary_expression | sizeofOp lpar type_name rpar );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA61_1 = input.LA(1);

                         
                        int index61_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred101_CLang()&&(isTypeName(input.LT(1).getText())))||synpred101_CLang())) ) {s = 45;}

                        else if ( (((synpred103_CLang()&&(isTypeName(input.LT(1).getText())))||synpred103_CLang())) ) {s = 46;}

                        else if ( ((synpred105_CLang()||(synpred105_CLang()&&(isTypeName(input.LT(1).getText()))))) ) {s = 47;}

                         
                        input.seek(index61_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA61_2 = input.LA(1);

                         
                        int index61_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_CLang()) ) {s = 45;}

                        else if ( (synpred103_CLang()) ) {s = 46;}

                        else if ( (synpred105_CLang()) ) {s = 47;}

                         
                        input.seek(index61_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA61_3 = input.LA(1);

                         
                        int index61_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_CLang()) ) {s = 45;}

                        else if ( (synpred103_CLang()) ) {s = 46;}

                        else if ( (synpred105_CLang()) ) {s = 47;}

                         
                        input.seek(index61_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA61_116 = input.LA(1);

                         
                        int index61_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_CLang()) ) {s = 45;}

                        else if ( (synpred103_CLang()) ) {s = 46;}

                        else if ( (synpred105_CLang()) ) {s = 47;}

                         
                        input.seek(index61_116);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA61_117 = input.LA(1);

                         
                        int index61_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_CLang()) ) {s = 45;}

                        else if ( (synpred103_CLang()) ) {s = 46;}

                        else if ( (synpred105_CLang()) ) {s = 47;}

                         
                        input.seek(index61_117);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA61_118 = input.LA(1);

                         
                        int index61_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_CLang()) ) {s = 45;}

                        else if ( (synpred103_CLang()) ) {s = 46;}

                        else if ( (synpred105_CLang()) ) {s = 47;}

                         
                        input.seek(index61_118);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA61_119 = input.LA(1);

                         
                        int index61_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_CLang()) ) {s = 45;}

                        else if ( (synpred103_CLang()) ) {s = 46;}

                        else if ( (synpred105_CLang()) ) {s = 47;}

                         
                        input.seek(index61_119);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA61_120 = input.LA(1);

                         
                        int index61_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_CLang()) ) {s = 45;}

                        else if ( (synpred103_CLang()) ) {s = 46;}

                        else if ( (synpred105_CLang()) ) {s = 47;}

                         
                        input.seek(index61_120);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA61_121 = input.LA(1);

                         
                        int index61_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_CLang()) ) {s = 45;}

                        else if ( (synpred103_CLang()) ) {s = 46;}

                        else if ( (synpred105_CLang()) ) {s = 47;}

                         
                        input.seek(index61_121);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA61_122 = input.LA(1);

                         
                        int index61_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_CLang()) ) {s = 45;}

                        else if ( (synpred103_CLang()) ) {s = 46;}

                        else if ( (synpred105_CLang()) ) {s = 47;}

                         
                        input.seek(index61_122);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA61_123 = input.LA(1);

                         
                        int index61_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_CLang()) ) {s = 45;}

                        else if ( (synpred103_CLang()) ) {s = 46;}

                        else if ( (synpred105_CLang()) ) {s = 47;}

                         
                        input.seek(index61_123);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA61_124 = input.LA(1);

                         
                        int index61_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_CLang()) ) {s = 45;}

                        else if ( (synpred103_CLang()) ) {s = 46;}

                        else if ( (synpred105_CLang()) ) {s = 47;}

                         
                        input.seek(index61_124);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA61_125 = input.LA(1);

                         
                        int index61_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_CLang()) ) {s = 45;}

                        else if ( (synpred103_CLang()) ) {s = 46;}

                        else if ( (synpred105_CLang()) ) {s = 47;}

                         
                        input.seek(index61_125);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA61_126 = input.LA(1);

                         
                        int index61_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_CLang()) ) {s = 45;}

                        else if ( (synpred103_CLang()) ) {s = 46;}

                        else if ( (synpred105_CLang()) ) {s = 47;}

                         
                        input.seek(index61_126);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA61_127 = input.LA(1);

                         
                        int index61_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_CLang()) ) {s = 45;}

                        else if ( (synpred103_CLang()) ) {s = 46;}

                        else if ( (synpred105_CLang()) ) {s = 47;}

                         
                        input.seek(index61_127);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA61_128 = input.LA(1);

                         
                        int index61_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_CLang()) ) {s = 45;}

                        else if ( (synpred103_CLang()) ) {s = 46;}

                        else if ( (synpred105_CLang()) ) {s = 47;}

                         
                        input.seek(index61_128);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA61_129 = input.LA(1);

                         
                        int index61_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_CLang()) ) {s = 45;}

                        else if ( (synpred103_CLang()) ) {s = 46;}

                        else if ( (synpred105_CLang()) ) {s = 47;}

                         
                        input.seek(index61_129);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA61_135 = input.LA(1);

                         
                        int index61_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_CLang()) ) {s = 130;}

                        else if ( (true) ) {s = 140;}

                         
                        input.seek(index61_135);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 61, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA59_eotS =
        "\36\uffff";
    static final String DFA59_eofS =
        "\1\1\35\uffff";
    static final String DFA59_minS =
        "\1\76\35\uffff";
    static final String DFA59_maxS =
        "\1\u00a0\35\uffff";
    static final String DFA59_acceptS =
        "\1\uffff\1\2\33\uffff\1\1";
    static final String DFA59_specialS =
        "\36\uffff}>";
    static final String[] DFA59_transitionS = {
            "\4\1\1\35\1\1\1\uffff\1\1\1\uffff\1\1\35\uffff\1\1\1\uffff"+
            "\4\1\5\uffff\1\1\2\uffff\27\1\26\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "()* loopback of 505:23: ( lpar rpar )*";
        }
    }
    static final String DFA60_eotS =
        "\36\uffff";
    static final String DFA60_eofS =
        "\1\1\35\uffff";
    static final String DFA60_minS =
        "\1\76\35\uffff";
    static final String DFA60_maxS =
        "\1\u00a0\35\uffff";
    static final String DFA60_acceptS =
        "\1\uffff\1\2\33\uffff\1\1";
    static final String DFA60_specialS =
        "\36\uffff}>";
    static final String[] DFA60_transitionS = {
            "\4\1\1\35\1\1\1\uffff\1\1\1\uffff\1\1\35\uffff\1\1\1\uffff"+
            "\4\1\5\uffff\1\1\2\uffff\27\1\26\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "()* loopback of 507:28: ( lpar argument_expression_list rpar )*";
        }
    }
    static final String DFA63_eotS =
        "\u01cd\uffff";
    static final String DFA63_eofS =
        "\1\26\u01cc\uffff";
    static final String DFA63_minS =
        "\1\76\34\0\u01b0\uffff";
    static final String DFA63_maxS =
        "\1\u00a0\34\0\u01b0\uffff";
    static final String DFA63_acceptS =
        "\35\uffff\1\2\17\uffff\1\1\u019f\uffff";
    static final String DFA63_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\u01b0\uffff}>";
    static final String[] DFA63_transitionS = {
            "\1\34\1\24\1\31\1\25\1\35\1\33\1\35\1\30\1\uffff\1\27\35\uffff"+
            "\1\1\1\uffff\1\4\1\5\1\2\1\3\2\35\1\uffff\2\35\1\16\2\uffff"+
            "\12\34\1\23\1\22\1\21\1\20\1\17\1\14\1\15\1\10\1\11\1\12\1\13"+
            "\1\6\1\7\26\uffff\1\32",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "521:25: ( -> primary_expression | ( postfix_expression_opts[$primary_expression.tree] )? -> postfix_expression_opts )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA63_1 = input.LA(1);

                         
                        int index63_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA63_2 = input.LA(1);

                         
                        int index63_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA63_3 = input.LA(1);

                         
                        int index63_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA63_4 = input.LA(1);

                         
                        int index63_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA63_5 = input.LA(1);

                         
                        int index63_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA63_6 = input.LA(1);

                         
                        int index63_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA63_7 = input.LA(1);

                         
                        int index63_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA63_8 = input.LA(1);

                         
                        int index63_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA63_9 = input.LA(1);

                         
                        int index63_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA63_10 = input.LA(1);

                         
                        int index63_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA63_11 = input.LA(1);

                         
                        int index63_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA63_12 = input.LA(1);

                         
                        int index63_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA63_13 = input.LA(1);

                         
                        int index63_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA63_14 = input.LA(1);

                         
                        int index63_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA63_15 = input.LA(1);

                         
                        int index63_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA63_16 = input.LA(1);

                         
                        int index63_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA63_17 = input.LA(1);

                         
                        int index63_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA63_18 = input.LA(1);

                         
                        int index63_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA63_19 = input.LA(1);

                         
                        int index63_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA63_20 = input.LA(1);

                         
                        int index63_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA63_21 = input.LA(1);

                         
                        int index63_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA63_22 = input.LA(1);

                         
                        int index63_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA63_23 = input.LA(1);

                         
                        int index63_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA63_24 = input.LA(1);

                         
                        int index63_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA63_25 = input.LA(1);

                         
                        int index63_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA63_26 = input.LA(1);

                         
                        int index63_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA63_27 = input.LA(1);

                         
                        int index63_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA63_28 = input.LA(1);

                         
                        int index63_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_CLang()) ) {s = 45;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index63_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 63, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA62_eotS =
        "\43\uffff";
    static final String DFA62_eofS =
        "\1\7\42\uffff";
    static final String DFA62_minS =
        "\1\76\42\uffff";
    static final String DFA62_maxS =
        "\1\u00a0\42\uffff";
    static final String DFA62_acceptS =
        "\1\uffff\1\1\5\uffff\1\2\33\uffff";
    static final String DFA62_specialS =
        "\43\uffff}>";
    static final String[] DFA62_transitionS = {
            "\4\7\1\1\1\7\1\1\1\7\1\uffff\1\7\35\uffff\1\7\1\uffff\4\7\2"+
            "\1\1\uffff\2\1\1\7\2\uffff\27\7\26\uffff\1\7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA62_eot = DFA.unpackEncodedString(DFA62_eotS);
    static final short[] DFA62_eof = DFA.unpackEncodedString(DFA62_eofS);
    static final char[] DFA62_min = DFA.unpackEncodedStringToUnsignedChars(DFA62_minS);
    static final char[] DFA62_max = DFA.unpackEncodedStringToUnsignedChars(DFA62_maxS);
    static final short[] DFA62_accept = DFA.unpackEncodedString(DFA62_acceptS);
    static final short[] DFA62_special = DFA.unpackEncodedString(DFA62_specialS);
    static final short[][] DFA62_transition;

    static {
        int numStates = DFA62_transitionS.length;
        DFA62_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA62_transition[i] = DFA.unpackEncodedString(DFA62_transitionS[i]);
        }
    }

    class DFA62 extends DFA {

        public DFA62(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 62;
            this.eot = DFA62_eot;
            this.eof = DFA62_eof;
            this.min = DFA62_min;
            this.max = DFA62_max;
            this.accept = DFA62_accept;
            this.special = DFA62_special;
            this.transition = DFA62_transition;
        }
        public String getDescription() {
            return "522:5: ( postfix_expression_opts[$primary_expression.tree] )?";
        }
    }
    static final String DFA71_eotS =
        "\22\uffff";
    static final String DFA71_eofS =
        "\22\uffff";
    static final String DFA71_minS =
        "\1\102\2\uffff\1\52\16\uffff";
    static final String DFA71_maxS =
        "\1\157\2\uffff\1\162\16\uffff";
    static final String DFA71_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\5\1\6\1\7\1\3\1\4\11\uffff";
    static final String DFA71_specialS =
        "\22\uffff}>";
    static final String[] DFA71_transitionS = {
            "\1\3\1\uffff\1\6\46\uffff\1\1\1\2\1\uffff\1\4\1\5",
            "",
            "",
            "\7\10\21\uffff\1\10\1\7\10\uffff\25\10\4\uffff\1\10\1\uffff"+
            "\2\10\2\uffff\3\10\2\uffff\3\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "526:1: postfix_expression_opts[CommonTree primary_expression] : ( incOp ( postfix_expression_sufix )* -> ^( ASSIGNMENT_STATEMENT incOp ( postfix_expression_sufix )* ) | decOp ( postfix_expression_sufix )* -> ^( ASSIGNMENT_STATEMENT decOp ( postfix_expression_sufix )* ) | ( lpar rpar ) ( postfix_expression_sufix )* -> lpar rpar ( postfix_expression_sufix )* | ( lpar argument_expression_list rpar ) ( postfix_expression_sufix )* -> ^( FUNCTION_CALL ^( ARGUMENT_LIST ( lpar argument_expression_list rpar )* ) ( postfix_expression_sufix )* ) | ( dotOp identifier ) ( postfix_expression_sufix )* -> ^( dotOp identifier ) ( postfix_expression_sufix )* | ( ptrOp identifier ) ( postfix_expression_sufix )* -> ^( ptrOp identifier ) ( postfix_expression_sufix )* | ( lbrack expression rbrack ) ( postfix_expression_sufix )* -> lbrack expression rbrack ( postfix_expression_sufix )* );";
        }
    }
    static final String DFA64_eotS =
        "\43\uffff";
    static final String DFA64_eofS =
        "\1\1\42\uffff";
    static final String DFA64_minS =
        "\1\76\42\uffff";
    static final String DFA64_maxS =
        "\1\u00a0\42\uffff";
    static final String DFA64_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\5\uffff";
    static final String DFA64_specialS =
        "\43\uffff}>";
    static final String[] DFA64_transitionS = {
            "\4\1\1\35\1\1\1\35\1\1\1\uffff\1\1\35\uffff\1\1\1\uffff\4\1"+
            "\2\35\1\uffff\2\35\1\1\2\uffff\27\1\26\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "()* loopback of 527:11: ( postfix_expression_sufix )*";
        }
    }
    static final String DFA65_eotS =
        "\43\uffff";
    static final String DFA65_eofS =
        "\1\1\42\uffff";
    static final String DFA65_minS =
        "\1\76\42\uffff";
    static final String DFA65_maxS =
        "\1\u00a0\42\uffff";
    static final String DFA65_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\5\uffff";
    static final String DFA65_specialS =
        "\43\uffff}>";
    static final String[] DFA65_transitionS = {
            "\4\1\1\35\1\1\1\35\1\1\1\uffff\1\1\35\uffff\1\1\1\uffff\4\1"+
            "\2\35\1\uffff\2\35\1\1\2\uffff\27\1\26\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "()* loopback of 528:18: ( postfix_expression_sufix )*";
        }
    }
    static final String DFA66_eotS =
        "\43\uffff";
    static final String DFA66_eofS =
        "\1\1\42\uffff";
    static final String DFA66_minS =
        "\1\76\42\uffff";
    static final String DFA66_maxS =
        "\1\u00a0\42\uffff";
    static final String DFA66_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\5\uffff";
    static final String DFA66_specialS =
        "\43\uffff}>";
    static final String[] DFA66_transitionS = {
            "\4\1\1\35\1\1\1\35\1\1\1\uffff\1\1\35\uffff\1\1\1\uffff\4\1"+
            "\2\35\1\uffff\2\35\1\1\2\uffff\27\1\26\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
    static final short[][] DFA66_transition;

    static {
        int numStates = DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
        }
    }

    class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }
        public String getDescription() {
            return "()* loopback of 529:24: ( postfix_expression_sufix )*";
        }
    }
    static final String DFA67_eotS =
        "\43\uffff";
    static final String DFA67_eofS =
        "\1\1\42\uffff";
    static final String DFA67_minS =
        "\1\76\42\uffff";
    static final String DFA67_maxS =
        "\1\u00a0\42\uffff";
    static final String DFA67_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\5\uffff";
    static final String DFA67_specialS =
        "\43\uffff}>";
    static final String[] DFA67_transitionS = {
            "\4\1\1\35\1\1\1\35\1\1\1\uffff\1\1\35\uffff\1\1\1\uffff\4\1"+
            "\2\35\1\uffff\2\35\1\1\2\uffff\27\1\26\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "()* loopback of 530:49: ( postfix_expression_sufix )*";
        }
    }
    static final String DFA68_eotS =
        "\43\uffff";
    static final String DFA68_eofS =
        "\1\1\42\uffff";
    static final String DFA68_minS =
        "\1\76\42\uffff";
    static final String DFA68_maxS =
        "\1\u00a0\42\uffff";
    static final String DFA68_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\5\uffff";
    static final String DFA68_specialS =
        "\43\uffff}>";
    static final String[] DFA68_transitionS = {
            "\4\1\1\35\1\1\1\35\1\1\1\uffff\1\1\35\uffff\1\1\1\uffff\4\1"+
            "\2\35\1\uffff\2\35\1\1\2\uffff\27\1\26\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_eotS);
    static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_eofS);
    static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_minS);
    static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_maxS);
    static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_acceptS);
    static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_specialS);
    static final short[][] DFA68_transition;

    static {
        int numStates = DFA68_transitionS.length;
        DFA68_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA68_transition[i] = DFA.unpackEncodedString(DFA68_transitionS[i]);
        }
    }

    class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;
        }
        public String getDescription() {
            return "()* loopback of 532:31: ( postfix_expression_sufix )*";
        }
    }
    static final String DFA69_eotS =
        "\43\uffff";
    static final String DFA69_eofS =
        "\1\1\42\uffff";
    static final String DFA69_minS =
        "\1\76\42\uffff";
    static final String DFA69_maxS =
        "\1\u00a0\42\uffff";
    static final String DFA69_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\5\uffff";
    static final String DFA69_specialS =
        "\43\uffff}>";
    static final String[] DFA69_transitionS = {
            "\4\1\1\35\1\1\1\35\1\1\1\uffff\1\1\35\uffff\1\1\1\uffff\4\1"+
            "\2\35\1\uffff\2\35\1\1\2\uffff\27\1\26\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "()* loopback of 533:31: ( postfix_expression_sufix )*";
        }
    }
    static final String DFA70_eotS =
        "\43\uffff";
    static final String DFA70_eofS =
        "\1\1\42\uffff";
    static final String DFA70_minS =
        "\1\76\42\uffff";
    static final String DFA70_maxS =
        "\1\u00a0\42\uffff";
    static final String DFA70_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\5\uffff";
    static final String DFA70_specialS =
        "\43\uffff}>";
    static final String[] DFA70_transitionS = {
            "\4\1\1\35\1\1\1\35\1\1\1\uffff\1\1\35\uffff\1\1\1\uffff\4\1"+
            "\2\35\1\uffff\2\35\1\1\2\uffff\27\1\26\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "()* loopback of 534:39: ( postfix_expression_sufix )*";
        }
    }
    static final String DFA72_eotS =
        "\22\uffff";
    static final String DFA72_eofS =
        "\22\uffff";
    static final String DFA72_minS =
        "\1\102\1\uffff\1\52\17\uffff";
    static final String DFA72_maxS =
        "\1\157\1\uffff\1\162\17\uffff";
    static final String DFA72_acceptS =
        "\1\uffff\1\1\1\uffff\1\4\1\5\1\6\1\7\1\2\1\3\11\uffff";
    static final String DFA72_specialS =
        "\22\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\2\1\uffff\1\1\46\uffff\1\5\1\6\1\uffff\1\3\1\4",
            "",
            "\7\10\21\uffff\1\10\1\7\10\uffff\25\10\4\uffff\1\10\1\uffff"+
            "\2\10\2\uffff\3\10\2\uffff\3\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "538:1: postfix_expression_sufix : ( lbrack expression rbrack | lpar rpar | lpar argument_expression_list rpar | dotOp identifier | ptrOp identifier | incOp | decOp );";
        }
    }
    static final String DFA73_eotS =
        "\52\uffff";
    static final String DFA73_eofS =
        "\52\uffff";
    static final String DFA73_minS =
        "\1\52\1\0\50\uffff";
    static final String DFA73_maxS =
        "\1\140\1\0\50\uffff";
    static final String DFA73_acceptS =
        "\2\uffff\1\2\1\3\2\uffff\1\4\42\uffff\1\1";
    static final String DFA73_specialS =
        "\1\uffff\1\0\50\uffff}>";
    static final String[] DFA73_transitionS = {
            "\1\1\6\2\21\uffff\1\6\11\uffff\25\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "561:1: primary_expression : ( identifier | constant_h | type_specifier_h | lpar expression rpar );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA73_1 = input.LA(1);

                         
                        int index73_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_CLang()) ) {s = 41;}

                        else if ( ((synpred138_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 3;}

                         
                        input.seek(index73_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 73, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA75_eotS =
        "\u00a8\uffff";
    static final String DFA75_eofS =
        "\1\uffff\3\14\u00a4\uffff";
    static final String DFA75_minS =
        "\1\52\3\76\7\52\1\0\34\uffff\6\0\34\uffff\6\0\34\uffff\23\0\1\uffff"+
        "\50\0";
    static final String DFA75_maxS =
        "\1\162\3\u00a0\2\106\5\162\1\0\34\uffff\6\0\34\uffff\6\0\34\uffff"+
        "\23\0\1\uffff\50\0";
    static final String DFA75_acceptS =
        "\14\uffff\1\2\32\uffff\1\1\u0080\uffff";
    static final String DFA75_specialS =
        "\13\uffff\1\0\34\uffff\1\1\1\2\1\3\1\4\1\5\1\6\34\uffff\1\7\1\10"+
        "\1\11\1\12\1\13\1\14\34\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
        "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\uffff"+
        "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
        "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
        "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
        "\1\106\1\107}>";
    static final String[] DFA75_transitionS = {
            "\1\1\6\2\21\uffff\1\6\11\uffff\22\3\2\4\1\5\4\uffff\1\11\1"+
            "\uffff\2\11\2\uffff\1\7\1\10\1\12\2\uffff\3\11",
            "\1\47\3\14\1\13\1\14\1\54\1\14\1\uffff\1\14\35\uffff\1\14"+
            "\1\uffff\4\14\1\50\1\51\1\uffff\1\52\1\53\1\14\2\uffff\12\47"+
            "\15\14\26\uffff\1\14",
            "\1\47\3\14\1\55\1\14\1\116\1\14\1\uffff\1\14\35\uffff\1\14"+
            "\1\uffff\4\14\1\112\1\113\1\uffff\1\114\1\115\1\14\2\uffff\12"+
            "\47\15\14\26\uffff\1\14",
            "\1\47\3\14\1\117\1\14\1\160\1\14\1\uffff\1\14\35\uffff\1\14"+
            "\1\uffff\4\14\1\154\1\155\1\uffff\1\156\1\157\1\14\2\uffff\12"+
            "\47\15\14\26\uffff\1\14",
            "\1\161\33\uffff\1\162",
            "\1\164\33\uffff\1\163",
            "\1\165\6\166\21\uffff\1\172\11\uffff\22\167\2\170\1\171\2"+
            "\14\2\uffff\1\175\1\uffff\2\175\2\uffff\1\173\1\174\1\176\2"+
            "\uffff\3\175",
            "\1\u0080\6\u0081\21\uffff\1\u0085\11\uffff\22\u0082\2\u0083"+
            "\1\u0084\4\uffff\1\u0088\1\uffff\2\u0088\2\uffff\1\u0086\1\u0087"+
            "\1\u0089\2\uffff\3\u0088",
            "\1\u008a\6\u008b\21\uffff\1\u008f\11\uffff\22\u008c\2\u008d"+
            "\1\u008e\4\uffff\1\u0092\1\uffff\2\u0092\2\uffff\1\u0090\1\u0091"+
            "\1\u0093\2\uffff\3\u0092",
            "\1\u0095\6\u0096\21\uffff\1\u0094\11\uffff\22\u0097\2\u0098"+
            "\1\u0099\4\uffff\1\u009c\1\uffff\2\u009c\2\uffff\1\u009a\1\u009b"+
            "\1\u009d\2\uffff\3\u009c",
            "\1\u009f\6\u00a0\21\uffff\1\u009e\11\uffff\22\u00a1\2\u00a2"+
            "\1\u00a3\4\uffff\1\u00a6\1\uffff\2\u00a6\2\uffff\1\u00a4\1\u00a5"+
            "\1\u00a7\2\uffff\3\u00a6",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "610:1: assignment_expression : ( lvalue assignment_operator assignment_expression -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignment_operator lvalue ^( VALUE assignment_expression ) ) ) | conditional_expression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA75_11 = input.LA(1);

                         
                        int index75_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred145_CLang()&&(isTypeName(input.LT(1).getText())))||synpred145_CLang()||(synpred145_CLang()&&(isTypeName(input.LT(1).getText())))||(synpred145_CLang()&&(isTypeName(input.LT(1).getText()))))) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA75_40 = input.LA(1);

                         
                        int index75_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred145_CLang()||(synpred145_CLang()&&(isTypeName(input.LT(1).getText()))))) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_40);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA75_41 = input.LA(1);

                         
                        int index75_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred145_CLang()||(synpred145_CLang()&&(isTypeName(input.LT(1).getText()))))) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_41);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA75_42 = input.LA(1);

                         
                        int index75_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred145_CLang()||(synpred145_CLang()&&(isTypeName(input.LT(1).getText()))))) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA75_43 = input.LA(1);

                         
                        int index75_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred145_CLang()||(synpred145_CLang()&&(isTypeName(input.LT(1).getText()))))) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_43);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA75_44 = input.LA(1);

                         
                        int index75_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred145_CLang()||(synpred145_CLang()&&(isTypeName(input.LT(1).getText()))))) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_44);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA75_45 = input.LA(1);

                         
                        int index75_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_45);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA75_74 = input.LA(1);

                         
                        int index75_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_74);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA75_75 = input.LA(1);

                         
                        int index75_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_75);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA75_76 = input.LA(1);

                         
                        int index75_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_76);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA75_77 = input.LA(1);

                         
                        int index75_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_77);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA75_78 = input.LA(1);

                         
                        int index75_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_78);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA75_79 = input.LA(1);

                         
                        int index75_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_79);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA75_108 = input.LA(1);

                         
                        int index75_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_108);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA75_109 = input.LA(1);

                         
                        int index75_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_109);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA75_110 = input.LA(1);

                         
                        int index75_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_110);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA75_111 = input.LA(1);

                         
                        int index75_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_111);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA75_112 = input.LA(1);

                         
                        int index75_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_112);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA75_113 = input.LA(1);

                         
                        int index75_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_113);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA75_114 = input.LA(1);

                         
                        int index75_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_114);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA75_115 = input.LA(1);

                         
                        int index75_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_115);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA75_116 = input.LA(1);

                         
                        int index75_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_116);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA75_117 = input.LA(1);

                         
                        int index75_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_117);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA75_118 = input.LA(1);

                         
                        int index75_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_118);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA75_119 = input.LA(1);

                         
                        int index75_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_119);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA75_120 = input.LA(1);

                         
                        int index75_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_120);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA75_121 = input.LA(1);

                         
                        int index75_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_121);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA75_122 = input.LA(1);

                         
                        int index75_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_122);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA75_123 = input.LA(1);

                         
                        int index75_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_123);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA75_124 = input.LA(1);

                         
                        int index75_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_124);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA75_125 = input.LA(1);

                         
                        int index75_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_125);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA75_126 = input.LA(1);

                         
                        int index75_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_126);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA75_128 = input.LA(1);

                         
                        int index75_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_128);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA75_129 = input.LA(1);

                         
                        int index75_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_129);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA75_130 = input.LA(1);

                         
                        int index75_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_130);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA75_131 = input.LA(1);

                         
                        int index75_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_131);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA75_132 = input.LA(1);

                         
                        int index75_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_132);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA75_133 = input.LA(1);

                         
                        int index75_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_133);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA75_134 = input.LA(1);

                         
                        int index75_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_134);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA75_135 = input.LA(1);

                         
                        int index75_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_135);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA75_136 = input.LA(1);

                         
                        int index75_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_136);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA75_137 = input.LA(1);

                         
                        int index75_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_137);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA75_138 = input.LA(1);

                         
                        int index75_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_138);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA75_139 = input.LA(1);

                         
                        int index75_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_139);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA75_140 = input.LA(1);

                         
                        int index75_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_140);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA75_141 = input.LA(1);

                         
                        int index75_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_141);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA75_142 = input.LA(1);

                         
                        int index75_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_142);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA75_143 = input.LA(1);

                         
                        int index75_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_143);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA75_144 = input.LA(1);

                         
                        int index75_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_144);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA75_145 = input.LA(1);

                         
                        int index75_145 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_145);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA75_146 = input.LA(1);

                         
                        int index75_146 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_146);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA75_147 = input.LA(1);

                         
                        int index75_147 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_147);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA75_148 = input.LA(1);

                         
                        int index75_148 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_148);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA75_149 = input.LA(1);

                         
                        int index75_149 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_149);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA75_150 = input.LA(1);

                         
                        int index75_150 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_150);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA75_151 = input.LA(1);

                         
                        int index75_151 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_151);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA75_152 = input.LA(1);

                         
                        int index75_152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_152);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA75_153 = input.LA(1);

                         
                        int index75_153 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_153);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA75_154 = input.LA(1);

                         
                        int index75_154 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_154);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA75_155 = input.LA(1);

                         
                        int index75_155 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_155);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA75_156 = input.LA(1);

                         
                        int index75_156 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_156);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA75_157 = input.LA(1);

                         
                        int index75_157 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_157);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA75_158 = input.LA(1);

                         
                        int index75_158 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_158);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA75_159 = input.LA(1);

                         
                        int index75_159 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_159);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA75_160 = input.LA(1);

                         
                        int index75_160 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_160);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA75_161 = input.LA(1);

                         
                        int index75_161 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_161);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA75_162 = input.LA(1);

                         
                        int index75_162 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_162);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA75_163 = input.LA(1);

                         
                        int index75_163 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_163);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA75_164 = input.LA(1);

                         
                        int index75_164 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_164);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA75_165 = input.LA(1);

                         
                        int index75_165 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_165);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA75_166 = input.LA(1);

                         
                        int index75_166 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_166);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA75_167 = input.LA(1);

                         
                        int index75_167 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_CLang()) ) {s = 39;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index75_167);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA76_eotS =
        "\12\uffff";
    static final String DFA76_eofS =
        "\1\2\11\uffff";
    static final String DFA76_minS =
        "\1\77\11\uffff";
    static final String DFA76_maxS =
        "\1\u00a0\11\uffff";
    static final String DFA76_acceptS =
        "\1\uffff\1\1\1\2\7\uffff";
    static final String DFA76_specialS =
        "\12\uffff}>";
    static final String[] DFA76_transitionS = {
            "\3\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\65\uffff\1\1\42\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "638:26: ( qMarkSep expression colon conditional_expression )?";
        }
    }
    static final String DFA79_eotS =
        "\13\uffff";
    static final String DFA79_eofS =
        "\1\1\12\uffff";
    static final String DFA79_minS =
        "\1\77\12\uffff";
    static final String DFA79_maxS =
        "\1\u00a0\12\uffff";
    static final String DFA79_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA79_specialS =
        "\13\uffff}>";
    static final String[] DFA79_transitionS = {
            "\3\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\65\uffff\1\1\1\12"+
            "\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_eotS);
    static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_eofS);
    static final char[] DFA79_min = DFA.unpackEncodedStringToUnsignedChars(DFA79_minS);
    static final char[] DFA79_max = DFA.unpackEncodedStringToUnsignedChars(DFA79_maxS);
    static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_acceptS);
    static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_specialS);
    static final short[][] DFA79_transition;

    static {
        int numStates = DFA79_transitionS.length;
        DFA79_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA79_transition[i] = DFA.unpackEncodedString(DFA79_transitionS[i]);
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;
        }
        public String getDescription() {
            return "()* loopback of 666:27: ( logOpOr logical_and_expression )*";
        }
    }
    static final String DFA80_eotS =
        "\14\uffff";
    static final String DFA80_eofS =
        "\1\1\13\uffff";
    static final String DFA80_minS =
        "\1\77\13\uffff";
    static final String DFA80_maxS =
        "\1\u00a0\13\uffff";
    static final String DFA80_acceptS =
        "\1\uffff\1\2\11\uffff\1\1";
    static final String DFA80_specialS =
        "\14\uffff}>";
    static final String[] DFA80_transitionS = {
            "\3\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\65\uffff\2\1\1\13"+
            "\40\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "()* loopback of 670:28: ( logOpAnd inclusive_or_expression )*";
        }
    }
    static final String DFA81_eotS =
        "\15\uffff";
    static final String DFA81_eofS =
        "\1\1\14\uffff";
    static final String DFA81_minS =
        "\1\77\14\uffff";
    static final String DFA81_maxS =
        "\1\u00a0\14\uffff";
    static final String DFA81_acceptS =
        "\1\uffff\1\2\12\uffff\1\1";
    static final String DFA81_specialS =
        "\15\uffff}>";
    static final String[] DFA81_transitionS = {
            "\3\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\65\uffff\3\1\1\14"+
            "\37\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "()* loopback of 674:28: ( orOp exclusive_or_expression )*";
        }
    }
    static final String DFA82_eotS =
        "\16\uffff";
    static final String DFA82_eofS =
        "\1\1\15\uffff";
    static final String DFA82_minS =
        "\1\77\15\uffff";
    static final String DFA82_maxS =
        "\1\u00a0\15\uffff";
    static final String DFA82_acceptS =
        "\1\uffff\1\2\13\uffff\1\1";
    static final String DFA82_specialS =
        "\16\uffff}>";
    static final String[] DFA82_transitionS = {
            "\3\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\65\uffff\4\1\1\15"+
            "\36\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "()* loopback of 678:19: ( xorOp and_expression )*";
        }
    }
    static final String DFA83_eotS =
        "\17\uffff";
    static final String DFA83_eofS =
        "\1\1\16\uffff";
    static final String DFA83_minS =
        "\1\77\16\uffff";
    static final String DFA83_maxS =
        "\1\u00a0\16\uffff";
    static final String DFA83_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA83_specialS =
        "\17\uffff}>";
    static final String[] DFA83_transitionS = {
            "\3\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\50\uffff\1\16\14\uffff"+
            "\5\1\36\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "()* loopback of 682:24: ( andOp equality_expression )*";
        }
    }
    static final String DFA84_eotS =
        "\21\uffff";
    static final String DFA84_eofS =
        "\1\1\20\uffff";
    static final String DFA84_minS =
        "\1\77\20\uffff";
    static final String DFA84_maxS =
        "\1\u00a0\20\uffff";
    static final String DFA84_acceptS =
        "\1\uffff\1\2\15\uffff\1\1\1\uffff";
    static final String DFA84_specialS =
        "\21\uffff}>";
    static final String[] DFA84_transitionS = {
            "\3\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\50\uffff\1\1\14\uffff"+
            "\5\1\2\17\34\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "()* loopback of 686:26: ( equality_op relational_expression )*";
        }
    }
    static final String DFA85_eotS =
        "\25\uffff";
    static final String DFA85_eofS =
        "\1\1\24\uffff";
    static final String DFA85_minS =
        "\1\77\24\uffff";
    static final String DFA85_maxS =
        "\1\u00a0\24\uffff";
    static final String DFA85_acceptS =
        "\1\uffff\1\2\17\uffff\1\1\3\uffff";
    static final String DFA85_specialS =
        "\25\uffff}>";
    static final String[] DFA85_transitionS = {
            "\3\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\50\uffff\1\1\14\uffff"+
            "\7\1\4\21\30\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "()* loopback of 690:21: ( relational_op shift_expression )*";
        }
    }
    static final String DFA87_eotS =
        "\27\uffff";
    static final String DFA87_eofS =
        "\1\1\26\uffff";
    static final String DFA87_minS =
        "\1\77\26\uffff";
    static final String DFA87_maxS =
        "\1\u00a0\26\uffff";
    static final String DFA87_acceptS =
        "\1\uffff\1\2\23\uffff\1\1\1\uffff";
    static final String DFA87_specialS =
        "\27\uffff}>";
    static final String[] DFA87_transitionS = {
            "\3\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\50\uffff\1\1\14\uffff"+
            "\13\1\2\25\26\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "()* loopback of 694:24: ( ( shlOp | shrOp ) additive_expression )*";
        }
    }
    static final String DFA88_eotS =
        "\72\uffff";
    static final String DFA88_eofS =
        "\72\uffff";
    static final String DFA88_minS =
        "\1\52\1\76\70\uffff";
    static final String DFA88_maxS =
        "\1\u009f\1\u0089\70\uffff";
    static final String DFA88_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\1\3\11\uffff\1\4\1\uffff\1\5\2\uffff\1"+
        "\6\3\uffff\1\7\41\uffff";
    static final String DFA88_specialS =
        "\72\uffff}>";
    static final String[] DFA88_transitionS = {
            "\1\1\6\5\20\uffff\2\5\3\uffff\1\4\5\uffff\25\5\2\30\2\uffff"+
            "\1\5\1\uffff\2\5\2\uffff\3\5\2\uffff\3\5\27\uffff\12\30\2\2"+
            "\1\17\1\uffff\1\17\3\21\4\24",
            "\2\5\1\2\2\5\1\uffff\1\5\40\uffff\1\5\1\uffff\6\5\1\uffff"+
            "\3\5\2\uffff\27\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "699:1: statement : ( labeled_statement | compound_statement | expression_statement | selection_statement -> ^( BRANCH_STATEMENT selection_statement ) | iteration_statement -> ^( LOOP_STATEMENT iteration_statement ) | jump_statement -> ^( JUMP_STATEMENT jump_statement ) | asm_statement );";
        }
    }
    static final String DFA101_eotS =
        "\u009f\uffff";
    static final String DFA101_eofS =
        "\u009f\uffff";
    static final String DFA101_minS =
        "\2\52\5\uffff\4\52\2\uffff\1\52\16\uffff\1\52\12\uffff\1\0\2\uffff"+
        "\1\0\11\uffff\1\0\23\uffff\1\0\2\uffff\1\0\1\uffff\1\0\31\uffff"+
        "\1\0\6\uffff\5\0\4\uffff\1\0\2\uffff\1\0\4\uffff\2\0\1\uffff\3\0"+
        "\2\uffff\1\0\12\uffff\1\0\5\uffff\1\0\6\uffff";
    static final String DFA101_maxS =
        "\2\u00a0\5\uffff\1\u00a0\2\106\1\u00a0\2\uffff\1\u00a0\16\uffff"+
        "\1\u00a0\12\uffff\1\0\2\uffff\1\0\11\uffff\1\0\23\uffff\1\0\2\uffff"+
        "\1\0\1\uffff\1\0\31\uffff\1\0\6\uffff\5\0\4\uffff\1\0\2\uffff\1"+
        "\0\4\uffff\2\0\1\uffff\3\0\2\uffff\1\0\12\uffff\1\0\5\uffff\1\0"+
        "\6\uffff";
    static final String DFA101_acceptS =
        "\2\uffff\1\2\33\uffff\1\1\u0080\uffff";
    static final String DFA101_specialS =
        "\47\uffff\1\0\2\uffff\1\1\11\uffff\1\2\23\uffff\1\3\2\uffff\1\4"+
        "\1\uffff\1\5\31\uffff\1\6\6\uffff\1\7\1\10\1\11\1\12\1\13\4\uffff"+
        "\1\14\2\uffff\1\15\4\uffff\1\16\1\17\1\uffff\1\20\1\21\1\22\2\uffff"+
        "\1\23\12\uffff\1\24\5\uffff\1\25\6\uffff}>";
    static final String[] DFA101_transitionS = {
            "\1\1\6\2\14\uffff\1\36\3\uffff\1\2\1\12\3\uffff\2\2\4\36\22"+
            "\7\2\10\1\11\2\34\2\36\1\15\1\uffff\2\2\2\uffff\3\2\2\uffff"+
            "\3\2\27\uffff\15\2\1\uffff\10\2\1\36",
            "\1\36\23\uffff\3\2\1\110\1\47\1\uffff\1\52\1\uffff\1\36\1"+
            "\uffff\35\36\1\64\1\uffff\6\2\1\uffff\3\2\2\uffff\27\2\26\uffff"+
            "\1\36",
            "",
            "",
            "",
            "",
            "",
            "\1\36\23\uffff\2\2\1\uffff\1\147\1\115\1\uffff\1\2\3\uffff"+
            "\35\36\1\113\1\uffff\6\2\1\uffff\3\2\2\uffff\27\2\26\uffff\1"+
            "\36",
            "\1\156\33\uffff\1\157",
            "\1\161\33\uffff\1\160",
            "\1\162\6\2\21\uffff\1\167\11\uffff\27\2\2\uffff\1\172\1\uffff"+
            "\2\2\2\uffff\3\2\2\uffff\3\2\55\uffff\1\36",
            "",
            "",
            "\1\u0080\6\2\21\uffff\1\177\3\uffff\1\36\1\uffff\4\36\22\u0082"+
            "\2\u0083\1\u0084\4\36\1\u0087\1\uffff\2\2\2\uffff\3\2\2\uffff"+
            "\3\2\55\uffff\1\36",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\36\26\uffff\1\36\1\u0092\5\uffff\31\36\2\u0098\3\36\44"+
            "\uffff\12\2\14\uffff\1\36",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "()* loopback of 777:11: ( external_declaration )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA101_39 = input.LA(1);

                         
                        int index101_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred199_CLang()&&(isTypeName(input.LT(1).getText())))||(synpred199_CLang()&&(isTypeName(input.LT(1).getText())))||synpred199_CLang())) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_39);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA101_42 = input.LA(1);

                         
                        int index101_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_42);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA101_52 = input.LA(1);

                         
                        int index101_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred199_CLang()&&(isTypeName(input.LT(1).getText())))||(synpred199_CLang()&&(isTypeName(input.LT(1).getText()))))) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_52);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA101_72 = input.LA(1);

                         
                        int index101_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_72);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA101_75 = input.LA(1);

                         
                        int index101_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_75);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA101_77 = input.LA(1);

                         
                        int index101_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_77);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA101_103 = input.LA(1);

                         
                        int index101_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_103);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA101_110 = input.LA(1);

                         
                        int index101_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_110);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA101_111 = input.LA(1);

                         
                        int index101_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_111);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA101_112 = input.LA(1);

                         
                        int index101_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_112);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA101_113 = input.LA(1);

                         
                        int index101_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_113);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA101_114 = input.LA(1);

                         
                        int index101_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_114);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA101_119 = input.LA(1);

                         
                        int index101_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_119);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA101_122 = input.LA(1);

                         
                        int index101_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_122);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA101_127 = input.LA(1);

                         
                        int index101_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_127);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA101_128 = input.LA(1);

                         
                        int index101_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_128);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA101_130 = input.LA(1);

                         
                        int index101_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_130);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA101_131 = input.LA(1);

                         
                        int index101_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_131);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA101_132 = input.LA(1);

                         
                        int index101_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_132);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA101_135 = input.LA(1);

                         
                        int index101_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_135);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA101_146 = input.LA(1);

                         
                        int index101_146 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_146);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA101_152 = input.LA(1);

                         
                        int index101_152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_CLang()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_152);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 101, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA102_eotS =
        "\36\uffff";
    static final String DFA102_eofS =
        "\36\uffff";
    static final String DFA102_minS =
        "\1\52\35\uffff";
    static final String DFA102_maxS =
        "\1\u009f\35\uffff";
    static final String DFA102_acceptS =
        "\1\uffff\1\2\1\1\33\uffff";
    static final String DFA102_specialS =
        "\36\uffff}>";
    static final String[] DFA102_transitionS = {
            "\7\2\20\uffff\2\2\3\uffff\1\2\1\1\4\uffff\27\2\2\uffff\1\2"+
            "\1\uffff\2\2\2\uffff\3\2\2\uffff\3\2\27\uffff\15\2\1\uffff\10"+
            "\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA102_eot = DFA.unpackEncodedString(DFA102_eotS);
    static final short[] DFA102_eof = DFA.unpackEncodedString(DFA102_eofS);
    static final char[] DFA102_min = DFA.unpackEncodedStringToUnsignedChars(DFA102_minS);
    static final char[] DFA102_max = DFA.unpackEncodedStringToUnsignedChars(DFA102_maxS);
    static final short[] DFA102_accept = DFA.unpackEncodedString(DFA102_acceptS);
    static final short[] DFA102_special = DFA.unpackEncodedString(DFA102_specialS);
    static final short[][] DFA102_transition;

    static {
        int numStates = DFA102_transitionS.length;
        DFA102_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA102_transition[i] = DFA.unpackEncodedString(DFA102_transitionS[i]);
        }
    }

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = DFA102_eot;
            this.eof = DFA102_eof;
            this.min = DFA102_min;
            this.max = DFA102_max;
            this.accept = DFA102_accept;
            this.special = DFA102_special;
            this.transition = DFA102_transition;
        }
        public String getDescription() {
            return "()* loopback of 777:33: ( statement )*";
        }
    }
    static final String DFA103_eotS =
        "\14\uffff";
    static final String DFA103_eofS =
        "\14\uffff";
    static final String DFA103_minS =
        "\1\52\13\uffff";
    static final String DFA103_maxS =
        "\1\162\13\uffff";
    static final String DFA103_acceptS =
        "\1\uffff\1\1\1\2\11\uffff";
    static final String DFA103_specialS =
        "\14\uffff}>";
    static final String[] DFA103_transitionS = {
            "\7\2\20\uffff\1\1\1\2\11\uffff\25\2\4\uffff\1\2\1\uffff\2\2"+
            "\2\uffff\3\2\2\uffff\3\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA103_eot = DFA.unpackEncodedString(DFA103_eotS);
    static final short[] DFA103_eof = DFA.unpackEncodedString(DFA103_eofS);
    static final char[] DFA103_min = DFA.unpackEncodedStringToUnsignedChars(DFA103_minS);
    static final char[] DFA103_max = DFA.unpackEncodedStringToUnsignedChars(DFA103_maxS);
    static final short[] DFA103_accept = DFA.unpackEncodedString(DFA103_acceptS);
    static final short[] DFA103_special = DFA.unpackEncodedString(DFA103_specialS);
    static final short[][] DFA103_transition;

    static {
        int numStates = DFA103_transitionS.length;
        DFA103_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA103_transition[i] = DFA.unpackEncodedString(DFA103_transitionS[i]);
        }
    }

    class DFA103 extends DFA {

        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = DFA103_eot;
            this.eof = DFA103_eof;
            this.min = DFA103_min;
            this.max = DFA103_max;
            this.accept = DFA103_accept;
            this.special = DFA103_special;
            this.transition = DFA103_transition;
        }
        public String getDescription() {
            return "785:1: expression_statement : ( semi | expression semi );";
        }
    }
    static final String DFA106_eotS =
        "\14\uffff";
    static final String DFA106_eofS =
        "\14\uffff";
    static final String DFA106_minS =
        "\1\52\13\uffff";
    static final String DFA106_maxS =
        "\1\162\13\uffff";
    static final String DFA106_acceptS =
        "\1\uffff\1\1\11\uffff\1\2";
    static final String DFA106_specialS =
        "\14\uffff}>";
    static final String[] DFA106_transitionS = {
            "\7\1\21\uffff\1\1\1\13\10\uffff\25\1\4\uffff\1\1\1\uffff\2"+
            "\1\2\uffff\3\1\2\uffff\3\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "808:57: ( expression )?";
        }
    }
    static final String DFA108_eotS =
        "\20\uffff";
    static final String DFA108_eofS =
        "\20\uffff";
    static final String DFA108_minS =
        "\1\u009c\3\uffff\1\52\13\uffff";
    static final String DFA108_maxS =
        "\1\u009f\3\uffff\1\162\13\uffff";
    static final String DFA108_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\uffff\1\5\11\uffff\1\4";
    static final String DFA108_specialS =
        "\20\uffff}>";
    static final String[] DFA108_transitionS = {
            "\1\1\1\2\1\3\1\4",
            "",
            "",
            "",
            "\7\5\20\uffff\1\17\1\5\11\uffff\25\5\4\uffff\1\5\1\uffff\2"+
            "\5\2\uffff\3\5\2\uffff\3\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA108_eot = DFA.unpackEncodedString(DFA108_eotS);
    static final short[] DFA108_eof = DFA.unpackEncodedString(DFA108_eofS);
    static final char[] DFA108_min = DFA.unpackEncodedStringToUnsignedChars(DFA108_minS);
    static final char[] DFA108_max = DFA.unpackEncodedStringToUnsignedChars(DFA108_maxS);
    static final short[] DFA108_accept = DFA.unpackEncodedString(DFA108_acceptS);
    static final short[] DFA108_special = DFA.unpackEncodedString(DFA108_specialS);
    static final short[][] DFA108_transition;

    static {
        int numStates = DFA108_transitionS.length;
        DFA108_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA108_transition[i] = DFA.unpackEncodedString(DFA108_transitionS[i]);
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;
        }
        public String getDescription() {
            return "813:1: jump_statement : ( 'goto' identifier semi -> ^( KEYWORD 'goto' ) identifier semi | 'continue' semi -> ^( KEYWORD 'continue' ) semi | 'break' semi -> ^( KEYWORD 'break' ) semi | 'return' semi -> ^( KEYWORD 'return' ) semi | 'return' expression semi -> ^( KEYWORD 'return' ) expression semi );";
        }
    }
    static final String DFA113_eotS =
        "\34\uffff";
    static final String DFA113_eofS =
        "\34\uffff";
    static final String DFA113_minS =
        "\1\141\33\uffff";
    static final String DFA113_maxS =
        "\1\u0117\33\uffff";
    static final String DFA113_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33";
    static final String DFA113_specialS =
        "\34\uffff}>";
    static final String[] DFA113_transitionS = {
            "\1\6\1\uffff\1\22\52\uffff\3\6\20\uffff\4\1\4\2\4\3\4\4\4\5"+
            "\4\7\4\10\4\11\4\12\4\13\4\14\4\15\20\uffff\4\16\4\17\4\21\3"+
            "\22\4\23\4\24\4\20\4\25\4\26\4\27\4\30\4\31\4\32\4\33",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "905:1: attribute_extension : ( attribute_alias_nm lpar string_lit rpar | attribute_aligned_nm ( lpar decimal_lit rpar )? | attribute_always_inline_nm | attribute_cdecl_nm | attribute_cleanup_nm lpar identifier rpar | attribute_const_nm | attribute_constructor_nm | attribute_deprecated_nm | attribute_destructor_nm | attribute_dllexport_nm | attribute_dllimport_nm | attribute_eightbit_nm | attribute_format_nm lpar format_archetype comma decimal_lit comma decimal_lit rpar | attribute_leaf_nm | attribute_malloc_nm | attribute_mode_nm lpar identifier rpar | attribute_noinline_nm | attribute_noreturn_nm | attribute_used_nm | attribute_unused_nm | attribute_nonnull_nm ( lpar decimal_lit ( comma decimal_lit )* rpar )? | attribute_nothrow_nm | attribute_pure_nm | attribute_trans_union_nm | attribute_vector_size_nm lpar decimal_lit rpar | attribute_visibility_nm | attribute_weak_nm );";
        }
    }
    static final String DFA114_eotS =
        "\30\uffff";
    static final String DFA114_eofS =
        "\30\uffff";
    static final String DFA114_minS =
        "\1\52\4\uffff\1\52\5\uffff\1\0\1\uffff\10\0\3\uffff";
    static final String DFA114_maxS =
        "\1\u00a0\4\uffff\1\u00a0\5\uffff\1\0\1\uffff\10\0\3\uffff";
    static final String DFA114_acceptS =
        "\1\uffff\1\1\6\uffff\1\2\17\uffff";
    static final String DFA114_specialS =
        "\13\uffff\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\3\uffff}>";
    static final String[] DFA114_transitionS = {
            "\1\5\27\uffff\1\10\5\uffff\35\1\1\10\72\uffff\1\10",
            "",
            "",
            "",
            "",
            "\1\15\22\uffff\1\10\4\uffff\1\16\1\uffff\1\10\1\uffff\1\10"+
            "\1\uffff\4\17\22\20\2\21\1\22\2\23\2\24\1\1\72\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_eotS);
    static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_eofS);
    static final char[] DFA114_min = DFA.unpackEncodedStringToUnsignedChars(DFA114_minS);
    static final char[] DFA114_max = DFA.unpackEncodedStringToUnsignedChars(DFA114_maxS);
    static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_acceptS);
    static final short[] DFA114_special = DFA.unpackEncodedString(DFA114_specialS);
    static final short[][] DFA114_transition;

    static {
        int numStates = DFA114_transitionS.length;
        DFA114_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA114_transition[i] = DFA.unpackEncodedString(DFA114_transitionS[i]);
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = DFA114_eot;
            this.eof = DFA114_eof;
            this.min = DFA114_min;
            this.max = DFA114_max;
            this.accept = DFA114_accept;
            this.special = DFA114_special;
            this.transition = DFA114_transition;
        }
        public String getDescription() {
            return "157:6: ( declaration_specifiers )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA114_11 = input.LA(1);

                         
                        int index114_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index114_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA114_13 = input.LA(1);

                         
                        int index114_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index114_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA114_14 = input.LA(1);

                         
                        int index114_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index114_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA114_15 = input.LA(1);

                         
                        int index114_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index114_15);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA114_16 = input.LA(1);

                         
                        int index114_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index114_16);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA114_17 = input.LA(1);

                         
                        int index114_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index114_17);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA114_18 = input.LA(1);

                         
                        int index114_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index114_18);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA114_19 = input.LA(1);

                         
                        int index114_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index114_19);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA114_20 = input.LA(1);

                         
                        int index114_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_CLang()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index114_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 114, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA115_eotS =
        "\13\uffff";
    static final String DFA115_eofS =
        "\13\uffff";
    static final String DFA115_minS =
        "\1\52\12\uffff";
    static final String DFA115_maxS =
        "\1\u00a0\12\uffff";
    static final String DFA115_acceptS =
        "\1\uffff\1\2\1\1\10\uffff";
    static final String DFA115_specialS =
        "\13\uffff}>";
    static final String[] DFA115_transitionS = {
            "\1\2\22\uffff\1\2\10\uffff\1\1\1\uffff\35\2\73\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_eotS);
    static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_eofS);
    static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_minS);
    static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_maxS);
    static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_acceptS);
    static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_specialS);
    static final short[][] DFA115_transition;

    static {
        int numStates = DFA115_transitionS.length;
        DFA115_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA115_transition[i] = DFA.unpackEncodedString(DFA115_transitionS[i]);
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;
        }
        public String getDescription() {
            return "()* loopback of 157:41: ( declaration )*";
        }
    }
 

    public static final BitSet FOLLOW_external_declaration_in_translation_unit267 = new BitSet(new long[]{0x2000040000000002L,0x0000003FFFFFFF04L,0x0000000100000000L});
    public static final BitSet FOLLOW_function_definition_in_external_declaration322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_external_declaration327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_specifiers_in_function_definition353 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF04L,0x0000000100000000L});
    public static final BitSet FOLLOW_declarator_in_function_definition356 = new BitSet(new long[]{0x0000040000000000L,0x0000001FFFFFFF40L});
    public static final BitSet FOLLOW_funcBody_in_function_definition358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_declaration_KAndR_in_funcBody386 = new BitSet(new long[]{0x0000040000000000L,0x0000001FFFFFFF40L});
    public static final BitSet FOLLOW_compound_statement_in_funcBody389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_statement_in_funcBody414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_specifiers_in_parameter_declaration_KAndR439 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF06L,0x0000000100000000L});
    public static final BitSet FOLLOW_init_declarator_list_in_parameter_declaration_KAndR441 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF06L,0x0000000100000000L});
    public static final BitSet FOLLOW_semi_in_parameter_declaration_KAndR444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_declaration481 = new BitSet(new long[]{0x0000040000000000L,0x00000007FFFFFF00L});
    public static final BitSet FOLLOW_storage_class_specifier_h_in_declaration485 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF04L,0x0000000100000000L});
    public static final BitSet FOLLOW_type_specifier_s_in_declaration489 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF04L,0x0000000100000000L});
    public static final BitSet FOLLOW_type_qualifier_h_in_declaration493 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF04L,0x0000000100000000L});
    public static final BitSet FOLLOW_init_declarator_list_in_declaration502 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF06L,0x0000000100000000L});
    public static final BitSet FOLLOW_semi_in_declaration504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_spec_in_declaration510 = new BitSet(new long[]{0x0000040000000000L,0x0000001FFFFFFF00L,0x0000000100000000L});
    public static final BitSet FOLLOW_declaration_specifiers_in_declaration513 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF06L,0x0000000100000000L});
    public static final BitSet FOLLOW_init_declarator_list_in_declaration515 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF06L,0x0000000100000000L});
    public static final BitSet FOLLOW_semi_in_declaration518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_storage_class_specifier_h_in_declaration_specifiers553 = new BitSet(new long[]{0x0000040000000002L,0x0000001FFFFFFF00L});
    public static final BitSet FOLLOW_type_specifier_s_in_declaration_specifiers561 = new BitSet(new long[]{0x0000040000000002L,0x0000001FFFFFFF00L});
    public static final BitSet FOLLOW_type_qualifier_h_in_declaration_specifiers569 = new BitSet(new long[]{0x0000040000000002L,0x0000001FFFFFFF00L});
    public static final BitSet FOLLOW_function_specifier_h_in_declaration_specifiers575 = new BitSet(new long[]{0x0000040000000002L,0x0000001FFFFFFF00L});
    public static final BitSet FOLLOW_62_in_assignOp590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_comma599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_colon618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_semi637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_lpar656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_rpar675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_lbrack694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_rbrack713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_lbrace732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_rbrace751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_init_declarator_in_init_declarator_list771 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_comma_in_init_declarator_list775 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF04L,0x0000000100000000L});
    public static final BitSet FOLLOW_init_declarator_in_init_declarator_list777 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_declarator_in_init_declarator791 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_attributes_or_asm_in_init_declarator797 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_assignOp_in_init_declarator810 = new BitSet(new long[]{0x0001FC0000000000L,0x000739BFFFFFFF44L,0x0000000100000000L});
    public static final BitSet FOLLOW_initializer_in_init_declarator812 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_attributes_or_asm_in_init_declarator814 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_storage_class_specifier_in_storage_class_specifier_h855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_storage_class_specifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_specifier_h_in_type_specifier_s902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_specifier_in_type_specifier_h925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_or_union_specifier_in_type_specifier_h940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_specifier_in_type_specifier_h945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_id_in_type_specifier_h950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_type_specifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_type_id1062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_or_union_h_in_struct_or_union_specifier1092 = new BitSet(new long[]{0x0000040000000000L,0x0000001FFFFFFF40L});
    public static final BitSet FOLLOW_identifier_in_struct_or_union_specifier1094 = new BitSet(new long[]{0x0000040000000000L,0x0000001FFFFFFF40L});
    public static final BitSet FOLLOW_lbrace_in_struct_or_union_specifier1097 = new BitSet(new long[]{0x0000040000000000L,0x00000007FFFFF080L});
    public static final BitSet FOLLOW_struct_declaration_in_struct_or_union_specifier1099 = new BitSet(new long[]{0x0000040000000000L,0x00000007FFFFF080L});
    public static final BitSet FOLLOW_rbrace_in_struct_or_union_specifier1102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_or_union_h_in_struct_or_union_specifier1107 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_identifier_in_struct_or_union_specifier1109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_or_union_in_struct_or_union_h1120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_struct_or_union0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specifier_qualifier_list_in_struct_declaration1160 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF05L,0x0000000100000000L});
    public static final BitSet FOLLOW_struct_declarator_list_in_struct_declaration1162 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF06L,0x0000000100000000L});
    public static final BitSet FOLLOW_semi_in_struct_declaration1164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_qualifier_h_in_specifier_qualifier_list1177 = new BitSet(new long[]{0x0000040000000002L,0x00000007FFFFF000L});
    public static final BitSet FOLLOW_type_specifier_s_in_specifier_qualifier_list1181 = new BitSet(new long[]{0x0000040000000002L,0x00000007FFFFF000L});
    public static final BitSet FOLLOW_struct_declarator_in_struct_declarator_list1195 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_comma_in_struct_declarator_list1199 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF05L,0x0000000100000000L});
    public static final BitSet FOLLOW_struct_declarator_in_struct_declarator_list1201 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_declarator_in_struct_declarator1215 = new BitSet(new long[]{0x0000040000000002L,0x0000003FFFFFFF05L,0x0000000100000000L});
    public static final BitSet FOLLOW_colon_in_struct_declarator1219 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_constant_expression_in_struct_declarator1221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_struct_declarator1228 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_constant_expression_in_struct_declarator1230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_enumKw1240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumKw_in_enum_specifier1267 = new BitSet(new long[]{0x0000040000000000L,0x0000001FFFFFFF40L});
    public static final BitSet FOLLOW_lbrace_in_enum_specifier1269 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_enumerator_list_in_enum_specifier1271 = new BitSet(new long[]{0x0000040000000000L,0x00000007FFFFF080L});
    public static final BitSet FOLLOW_rbrace_in_enum_specifier1273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumKw_in_enum_specifier1278 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_identifier_in_enum_specifier1280 = new BitSet(new long[]{0x0000040000000000L,0x0000001FFFFFFF40L});
    public static final BitSet FOLLOW_lbrace_in_enum_specifier1282 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_enumerator_list_in_enum_specifier1284 = new BitSet(new long[]{0x0000040000000000L,0x00000007FFFFF080L});
    public static final BitSet FOLLOW_rbrace_in_enum_specifier1286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumKw_in_enum_specifier1291 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_identifier_in_enum_specifier1293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumerator_in_enumerator_list1304 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_comma_in_enumerator_list1308 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_enumerator_in_enumerator_list1310 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_identifier_in_enumerator1324 = new BitSet(new long[]{0x4001FC0000000002L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_assignOp_in_enumerator1328 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_constant_expression_in_enumerator1330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_qualifier_in_type_qualifier_h1364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_type_qualifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_specifier_in_function_specifier_h1401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_function_specifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_spec_in_declarator1438 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_pointer_in_declarator1441 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_direct_declarator_in_declarator1444 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_attribute_spec_in_declarator1446 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_attribute_spec_in_declarator1452 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_pointer_in_declarator1455 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_attribute_spec_in_declarator1457 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_direct_declarator_ident1469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_direct_declarator_ident_in_direct_declarator1501 = new BitSet(new long[]{0x0000040000000002L,0x0000002000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_direct_declarator1505 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF04L,0x0000000100000000L});
    public static final BitSet FOLLOW_declarator_in_direct_declarator1507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_direct_declarator1509 = new BitSet(new long[]{0x0000040000000002L,0x0000002000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_declarator_suffix_in_direct_declarator1513 = new BitSet(new long[]{0x0000040000000002L,0x0000002000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_lbrack_in_declarator_suffix1527 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_constant_expression_in_declarator_suffix1529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_rbrack_in_declarator_suffix1531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lbrack_in_declarator_suffix1541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_rbrack_in_declarator_suffix1543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lpar_in_declarator_suffix1553 = new BitSet(new long[]{0x0000040000000000L,0x0000001FFFFFFF00L,0x0000000100000000L});
    public static final BitSet FOLLOW_parameter_type_list_in_declarator_suffix1555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_declarator_suffix1557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lpar_in_declarator_suffix1567 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_identifier_list_in_declarator_suffix1569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_declarator_suffix1571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lpar_in_declarator_suffix1581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_declarator_suffix1583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_timesOp1593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timesOp_in_pointer1613 = new BitSet(new long[]{0x0000000000000000L,0x0000000600000000L});
    public static final BitSet FOLLOW_type_qualifier_h_in_pointer1615 = new BitSet(new long[]{0x0000000000000002L,0x0000002600000000L});
    public static final BitSet FOLLOW_pointer_in_pointer1618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timesOp_in_pointer1624 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_pointer_in_pointer1626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timesOp_in_pointer1631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_dotsOp1641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_list_in_parameter_type_list1661 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_comma_in_parameter_type_list1665 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_dotsOp_in_parameter_type_list1667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_spec_in_parameter_list1681 = new BitSet(new long[]{0x0000040000000000L,0x0000001FFFFFFF00L,0x0000000100000000L});
    public static final BitSet FOLLOW_parameter_declaration_in_parameter_list1684 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_comma_in_parameter_list1688 = new BitSet(new long[]{0x0000040000000000L,0x0000001FFFFFFF00L,0x0000000100000000L});
    public static final BitSet FOLLOW_parameter_declaration_in_parameter_list1690 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_declaration_specifiers_in_parameter_declaration1745 = new BitSet(new long[]{0x0000040000000002L,0x0000003FFFFFFF14L,0x0000000100000000L});
    public static final BitSet FOLLOW_declarator_in_parameter_declaration1748 = new BitSet(new long[]{0x0000040000000002L,0x0000003FFFFFFF14L,0x0000000100000000L});
    public static final BitSet FOLLOW_abstract_declarator_in_parameter_declaration1752 = new BitSet(new long[]{0x0000040000000002L,0x0000003FFFFFFF14L,0x0000000100000000L});
    public static final BitSet FOLLOW_identifier_in_identifier_list1766 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_comma_in_identifier_list1770 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_identifier_in_identifier_list1772 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_specifier_qualifier_list_in_type_name1786 = new BitSet(new long[]{0x0000040000000002L,0x0000003FFFFFFF14L,0x0000000100000000L});
    public static final BitSet FOLLOW_abstract_declarator_in_type_name1788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pointer_in_abstract_declarator1800 = new BitSet(new long[]{0x0000040000000002L,0x0000003FFFFFFF14L,0x0000000100000000L});
    public static final BitSet FOLLOW_direct_abstract_declarator_in_abstract_declarator1802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_direct_abstract_declarator_in_abstract_declarator1808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lpar_in_direct_abstract_declarator1821 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF14L,0x0000000100000000L});
    public static final BitSet FOLLOW_abstract_declarator_in_direct_abstract_declarator1823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_direct_abstract_declarator1825 = new BitSet(new long[]{0x0000040000000002L,0x0000003FFFFFFF14L,0x0000000100000000L});
    public static final BitSet FOLLOW_abstract_declarator_suffix_in_direct_abstract_declarator1829 = new BitSet(new long[]{0x0000040000000002L,0x0000003FFFFFFF14L,0x0000000100000000L});
    public static final BitSet FOLLOW_abstract_declarator_suffix_in_direct_abstract_declarator1833 = new BitSet(new long[]{0x0000040000000002L,0x0000003FFFFFFF14L,0x0000000100000000L});
    public static final BitSet FOLLOW_lbrack_in_abstract_declarator_suffix1845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_rbrack_in_abstract_declarator_suffix1847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lbrack_in_abstract_declarator_suffix1852 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_constant_expression_in_abstract_declarator_suffix1854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_rbrack_in_abstract_declarator_suffix1856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lpar_in_abstract_declarator_suffix1861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_abstract_declarator_suffix1863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lpar_in_abstract_declarator_suffix1868 = new BitSet(new long[]{0x0000040000000000L,0x0000001FFFFFFF00L,0x0000000100000000L});
    public static final BitSet FOLLOW_parameter_type_list_in_abstract_declarator_suffix1870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_abstract_declarator_suffix1872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_expression_in_initializer1883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lbrace_in_initializer1888 = new BitSet(new long[]{0x0001FC0000000000L,0x000739BFFFFFFF44L,0x0000000100000000L});
    public static final BitSet FOLLOW_initializer_list_in_initializer1890 = new BitSet(new long[]{0x8000040000000000L,0x00000007FFFFF080L});
    public static final BitSet FOLLOW_comma_in_initializer1892 = new BitSet(new long[]{0x0000040000000000L,0x00000007FFFFF080L});
    public static final BitSet FOLLOW_rbrace_in_initializer1895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_initializer_in_initializer_list1906 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_comma_in_initializer_list1910 = new BitSet(new long[]{0x0001FC0000000000L,0x000739BFFFFFFF44L,0x0000000100000000L});
    public static final BitSet FOLLOW_initializer_in_initializer_list1912 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_assignment_expression_in_argument_expression_list1928 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_comma_in_argument_expression_list1932 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_assignment_expression_in_argument_expression_list1934 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_103_in_plusOp1974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_minusOp1992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_multOp2010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_divOp2028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_modOp2046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multOp_in_multiplicative_op2067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_divOp_in_multiplicative_op2071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modOp_in_multiplicative_op2075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plusOp_in_additive_op2090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minusOp_in_additive_op2094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression2109 = new BitSet(new long[]{0x0000000000000002L,0x0000018000000000L});
    public static final BitSet FOLLOW_additive_op_in_additive_expression2112 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression2116 = new BitSet(new long[]{0x0000000000000002L,0x0000018000000000L});
    public static final BitSet FOLLOW_cast_expression_in_multiplicative_expression2132 = new BitSet(new long[]{0x0000000000000002L,0x0000062000000000L});
    public static final BitSet FOLLOW_multiplicative_op_in_multiplicative_expression2136 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_cast_expression_in_multiplicative_expression2140 = new BitSet(new long[]{0x0000000000000002L,0x0000062000000000L});
    public static final BitSet FOLLOW_lpar_in_cast_expression2156 = new BitSet(new long[]{0x0000040000000000L,0x00000007FFFFF000L});
    public static final BitSet FOLLOW_type_name_in_cast_expression2158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_cast_expression2160 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_expression2162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_in_cast_expression2167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_incOp2178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_decOp2199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_sizeofOp2219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfix_expression_in_unary_expression2240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_in_unary_expression2245 = new BitSet(new long[]{0x0000040000000002L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_unary_expression2249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_unary_expression2251 = new BitSet(new long[]{0x0000040000000002L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_primary_expression_in_unary_expression2291 = new BitSet(new long[]{0x0000040000000002L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_unary_expression2295 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_argument_expression_list_in_unary_expression2297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_unary_expression2299 = new BitSet(new long[]{0x0000040000000002L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_incOp_in_unary_expression2339 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression2341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_decOp_in_unary_expression2356 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression2358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_operator_h_in_unary_expression2373 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_cast_expression_in_unary_expression2375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sizeofOp_in_unary_expression2380 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression2382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sizeofOp_in_unary_expression2387 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_unary_expression2389 = new BitSet(new long[]{0x0000040000000000L,0x00000007FFFFF000L});
    public static final BitSet FOLLOW_type_name_in_unary_expression2391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_unary_expression2393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_dotOp2405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_ptrOp2423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_in_postfix_expression2445 = new BitSet(new long[]{0x0000040000000002L,0x0000D82000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_postfix_expression_opts_in_postfix_expression2458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_incOp_in_postfix_expression_opts2483 = new BitSet(new long[]{0x0000040000000002L,0x0000D82000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_postfix_expression_sufix_in_postfix_expression_opts2485 = new BitSet(new long[]{0x0000040000000002L,0x0000D82000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_decOp_in_postfix_expression_opts2513 = new BitSet(new long[]{0x0000040000000002L,0x0000D82000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_postfix_expression_sufix_in_postfix_expression_opts2515 = new BitSet(new long[]{0x0000040000000002L,0x0000D82000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_postfix_expression_opts2544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_postfix_expression_opts2546 = new BitSet(new long[]{0x0000040000000002L,0x0000D82000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_postfix_expression_sufix_in_postfix_expression_opts2549 = new BitSet(new long[]{0x0000040000000002L,0x0000D82000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_postfix_expression_opts2575 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_argument_expression_list_in_postfix_expression_opts2577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_postfix_expression_opts2579 = new BitSet(new long[]{0x0000040000000002L,0x0000D82000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_postfix_expression_sufix_in_postfix_expression_opts2582 = new BitSet(new long[]{0x0000040000000002L,0x0000D82000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_dotOp_in_postfix_expression_opts2637 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_identifier_in_postfix_expression_opts2639 = new BitSet(new long[]{0x0000040000000002L,0x0000D82000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_postfix_expression_sufix_in_postfix_expression_opts2642 = new BitSet(new long[]{0x0000040000000002L,0x0000D82000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_ptrOp_in_postfix_expression_opts2671 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_identifier_in_postfix_expression_opts2673 = new BitSet(new long[]{0x0000040000000002L,0x0000D82000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_postfix_expression_sufix_in_postfix_expression_opts2676 = new BitSet(new long[]{0x0000040000000002L,0x0000D82000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_lbrack_in_postfix_expression_opts2709 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_expression_in_postfix_expression_opts2711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_rbrack_in_postfix_expression_opts2713 = new BitSet(new long[]{0x0000040000000002L,0x0000D82000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_postfix_expression_sufix_in_postfix_expression_opts2716 = new BitSet(new long[]{0x0000040000000002L,0x0000D82000000014L,0x0000000100000000L});
    public static final BitSet FOLLOW_lbrack_in_postfix_expression_sufix2758 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_expression_in_postfix_expression_sufix2760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_rbrack_in_postfix_expression_sufix2762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lpar_in_postfix_expression_sufix2776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_postfix_expression_sufix2778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lpar_in_postfix_expression_sufix2792 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_argument_expression_list_in_postfix_expression_sufix2794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_postfix_expression_sufix2796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dotOp_in_postfix_expression_sufix2810 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_identifier_in_postfix_expression_sufix2812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ptrOp_in_postfix_expression_sufix2826 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_identifier_in_postfix_expression_sufix2828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_incOp_in_postfix_expression_sufix2842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_decOp_in_postfix_expression_sufix2857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_operator_in_unary_operator_h2870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unary_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_primary_expression2927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_h_in_primary_expression2932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_specifier_h_in_primary_expression2937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lpar_in_primary_expression2942 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_expression_in_primary_expression2944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_primary_expression2946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_constant_h2957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_constant0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_LITERAL_in_decimal_lit3047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_expression_in_expression3072 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_comma_in_expression3076 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_assignment_expression_in_expression3078 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_conditional_expression_in_constant_expression3091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_assignment_expression3102 = new BitSet(new long[]{0x4000000000000000L,0x1FF8000000000000L});
    public static final BitSet FOLLOW_assignment_operator_in_assignment_expression3104 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_assignment_expression_in_assignment_expression3106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditional_expression_in_assignment_expression3136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_in_lvalue3147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_operator_in_assignment_operator_h3158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_assignment_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logical_or_expression_in_conditional_expression3241 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_qMarkSep_in_conditional_expression3245 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_expression_in_conditional_expression3247 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF05L,0x0000000100000000L});
    public static final BitSet FOLLOW_colon_in_conditional_expression3249 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_conditional_expression_in_conditional_expression3251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_qMarkSep3263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_logOpOr3282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_logOpAnd3302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_orOp3323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_andOp3342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_xorOp3361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_eqOp3380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_neOp3399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_lssOp3418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_gtrOp3437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_leqOp3456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_geqOp3475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_shlOp3494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_shrOp3513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lssOp_in_relational_op3534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gtrOp_in_relational_op3538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_leqOp_in_relational_op3542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_geqOp_in_relational_op3546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eqOp_in_equality_op3562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neOp_in_equality_op3566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logical_and_expression_in_logical_or_expression3580 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_logOpOr_in_logical_or_expression3584 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_logical_and_expression_in_logical_or_expression3587 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_inclusive_or_expression_in_logical_and_expression3601 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_logOpAnd_in_logical_and_expression3605 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_inclusive_or_expression_in_logical_and_expression3608 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression3622 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_orOp_in_inclusive_or_expression3626 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression3629 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression3643 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_xorOp_in_exclusive_or_expression3647 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression3650 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_equality_expression_in_and_expression3664 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_andOp_in_and_expression3668 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_equality_expression_in_and_expression3671 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression3686 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_equality_op_in_equality_expression3690 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression3693 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression3708 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000000F0L});
    public static final BitSet FOLLOW_relational_op_in_relational_expression3712 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression3715 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000000F0L});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression3729 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_shlOp_in_shift_expression3735 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_shrOp_in_shift_expression3739 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression3744 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_labeled_statement_in_statement3760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_statement_in_statement3765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_statement_in_statement3770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selection_statement_in_statement3775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iteration_statement_in_statement3791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jump_statement_in_statement3807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_asm_statement_in_statement3825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_string_lit3836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_asm_or_cv_in_asm_statement3859 = new BitSet(new long[]{0x0000040000000000L,0x0000002600000004L,0x00000001000FFC00L});
    public static final BitSet FOLLOW_lpar_in_asm_statement3862 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_string_lit_in_asm_statement3864 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF0DL,0x0000000100000000L});
    public static final BitSet FOLLOW_asm_output_operands_in_asm_statement3866 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF0DL,0x0000000100000000L});
    public static final BitSet FOLLOW_asm_input_operands_in_asm_statement3869 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF0DL,0x0000000100000000L});
    public static final BitSet FOLLOW_asm_clobbered_registers_in_asm_statement3872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_asm_statement3875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_asm_output_operands3886 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_asm_operand_in_asm_output_operands3890 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_comma_in_asm_output_operands3894 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_asm_operand_in_asm_output_operands3896 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_colon_in_asm_input_operands3913 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_asm_operand_in_asm_input_operands3917 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_comma_in_asm_input_operands3921 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_asm_operand_in_asm_input_operands3923 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_string_lit_in_asm_operand3940 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_asm_operand3942 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_expression_in_asm_operand3944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_asm_operand3946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_asm_clobbered_registers3957 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_string_lit_in_asm_clobbered_registers3961 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_comma_in_asm_clobbered_registers3965 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_string_lit_in_asm_clobbered_registers3967 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_asm_or_cv_in_asm_or_cv_kw3984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_asm_or_cv4007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_asm_or_cv4012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_asm_or_cv4017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_asm_or_cv4022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cv_qualifier_in_asm_or_cv4027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cv_qualifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_identifier4084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_labeled_statement4105 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF05L,0x0000000100000000L});
    public static final BitSet FOLLOW_colon_in_labeled_statement4107 = new BitSet(new long[]{0x0001FC0000000000L,0x000739BFFFFFFF46L,0x00000001FF7FFC00L});
    public static final BitSet FOLLOW_statement_in_labeled_statement4109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_labeled_statement4115 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_constant_expression_in_labeled_statement4117 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF05L,0x0000000100000000L});
    public static final BitSet FOLLOW_colon_in_labeled_statement4119 = new BitSet(new long[]{0x0001FC0000000000L,0x000739BFFFFFFF46L,0x00000001FF7FFC00L});
    public static final BitSet FOLLOW_statement_in_labeled_statement4121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_labeled_statement4149 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF05L,0x0000000100000000L});
    public static final BitSet FOLLOW_colon_in_labeled_statement4151 = new BitSet(new long[]{0x0001FC0000000000L,0x000739BFFFFFFF46L,0x00000001FF7FFC00L});
    public static final BitSet FOLLOW_statement_in_labeled_statement4153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lbrace_in_compound_statement4195 = new BitSet(new long[]{0x2001FC0000000000L,0x000739BFFFFFFFC6L,0x00000001FF7FFC00L});
    public static final BitSet FOLLOW_external_declaration_in_compound_statement4197 = new BitSet(new long[]{0x2001FC0000000000L,0x000739BFFFFFFFC6L,0x00000001FF7FFC00L});
    public static final BitSet FOLLOW_statement_in_compound_statement4200 = new BitSet(new long[]{0x0001FC0000000000L,0x000739BFFFFFFFC6L,0x00000001FF7FFC00L});
    public static final BitSet FOLLOW_rbrace_in_compound_statement4203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_semi_in_expression_statement4221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expression_statement4226 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF06L,0x0000000100000000L});
    public static final BitSet FOLLOW_semi_in_expression_statement4228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_selection_statement4239 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_selection_statement4241 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_expression_in_selection_statement4243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_selection_statement4245 = new BitSet(new long[]{0x0001FC0000000000L,0x000739BFFFFFFF46L,0x00000001FF7FFC00L});
    public static final BitSet FOLLOW_statement_in_selection_statement4247 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_151_in_selection_statement4262 = new BitSet(new long[]{0x0001FC0000000000L,0x000739BFFFFFFF46L,0x00000001FF7FFC00L});
    public static final BitSet FOLLOW_statement_in_selection_statement4264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_selection_statement4336 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_selection_statement4338 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_expression_in_selection_statement4340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_selection_statement4342 = new BitSet(new long[]{0x0001FC0000000000L,0x000739BFFFFFFF46L,0x00000001FF7FFC00L});
    public static final BitSet FOLLOW_statement_in_selection_statement4344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_iteration_statement4396 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_iteration_statement4398 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_expression_in_iteration_statement4400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_iteration_statement4402 = new BitSet(new long[]{0x0001FC0000000000L,0x000739BFFFFFFF46L,0x00000001FF7FFC00L});
    public static final BitSet FOLLOW_statement_in_iteration_statement4404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_iteration_statement4440 = new BitSet(new long[]{0x0001FC0000000000L,0x000739BFFFFFFF46L,0x00000001FF7FFC00L});
    public static final BitSet FOLLOW_statement_in_iteration_statement4442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_153_in_iteration_statement4444 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_iteration_statement4446 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_expression_in_iteration_statement4448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_iteration_statement4450 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF06L,0x0000000100000000L});
    public static final BitSet FOLLOW_semi_in_iteration_statement4452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_iteration_statement4503 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_iteration_statement4505 = new BitSet(new long[]{0x0001FC0000000000L,0x000739BFFFFFFF06L,0x0000000100000000L});
    public static final BitSet FOLLOW_expression_statement_in_iteration_statement4507 = new BitSet(new long[]{0x0001FC0000000000L,0x000739BFFFFFFF06L,0x0000000100000000L});
    public static final BitSet FOLLOW_expression_statement_in_iteration_statement4509 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF00CL,0x0000000100000000L});
    public static final BitSet FOLLOW_expression_in_iteration_statement4511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_iteration_statement4514 = new BitSet(new long[]{0x0001FC0000000000L,0x000739BFFFFFFF46L,0x00000001FF7FFC00L});
    public static final BitSet FOLLOW_statement_in_iteration_statement4516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_jump_statement4576 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_identifier_in_jump_statement4578 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF06L,0x0000000100000000L});
    public static final BitSet FOLLOW_semi_in_jump_statement4580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_jump_statement4602 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF06L,0x0000000100000000L});
    public static final BitSet FOLLOW_semi_in_jump_statement4604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_jump_statement4624 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF06L,0x0000000100000000L});
    public static final BitSet FOLLOW_semi_in_jump_statement4626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_jump_statement4646 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF06L,0x0000000100000000L});
    public static final BitSet FOLLOW_semi_in_jump_statement4648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_jump_statement4668 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_expression_in_jump_statement4670 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF06L,0x0000000100000000L});
    public static final BitSet FOLLOW_semi_in_jump_statement4672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_spec_in_attributes_or_asm4699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_attribute_name4711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_name_in_attribute_spec4732 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_attribute_spec4734 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_attribute_spec4736 = new BitSet(new long[]{0x0000000000000000L,0x0000000A00000000L,0xFFFFFFFE0001C000L,0xFFFFFFFE0001FFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_attribute_extension_in_attribute_spec4738 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_comma_in_attribute_spec4742 = new BitSet(new long[]{0x0000000000000000L,0x0000000A00000000L,0xFFFFFFFE0001C000L,0xFFFFFFFE0001FFFFL,0x0000000000FFFFFFL});
    public static final BitSet FOLLOW_attribute_extension_in_attribute_spec4744 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_attribute_spec4749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_attribute_spec4751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_alias_nm_in_attribute_extension4765 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_attribute_extension4767 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_string_lit_in_attribute_extension4769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_attribute_extension4771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_aligned_nm_in_attribute_extension4777 = new BitSet(new long[]{0x0000040000000002L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_attribute_extension4781 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_decimal_lit_in_attribute_extension4783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_attribute_extension4785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_always_inline_nm_in_attribute_extension4793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_cdecl_nm_in_attribute_extension4798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_cleanup_nm_in_attribute_extension4803 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_attribute_extension4805 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_identifier_in_attribute_extension4807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_attribute_extension4809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_const_nm_in_attribute_extension4814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_constructor_nm_in_attribute_extension4819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_deprecated_nm_in_attribute_extension4824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_destructor_nm_in_attribute_extension4829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_dllexport_nm_in_attribute_extension4834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_dllimport_nm_in_attribute_extension4839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_eightbit_nm_in_attribute_extension4844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_format_nm_in_attribute_extension4849 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_attribute_extension4851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000001FFFE0000L});
    public static final BitSet FOLLOW_format_archetype_in_attribute_extension4853 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_comma_in_attribute_extension4855 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_decimal_lit_in_attribute_extension4857 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_comma_in_attribute_extension4859 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_decimal_lit_in_attribute_extension4861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_attribute_extension4863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_leaf_nm_in_attribute_extension4868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_malloc_nm_in_attribute_extension4873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_mode_nm_in_attribute_extension4878 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_attribute_extension4880 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_identifier_in_attribute_extension4882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_attribute_extension4884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_noinline_nm_in_attribute_extension4889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_noreturn_nm_in_attribute_extension4894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_used_nm_in_attribute_extension4899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_unused_nm_in_attribute_extension4904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_nonnull_nm_in_attribute_extension4909 = new BitSet(new long[]{0x0000040000000002L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_attribute_extension4913 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_decimal_lit_in_attribute_extension4915 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_comma_in_attribute_extension4919 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_decimal_lit_in_attribute_extension4921 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_attribute_extension4926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_nothrow_nm_in_attribute_extension4934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_pure_nm_in_attribute_extension4939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_trans_union_nm_in_attribute_extension4944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_vector_size_nm_in_attribute_extension4949 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_attribute_extension4951 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_decimal_lit_in_attribute_extension4953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_attribute_extension4955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_visibility_nm_in_attribute_extension4960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_weak_nm_in_attribute_extension4965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_alias_in_attribute_alias_nm4976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_alias0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_aligned_in_attribute_aligned_nm5025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_aligned0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_always_inline_in_attribute_always_inline_nm5077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_always_inline0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_cdecl_in_attribute_cdecl_nm5126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_cdecl0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_cleanup_in_attribute_cleanup_nm5175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_cleanup0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_const_in_attribute_const_nm5224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_const0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_constructor_in_attribute_constructor_nm5273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_constructor0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_deprecated_in_attribute_deprecated_nm5322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_deprecated0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_destructor_in_attribute_destructor_nm5371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_destructor0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_dllexport_in_attribute_dllexport_nm5420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_dllexport0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_dllimport_in_attribute_dllimport_nm5469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_dllimport0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_eightbit_in_attribute_eightbit_nm5518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_eightbit0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_format_in_attribute_format_nm5565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_format0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_format_archetype_in_format_archetype_nm5614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_format_archetype0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_leaf_in_attribute_leaf_nm5723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_leaf0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_malloc_in_attribute_malloc_nm5772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_malloc0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_noinline_in_attribute_noinline_nm5821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_noinline0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_noreturn_in_attribute_noreturn_nm5870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_noreturn0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_used_in_attribute_used_nm5919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_used0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_unused_in_attribute_unused_nm5968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_unused0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_mode_in_attribute_mode_nm6017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_mode0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_nonnull_in_attribute_nonnull_nm6066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_nonnull0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_nothrow_in_attribute_nothrow_nm6115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_nothrow0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_pure_in_attribute_pure_nm6164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_pure0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_trans_union_in_attribute_trans_union_nm6213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_trans_union0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_vector_size_in_attribute_vector_size_nm6262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_vector_size0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_visibility_in_attribute_visibility_nm6311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_visibility0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_weak_in_attribute_weak_nm6360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_weak0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_specifiers_in_synpred2_CLang309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_specifiers_in_synpred4_CLang309 = new BitSet(new long[]{0x0000040000000000L,0x0000003FFFFFFF04L,0x0000000100000000L});
    public static final BitSet FOLLOW_declarator_in_synpred4_CLang312 = new BitSet(new long[]{0x2000040000000000L,0x0000003FFFFFFF44L,0x0000000100000000L});
    public static final BitSet FOLLOW_declaration_in_synpred4_CLang314 = new BitSet(new long[]{0x2000040000000000L,0x0000003FFFFFFF44L,0x0000000100000000L});
    public static final BitSet FOLLOW_70_in_synpred4_CLang317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_specifiers_in_synpred5_CLang353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_specifier_s_in_synpred10_CLang489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_specifier_s_in_synpred16_CLang561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_specifier_s_in_synpred51_CLang1181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_spec_in_synpred63_CLang1446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_spec_in_synpred64_CLang1438 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_pointer_in_synpred64_CLang1441 = new BitSet(new long[]{0x0000040000000000L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_direct_declarator_in_synpred64_CLang1444 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_attribute_spec_in_synpred64_CLang1446 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_attribute_spec_in_synpred66_CLang1457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarator_suffix_in_synpred68_CLang1513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lpar_in_synpred71_CLang1553 = new BitSet(new long[]{0x0000040000000000L,0x0000001FFFFFFF00L,0x0000000100000000L});
    public static final BitSet FOLLOW_parameter_type_list_in_synpred71_CLang1555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_synpred71_CLang1557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lpar_in_synpred72_CLang1567 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_identifier_list_in_synpred72_CLang1569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_synpred72_CLang1571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_qualifier_h_in_synpred73_CLang1615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pointer_in_synpred74_CLang1618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timesOp_in_synpred75_CLang1613 = new BitSet(new long[]{0x0000000000000000L,0x0000000600000000L});
    public static final BitSet FOLLOW_type_qualifier_h_in_synpred75_CLang1615 = new BitSet(new long[]{0x0000000000000002L,0x0000002600000000L});
    public static final BitSet FOLLOW_pointer_in_synpred75_CLang1618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timesOp_in_synpred76_CLang1624 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_pointer_in_synpred76_CLang1626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarator_in_synpred80_CLang1748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abstract_declarator_in_synpred81_CLang1752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_direct_abstract_declarator_in_synpred84_CLang1802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abstract_declarator_suffix_in_synpred87_CLang1833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lpar_in_synpred100_CLang2156 = new BitSet(new long[]{0x0000040000000000L,0x00000007FFFFF000L});
    public static final BitSet FOLLOW_type_name_in_synpred100_CLang2158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_synpred100_CLang2160 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_cast_expression_in_synpred100_CLang2162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfix_expression_in_synpred101_CLang2240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_in_synpred103_CLang2245 = new BitSet(new long[]{0x0000040000000002L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_synpred103_CLang2249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_synpred103_CLang2251 = new BitSet(new long[]{0x0000040000000002L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_primary_expression_in_synpred105_CLang2291 = new BitSet(new long[]{0x0000040000000002L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_lpar_in_synpred105_CLang2295 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_argument_expression_list_in_synpred105_CLang2297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_rpar_in_synpred105_CLang2299 = new BitSet(new long[]{0x0000040000000002L,0x0000002000000004L,0x0000000100000000L});
    public static final BitSet FOLLOW_sizeofOp_in_synpred109_CLang2380 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_unary_expression_in_synpred109_CLang2382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred136_CLang2927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_specifier_h_in_synpred138_CLang2937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_synpred145_CLang3102 = new BitSet(new long[]{0x4000000000000000L,0x1FF8000000000000L});
    public static final BitSet FOLLOW_assignment_operator_in_synpred145_CLang3104 = new BitSet(new long[]{0x0001FC0000000000L,0x000739A1FFFFF004L,0x0000000100000000L});
    public static final BitSet FOLLOW_assignment_expression_in_synpred145_CLang3106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_asm_output_operands_in_synpred177_CLang3866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_asm_input_operands_in_synpred178_CLang3869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_external_declaration_in_synpred199_CLang4197 = new BitSet(new long[]{0x0000000000000002L});

}