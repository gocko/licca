// $ANTLR 3.2 Sep 23, 2009 12:02:23 C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g 2017-03-03 17:26:17
package Languages.java;

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

/** --------------------------------- SSQSA Java grammar --------------------------------------

 *  Java grammar with incorporated SSQSA universal nodes 

 *  Ver 0 - Dieter (see comment below)

 *  Ver 1 - Gordana, goca@dmi.uns.ac.rs

 *  Ver 2 - Milos, jun 2012, svc@dmi.uns.ac.rs

 * -------------------------------------------------------------------------------------------

 *

 * Dieter's comment: 
 
 * -----------------

 * An ANTLRv3 capable Java 1.5 grammar for building ASTs.

 *

 * Note that there's also the tree grammar 'JavaTreeParser.g' that can be fed

 * with this grammer's output.

 *

 *

 * Please report any detected errors or even suggestions regarding this grammar

 * to

 *

 *          dieter [D O T] habelitz [A T] habelitz [D O T] com

 *

 *      with the subject

 *

 *          jsom grammar: [your subject note]

 *

 * To generate a parser based on this grammar you'll need ANTLRv3, which you can

 * get from 'http://www.antlr.org'.

 *

 *

 * This grammar is published under the ...

 *

 * BSD licence

 * 

 * Copyright (c) 2007-2008 by HABELITZ Software Developments

 *

 * All rights reserved.

 * 

 * http://www.habelitz.com

 *

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 *

 *  1. Redistributions of source code must retain the above copyright

 *     notice, this list of conditions and the following disclaimer.

 *  2. Redistributions in binary form must reproduce the above copyright

 *     notice, this list of conditions and the following disclaimer in the

 *     documentation and/or other materials provided with the distribution.

 *  3. The name of the author may not be used to endorse or promote products

 *     derived from this software without specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY HABELITZ SOFTWARE DEVELOPMENTS ('HSD') ``AS IS'' 

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 

 * ARE DISCLAIMED. IN NO EVENT SHALL 'HSD' BE LIABLE FOR ANY DIRECT, INDIRECT, 

 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 

 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 

 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 

 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 

 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 

 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 */
public class SSQSA_JavaParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "AND_ASSIGN", "ASSIGN", "AT", "BIT_SHIFT_RIGHT", "BIT_SHIFT_RIGHT_ASSIGN", "COLON", "COMMA", "DEC", "DIV", "DIV_ASSIGN", "DOT", "DOTSTAR", "ELLIPSIS", "EQUAL", "GREATER_OR_EQUAL", "GREATER_THAN", "INC", "LBRACK", "LCURLY", "LESS_OR_EQUAL", "LESS_THAN", "LOGICAL_AND", "LOGICAL_NOT", "LOGICAL_OR", "LPAREN", "MINUS", "MINUS_ASSIGN", "MOD", "MOD_ASSIGN", "NOT", "NOT_EQUAL", "OR", "OR_ASSIGN", "PLUS", "PLUS_ASSIGN", "QUESTION", "RBRACK", "RCURLY", "RPAREN", "SEMI", "SHIFT_LEFT", "SHIFT_LEFT_ASSIGN", "SHIFT_RIGHT", "SHIFT_RIGHT_ASSIGN", "STAR", "STAR_ASSIGN", "XOR", "XOR_ASSIGN", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", "FALSE", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "IMPLEMENTS", "INSTANCEOF", "INTERFACE", "IMPORT", "INT", "LONG", "NATIVE", "NEW", "NULL", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", "TRUE", "TRY", "VOID", "VOLATILE", "WHILE", "COMPILATION_UNIT", "IMPORT_DECL", "PACKAGE_DECL", "CONCRETE_UNIT_DECL", "INTERFACE_UNIT_DECL", "BLOCK_SCOPE", "ATTRIBUTE_DECL", "VAR_DECL", "IMPLEMENTS_CLAUSE", "TYPE_DECL", "INSTANTIATES", "FUNCTION_DECL", "FORMAL_PARAM_LIST", "PARAMETER_DECL", "NAME", "TYPE", "FUNCTION_CALL", "ARGUMENT_LIST", "ARGUMENT", "BRANCH", "BRANCH_STATEMENT", "CONDITION", "LOOP_STATEMENT", "INIT", "STEP", "LOGICAL_OPERATOR", "JUMP_STATEMENT", "FOR_EACH", "LABELED_STATEMENT", "CATCH_CLAUSE_LIST", "SWITCH_BLOCK_LABEL_LIST", "EDITABLE_TOKEN", "NAME_IGNORE", "THROWS_CLAUSE", "CONSTRUCTOR_CALL", "MODIFIER_LIST", "VALUE", "CONST", "IGNORE", "ASSIGNMENT_STATEMENT", "ASSIGN_OPERATOR", "OPERATOR", "COMPARISON_OPERATOR", "SEPARATOR", "KEYWORD", "IDENT", "HEX_LITERAL", "OCTAL_LITERAL", "DECIMAL_LITERAL", "FLOATING_POINT_LITERAL", "CHARACTER_LITERAL", "STRING_LITERAL", "HEX_DIGIT", "INTEGER_TYPE_SUFFIX", "EXPONENT", "FLOAT_TYPE_SUFFIX", "ESCAPE_SEQUENCE", "UNICODE_ESCAPE", "OCTAL_ESCAPE", "JAVA_ID_START", "JAVA_ID_PART", "WS", "COMMENT", "LINE_COMMENT"
    };
    public static final int PACKAGE=84;
    public static final int EXPONENT=158;
    public static final int STAR=49;
    public static final int WHILE=103;
    public static final int MOD=32;
    public static final int CONST=141;
    public static final int MOD_ASSIGN=33;
    public static final int ASSIGNMENT_STATEMENT=143;
    public static final int CASE=58;
    public static final int CONCRETE_UNIT_DECL=107;
    public static final int CHAR=60;
    public static final int NEW=82;
    public static final int VAR_DECL=111;
    public static final int DO=64;
    public static final int CONDITION=125;
    public static final int LOOP_STATEMENT=126;
    public static final int SEPARATOR=147;
    public static final int NOT=34;
    public static final int EOF=-1;
    public static final int DIV_ASSIGN=14;
    public static final int LOGICAL_AND=26;
    public static final int BREAK=56;
    public static final int CONSTRUCTOR_CALL=138;
    public static final int BIT_SHIFT_RIGHT_ASSIGN=9;
    public static final int TYPE=119;
    public static final int INC=21;
    public static final int RPAREN=43;
    public static final int FINAL=70;
    public static final int NAME=118;
    public static final int IMPORT=78;
    public static final int STRING_LITERAL=155;
    public static final int LOGICAL_OPERATOR=129;
    public static final int FLOATING_POINT_LITERAL=153;
    public static final int NOT_EQUAL=35;
    public static final int COMPILATION_UNIT=104;
    public static final int THIS=95;
    public static final int RETURN=88;
    public static final int DOUBLE=65;
    public static final int VOID=101;
    public static final int SUPER=92;
    public static final int COMMENT=166;
    public static final int TYPE_DECL=113;
    public static final int JAVA_ID_START=163;
    public static final int FLOAT_TYPE_SUFFIX=159;
    public static final int RBRACK=41;
    public static final int IMPLEMENTS_CLAUSE=112;
    public static final int KEYWORD=148;
    public static final int SWITCH_BLOCK_LABEL_LIST=134;
    public static final int LINE_COMMENT=167;
    public static final int PRIVATE=85;
    public static final int STATIC=90;
    public static final int BLOCK_SCOPE=109;
    public static final int SWITCH=93;
    public static final int NULL=83;
    public static final int STRICTFP=91;
    public static final int MINUS_ASSIGN=31;
    public static final int ELSE=66;
    public static final int CHARACTER_LITERAL=154;
    public static final int ELLIPSIS=17;
    public static final int NATIVE=81;
    public static final int OCTAL_ESCAPE=162;
    public static final int THROWS=97;
    public static final int LCURLY=23;
    public static final int INTERFACE_UNIT_DECL=108;
    public static final int INT=79;
    public static final int BRANCH_STATEMENT=124;
    public static final int VALUE=140;
    public static final int ASSERT=54;
    public static final int TRY=100;
    public static final int SHIFT_LEFT=45;
    public static final int ATTRIBUTE_DECL=110;
    public static final int WS=165;
    public static final int SHIFT_RIGHT=47;
    public static final int OR=36;
    public static final int LESS_THAN=25;
    public static final int SHIFT_RIGHT_ASSIGN=48;
    public static final int FUNCTION_DECL=115;
    public static final int CATCH=59;
    public static final int FUNCTION_CALL=120;
    public static final int FALSE=69;
    public static final int INIT=127;
    public static final int INTEGER_TYPE_SUFFIX=157;
    public static final int DECIMAL_LITERAL=152;
    public static final int THROW=96;
    public static final int NAME_IGNORE=136;
    public static final int DEC=12;
    public static final int PROTECTED=86;
    public static final int CLASS=61;
    public static final int LBRACK=22;
    public static final int BIT_SHIFT_RIGHT=8;
    public static final int THROWS_CLAUSE=137;
    public static final int GREATER_OR_EQUAL=19;
    public static final int STEP=128;
    public static final int FOR=73;
    public static final int LOGICAL_NOT=27;
    public static final int FLOAT=72;
    public static final int ABSTRACT=53;
    public static final int AND=4;
    public static final int AND_ASSIGN=5;
    public static final int MODIFIER_LIST=139;
    public static final int LPAREN=29;
    public static final int IF=74;
    public static final int AT=7;
    public static final int ESCAPE_SEQUENCE=160;
    public static final int LABELED_STATEMENT=132;
    public static final int UNICODE_ESCAPE=161;
    public static final int SYNCHRONIZED=94;
    public static final int BOOLEAN=55;
    public static final int PARAMETER_DECL=117;
    public static final int IMPLEMENTS=75;
    public static final int CONTINUE=62;
    public static final int COMMA=11;
    public static final int TRANSIENT=98;
    public static final int EQUAL=18;
    public static final int XOR_ASSIGN=52;
    public static final int ARGUMENT=122;
    public static final int LOGICAL_OR=28;
    public static final int IDENT=149;
    public static final int ARGUMENT_LIST=121;
    public static final int PLUS=38;
    public static final int HEX_LITERAL=150;
    public static final int DOT=15;
    public static final int SHIFT_LEFT_ASSIGN=46;
    public static final int FORMAL_PARAM_LIST=116;
    public static final int DOTSTAR=16;
    public static final int BYTE=57;
    public static final int XOR=51;
    public static final int JAVA_ID_PART=164;
    public static final int COMPARISON_OPERATOR=146;
    public static final int GREATER_THAN=20;
    public static final int VOLATILE=102;
    public static final int JUMP_STATEMENT=130;
    public static final int ASSIGN_OPERATOR=144;
    public static final int OPERATOR=145;
    public static final int LESS_OR_EQUAL=24;
    public static final int IMPORT_DECL=105;
    public static final int DEFAULT=63;
    public static final int OCTAL_LITERAL=151;
    public static final int HEX_DIGIT=156;
    public static final int EDITABLE_TOKEN=135;
    public static final int SHORT=89;
    public static final int INSTANTIATES=114;
    public static final int INSTANCEOF=76;
    public static final int IGNORE=142;
    public static final int MINUS=30;
    public static final int PACKAGE_DECL=106;
    public static final int TRUE=99;
    public static final int SEMI=44;
    public static final int STAR_ASSIGN=50;
    public static final int COLON=10;
    public static final int OR_ASSIGN=37;
    public static final int ENUM=67;
    public static final int QUESTION=40;
    public static final int FINALLY=71;
    public static final int RCURLY=42;
    public static final int BRANCH=123;
    public static final int PLUS_ASSIGN=39;
    public static final int ASSIGN=6;
    public static final int INTERFACE=77;
    public static final int DIV=13;
    public static final int LONG=80;
    public static final int FOR_EACH=131;
    public static final int EXTENDS=68;
    public static final int PUBLIC=87;
    public static final int CATCH_CLAUSE_LIST=133;

    // delegates
    // delegators


        public SSQSA_JavaParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public SSQSA_JavaParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[381+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return SSQSA_JavaParser.tokenNames; }
    public String getGrammarFileName() { return "C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g"; }



        

        private boolean mMessageCollectionEnabled = false;

        private boolean mHasErrors = false;

        private List<String> mMessages;



        /**

         *  Switches error message collection on or of.

         *

         *  The standard destination for parser error messages is <code>System.err</code>.

         *  However, if <code>true</code> gets passed to this method this default

         *  behaviour will be switched off and all error messages will be collected

         *  instead of written to anywhere.

         *

         *  The default value is <code>false</code>.

         *

         *  @param pNewState  <code>true</code> if error messages should be collected.

         */

        public void enableErrorMessageCollection(boolean pNewState) {

            mMessageCollectionEnabled = pNewState;

            if (mMessages == null && mMessageCollectionEnabled) {

                mMessages = new ArrayList<String>();

            }

        }

        

        /**

         *  Collects an error message or passes the error message to <code>

         *  super.emitErrorMessage(...)</code>.

         *

         *  The actual behaviour depends on whether collecting error messages

         *  has been enabled or not.

         *

         *  @param pMessage  The error message.

         */

         @Override

        public void emitErrorMessage(String pMessage) {

            if (mMessageCollectionEnabled) {

                mMessages.add(pMessage);

            } else {

                super.emitErrorMessage(pMessage);

            }

        }

        

        /**

         *  Returns collected error messages.

         *

         *  @return  A list holding collected error messages or <code>null</code> if

         *           collecting error messages hasn't been enabled. Of course, this

         *           list may be empty if no error message has been emited.

         */

        public List<String> getMessages() {

            return mMessages;

        }

        

        /**

         *  Tells if parsing a Java source has caused any error messages.

         *

         *  @return  <code>true</code> if parsing a Java source has caused at least one error message.

         */

        public boolean hasErrors() {

            return mHasErrors;

        }



    public static class startNonterminal_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startNonterminal"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:780:1: startNonterminal : compilationUnit -> ^( COMPILATION_UNIT compilationUnit ) ;
    public final SSQSA_JavaParser.startNonterminal_return startNonterminal() throws RecognitionException {
        SSQSA_JavaParser.startNonterminal_return retval = new SSQSA_JavaParser.startNonterminal_return();
        retval.start = input.LT(1);
        int startNonterminal_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.compilationUnit_return compilationUnit1 = null;


        RewriteRuleSubtreeStream stream_compilationUnit=new RewriteRuleSubtreeStream(adaptor,"rule compilationUnit");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:782:5: ( compilationUnit -> ^( COMPILATION_UNIT compilationUnit ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:782:9: compilationUnit
            {
            pushFollow(FOLLOW_compilationUnit_in_startNonterminal5329);
            compilationUnit1=compilationUnit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_compilationUnit.add(compilationUnit1.getTree());


            // AST REWRITE
            // elements: compilationUnit
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 784:5: -> ^( COMPILATION_UNIT compilationUnit )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:784:9: ^( COMPILATION_UNIT compilationUnit )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPILATION_UNIT, "COMPILATION_UNIT"), root_1);

                adaptor.addChild(root_1, stream_compilationUnit.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, startNonterminal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "startNonterminal"

    public static class compilationUnit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:798:1: compilationUnit : ( annotationList )? ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* -> ^( PACKAGE_DECL ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* ) ;
    public final SSQSA_JavaParser.compilationUnit_return compilationUnit() throws RecognitionException {
        SSQSA_JavaParser.compilationUnit_return retval = new SSQSA_JavaParser.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.annotationList_return annotationList2 = null;

        SSQSA_JavaParser.packageDeclaration_return packageDeclaration3 = null;

        SSQSA_JavaParser.importDeclaration_return importDeclaration4 = null;

        SSQSA_JavaParser.typeDecls_return typeDecls5 = null;


        RewriteRuleSubtreeStream stream_packageDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule packageDeclaration");
        RewriteRuleSubtreeStream stream_typeDecls=new RewriteRuleSubtreeStream(adaptor,"rule typeDecls");
        RewriteRuleSubtreeStream stream_annotationList=new RewriteRuleSubtreeStream(adaptor,"rule annotationList");
        RewriteRuleSubtreeStream stream_importDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule importDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:800:5: ( ( annotationList )? ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* -> ^( PACKAGE_DECL ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:800:9: ( annotationList )? ( packageDeclaration )? ( importDeclaration )* ( typeDecls )*
            {
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:800:9: ( annotationList )?
            int alt1=2;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: annotationList
                    {
                    pushFollow(FOLLOW_annotationList_in_compilationUnit5373);
                    annotationList2=annotationList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationList.add(annotationList2.getTree());

                    }
                    break;

            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:800:25: ( packageDeclaration )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==PACKAGE) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: packageDeclaration
                    {
                    pushFollow(FOLLOW_packageDeclaration_in_compilationUnit5376);
                    packageDeclaration3=packageDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_packageDeclaration.add(packageDeclaration3.getTree());

                    }
                    break;

            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:800:45: ( importDeclaration )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==IMPORT) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit5379);
            	    importDeclaration4=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_importDeclaration.add(importDeclaration4.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:800:64: ( typeDecls )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==AT||LA4_0==LESS_THAN||LA4_0==SEMI||LA4_0==ABSTRACT||LA4_0==BOOLEAN||LA4_0==BYTE||(LA4_0>=CHAR && LA4_0<=CLASS)||LA4_0==DOUBLE||LA4_0==ENUM||LA4_0==FINAL||LA4_0==FLOAT||LA4_0==INTERFACE||(LA4_0>=INT && LA4_0<=NATIVE)||(LA4_0>=PRIVATE && LA4_0<=PUBLIC)||(LA4_0>=SHORT && LA4_0<=STRICTFP)||LA4_0==SYNCHRONIZED||LA4_0==TRANSIENT||(LA4_0>=VOID && LA4_0<=VOLATILE)||LA4_0==IDENT) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: typeDecls
            	    {
            	    pushFollow(FOLLOW_typeDecls_in_compilationUnit5382);
            	    typeDecls5=typeDecls();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeDecls.add(typeDecls5.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);



            // AST REWRITE
            // elements: typeDecls, importDeclaration, packageDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 802:9: -> ^( PACKAGE_DECL ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:802:12: ^( PACKAGE_DECL ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PACKAGE_DECL, "PACKAGE_DECL"), root_1);

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:802:27: ( packageDeclaration )?
                if ( stream_packageDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_packageDeclaration.nextTree());

                }
                stream_packageDeclaration.reset();
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:802:47: ( importDeclaration )*
                while ( stream_importDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_importDeclaration.nextTree());

                }
                stream_importDeclaration.reset();
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:802:66: ( typeDecls )*
                while ( stream_typeDecls.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeDecls.nextTree());

                }
                stream_typeDecls.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class typeDecls_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDecls"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:808:1: typeDecls : ( typeDeclaration | SEMI );
    public final SSQSA_JavaParser.typeDecls_return typeDecls() throws RecognitionException {
        SSQSA_JavaParser.typeDecls_return retval = new SSQSA_JavaParser.typeDecls_return();
        retval.start = input.LT(1);
        int typeDecls_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI7=null;
        SSQSA_JavaParser.typeDeclaration_return typeDeclaration6 = null;


        CommonTree SEMI7_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:810:5: ( typeDeclaration | SEMI )
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==AT||LA5_0==LESS_THAN||LA5_0==ABSTRACT||LA5_0==BOOLEAN||LA5_0==BYTE||(LA5_0>=CHAR && LA5_0<=CLASS)||LA5_0==DOUBLE||LA5_0==ENUM||LA5_0==FINAL||LA5_0==FLOAT||LA5_0==INTERFACE||(LA5_0>=INT && LA5_0<=NATIVE)||(LA5_0>=PRIVATE && LA5_0<=PUBLIC)||(LA5_0>=SHORT && LA5_0<=STRICTFP)||LA5_0==SYNCHRONIZED||LA5_0==TRANSIENT||(LA5_0>=VOID && LA5_0<=VOLATILE)||LA5_0==IDENT) ) {
                alt5=1;
            }
            else if ( (LA5_0==SEMI) ) {
                alt5=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;
            }
            switch (alt5) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:810:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_typeDecls5430);
                    typeDeclaration6=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration6.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:812:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI7=(Token)match(input,SEMI,FOLLOW_SEMI_in_typeDecls5441); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, typeDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDecls"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:822:1: packageDeclaration : PACKAGE qualifiedIdentifier SEMI -> qualifiedIdentifier ;
    public final SSQSA_JavaParser.packageDeclaration_return packageDeclaration() throws RecognitionException {
        SSQSA_JavaParser.packageDeclaration_return retval = new SSQSA_JavaParser.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PACKAGE8=null;
        Token SEMI10=null;
        SSQSA_JavaParser.qualifiedIdentifier_return qualifiedIdentifier9 = null;


        CommonTree PACKAGE8_tree=null;
        CommonTree SEMI10_tree=null;
        RewriteRuleTokenStream stream_PACKAGE=new RewriteRuleTokenStream(adaptor,"token PACKAGE");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_qualifiedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:824:5: ( PACKAGE qualifiedIdentifier SEMI -> qualifiedIdentifier )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:824:9: PACKAGE qualifiedIdentifier SEMI
            {
            PACKAGE8=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_packageDeclaration5469); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PACKAGE.add(PACKAGE8);

            pushFollow(FOLLOW_qualifiedIdentifier_in_packageDeclaration5471);
            qualifiedIdentifier9=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedIdentifier.add(qualifiedIdentifier9.getTree());
            SEMI10=(Token)match(input,SEMI,FOLLOW_SEMI_in_packageDeclaration5473); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI10);



            // AST REWRITE
            // elements: qualifiedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 826:9: -> qualifiedIdentifier
            {
                adaptor.addChild(root_0, stream_qualifiedIdentifier.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:836:1: importDeclaration : IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI -> ^( IMPORT_DECL qualifiedIdentifier ( DOTSTAR )? ) ;
    public final SSQSA_JavaParser.importDeclaration_return importDeclaration() throws RecognitionException {
        SSQSA_JavaParser.importDeclaration_return retval = new SSQSA_JavaParser.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IMPORT11=null;
        Token STATIC12=null;
        Token DOTSTAR14=null;
        Token SEMI15=null;
        SSQSA_JavaParser.qualifiedIdentifier_return qualifiedIdentifier13 = null;


        CommonTree IMPORT11_tree=null;
        CommonTree STATIC12_tree=null;
        CommonTree DOTSTAR14_tree=null;
        CommonTree SEMI15_tree=null;
        RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
        RewriteRuleTokenStream stream_STATIC=new RewriteRuleTokenStream(adaptor,"token STATIC");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_DOTSTAR=new RewriteRuleTokenStream(adaptor,"token DOTSTAR");
        RewriteRuleSubtreeStream stream_qualifiedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:838:5: ( IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI -> ^( IMPORT_DECL qualifiedIdentifier ( DOTSTAR )? ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:838:9: IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI
            {
            IMPORT11=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_importDeclaration5520); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPORT.add(IMPORT11);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:838:16: ( STATIC )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==STATIC) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: STATIC
                    {
                    STATIC12=(Token)match(input,STATIC,FOLLOW_STATIC_in_importDeclaration5522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STATIC.add(STATIC12);


                    }
                    break;

            }

            pushFollow(FOLLOW_qualifiedIdentifier_in_importDeclaration5525);
            qualifiedIdentifier13=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedIdentifier.add(qualifiedIdentifier13.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:838:44: ( DOTSTAR )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==DOTSTAR) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: DOTSTAR
                    {
                    DOTSTAR14=(Token)match(input,DOTSTAR,FOLLOW_DOTSTAR_in_importDeclaration5527); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOTSTAR.add(DOTSTAR14);


                    }
                    break;

            }

            SEMI15=(Token)match(input,SEMI,FOLLOW_SEMI_in_importDeclaration5530); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI15);



            // AST REWRITE
            // elements: qualifiedIdentifier, DOTSTAR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 840:9: -> ^( IMPORT_DECL qualifiedIdentifier ( DOTSTAR )? )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:840:12: ^( IMPORT_DECL qualifiedIdentifier ( DOTSTAR )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_DECL, "IMPORT_DECL"), root_1);

                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:840:46: ( DOTSTAR )?
                if ( stream_DOTSTAR.hasNext() ) {
                    adaptor.addChild(root_1, stream_DOTSTAR.nextNode());

                }
                stream_DOTSTAR.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDeclaration"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:848:1: typeDeclaration : modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration ) ;
    public final SSQSA_JavaParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
        SSQSA_JavaParser.typeDeclaration_return retval = new SSQSA_JavaParser.typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.modifierList_return modifierList16 = null;

        SSQSA_JavaParser.classTypeDeclaration_return classTypeDeclaration17 = null;

        SSQSA_JavaParser.interfaceTypeDeclaration_return interfaceTypeDeclaration18 = null;

        SSQSA_JavaParser.enumTypeDeclaration_return enumTypeDeclaration19 = null;

        SSQSA_JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration20 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:850:5: ( modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:850:9: modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_modifierList_in_typeDeclaration5583);
            modifierList16=modifierList();

            state._fsp--;
            if (state.failed) return retval;
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:852:9: ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration )
            int alt8=4;
            switch ( input.LA(1) ) {
            case CLASS:
                {
                alt8=1;
                }
                break;
            case INTERFACE:
                {
                alt8=2;
                }
                break;
            case ENUM:
                {
                alt8=3;
                }
                break;
            case AT:
                {
                alt8=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }

            switch (alt8) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:852:13: classTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_classTypeDeclaration_in_typeDeclaration5599);
                    classTypeDeclaration17=classTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classTypeDeclaration17.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:854:13: interfaceTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_interfaceTypeDeclaration_in_typeDeclaration5615);
                    interfaceTypeDeclaration18=interfaceTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceTypeDeclaration18.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:856:13: enumTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_enumTypeDeclaration_in_typeDeclaration5631);
                    enumTypeDeclaration19=enumTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumTypeDeclaration19.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:858:13: annotationTypeDeclaration
                    {
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_typeDeclaration5647);
                    annotationTypeDeclaration20=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration20.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"

    public static class classTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classTypeDeclaration"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:866:1: classTypeDeclaration[CommonTree modifiers] : CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CONCRETE_UNIT_DECL ^( NAME IDENT ) ( classExtendsClause )? ( implementsClause )? classBody ) ;
    public final SSQSA_JavaParser.classTypeDeclaration_return classTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        SSQSA_JavaParser.classTypeDeclaration_return retval = new SSQSA_JavaParser.classTypeDeclaration_return();
        retval.start = input.LT(1);
        int classTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CLASS21=null;
        Token IDENT22=null;
        SSQSA_JavaParser.genericTypeParameterList_return genericTypeParameterList23 = null;

        SSQSA_JavaParser.classExtendsClause_return classExtendsClause24 = null;

        SSQSA_JavaParser.implementsClause_return implementsClause25 = null;

        SSQSA_JavaParser.classBody_return classBody26 = null;


        CommonTree CLASS21_tree=null;
        CommonTree IDENT22_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_classExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule classExtendsClause");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:868:5: ( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CONCRETE_UNIT_DECL ^( NAME IDENT ) ( classExtendsClause )? ( implementsClause )? classBody ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:868:7: CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody
            {
            CLASS21=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeDeclaration5684); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLASS.add(CLASS21);

            IDENT22=(Token)match(input,IDENT,FOLLOW_IDENT_in_classTypeDeclaration5686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT22);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:868:19: ( genericTypeParameterList )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==LESS_THAN) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_classTypeDeclaration5688);
                    genericTypeParameterList23=genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList23.getTree());

                    }
                    break;

            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:868:45: ( classExtendsClause )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==EXTENDS) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: classExtendsClause
                    {
                    pushFollow(FOLLOW_classExtendsClause_in_classTypeDeclaration5691);
                    classExtendsClause24=classExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classExtendsClause.add(classExtendsClause24.getTree());

                    }
                    break;

            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:868:65: ( implementsClause )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==IMPLEMENTS) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: implementsClause
                    {
                    pushFollow(FOLLOW_implementsClause_in_classTypeDeclaration5694);
                    implementsClause25=implementsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause25.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_classTypeDeclaration5697);
            classBody26=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classBody.add(classBody26.getTree());


            // AST REWRITE
            // elements: classBody, implementsClause, IDENT, classExtendsClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 870:9: -> ^( CONCRETE_UNIT_DECL ^( NAME IDENT ) ( classExtendsClause )? ( implementsClause )? classBody )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:870:12: ^( CONCRETE_UNIT_DECL ^( NAME IDENT ) ( classExtendsClause )? ( implementsClause )? classBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCRETE_UNIT_DECL, "CONCRETE_UNIT_DECL"), root_1);

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:870:61: ^( NAME IDENT )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

                adaptor.addChild(root_2, stream_IDENT.nextNode());

                adaptor.addChild(root_1, root_2);
                }
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:870:108: ( classExtendsClause )?
                if ( stream_classExtendsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_classExtendsClause.nextTree());

                }
                stream_classExtendsClause.reset();
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:870:128: ( implementsClause )?
                if ( stream_implementsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_implementsClause.nextTree());

                }
                stream_implementsClause.reset();
                adaptor.addChild(root_1, stream_classBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, classTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classTypeDeclaration"

    public static class classExtendsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classExtendsClause"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:876:1: classExtendsClause : EXTENDS type -> ^( EXTENDS[$EXTENDS, \"EXTENDS\"] type ) ;
    public final SSQSA_JavaParser.classExtendsClause_return classExtendsClause() throws RecognitionException {
        SSQSA_JavaParser.classExtendsClause_return retval = new SSQSA_JavaParser.classExtendsClause_return();
        retval.start = input.LT(1);
        int classExtendsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS27=null;
        SSQSA_JavaParser.type_return type28 = null;


        CommonTree EXTENDS27_tree=null;
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:878:5: ( EXTENDS type -> ^( EXTENDS[$EXTENDS, \"EXTENDS\"] type ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:878:9: EXTENDS type
            {
            EXTENDS27=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_classExtendsClause5761); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS27);

            pushFollow(FOLLOW_type_in_classExtendsClause5763);
            type28=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type28.getTree());


            // AST REWRITE
            // elements: EXTENDS, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 880:9: -> ^( EXTENDS[$EXTENDS, \"EXTENDS\"] type )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:880:13: ^( EXTENDS[$EXTENDS, \"EXTENDS\"] type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDS, EXTENDS27, "EXTENDS"), root_1);

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, classExtendsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classExtendsClause"

    public static class interfaceExtendsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceExtendsClause"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:888:1: interfaceExtendsClause : EXTENDS type ( COMMA type )* -> ( ^( EDITABLE_TOKEN[\"EXTENDS\"] type ) )* ;
    public final SSQSA_JavaParser.interfaceExtendsClause_return interfaceExtendsClause() throws RecognitionException {
        SSQSA_JavaParser.interfaceExtendsClause_return retval = new SSQSA_JavaParser.interfaceExtendsClause_return();
        retval.start = input.LT(1);
        int interfaceExtendsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS29=null;
        Token COMMA31=null;
        SSQSA_JavaParser.type_return type30 = null;

        SSQSA_JavaParser.type_return type32 = null;


        CommonTree EXTENDS29_tree=null;
        CommonTree COMMA31_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:890:5: ( EXTENDS type ( COMMA type )* -> ( ^( EDITABLE_TOKEN[\"EXTENDS\"] type ) )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:892:9: EXTENDS type ( COMMA type )*
            {
            EXTENDS29=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_interfaceExtendsClause5825); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS29);

            pushFollow(FOLLOW_type_in_interfaceExtendsClause5827);
            type30=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type30.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:892:22: ( COMMA type )*
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==COMMA) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:892:23: COMMA type
            	    {
            	    COMMA31=(Token)match(input,COMMA,FOLLOW_COMMA_in_interfaceExtendsClause5830); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA31);

            	    pushFollow(FOLLOW_type_in_interfaceExtendsClause5832);
            	    type32=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type.add(type32.getTree());

            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);



            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 896:9: -> ( ^( EDITABLE_TOKEN[\"EXTENDS\"] type ) )*
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:896:12: ( ^( EDITABLE_TOKEN[\"EXTENDS\"] type ) )*
                while ( stream_type.hasNext() ) {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:896:13: ^( EDITABLE_TOKEN[\"EXTENDS\"] type )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EDITABLE_TOKEN, "EXTENDS"), root_1);

                    adaptor.addChild(root_1, stream_type.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_type.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, interfaceExtendsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceExtendsClause"

    public static class implementsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implementsClause"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:904:1: implementsClause : IMPLEMENTS type ( COMMA type )* -> ( ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS\"] type ) )* ;
    public final SSQSA_JavaParser.implementsClause_return implementsClause() throws RecognitionException {
        SSQSA_JavaParser.implementsClause_return retval = new SSQSA_JavaParser.implementsClause_return();
        retval.start = input.LT(1);
        int implementsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IMPLEMENTS33=null;
        Token COMMA35=null;
        SSQSA_JavaParser.type_return type34 = null;

        SSQSA_JavaParser.type_return type36 = null;


        CommonTree IMPLEMENTS33_tree=null;
        CommonTree COMMA35_tree=null;
        RewriteRuleTokenStream stream_IMPLEMENTS=new RewriteRuleTokenStream(adaptor,"token IMPLEMENTS");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:906:5: ( IMPLEMENTS type ( COMMA type )* -> ( ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS\"] type ) )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:908:9: IMPLEMENTS type ( COMMA type )*
            {
            IMPLEMENTS33=(Token)match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_implementsClause5908); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPLEMENTS.add(IMPLEMENTS33);

            pushFollow(FOLLOW_type_in_implementsClause5910);
            type34=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type34.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:908:25: ( COMMA type )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==COMMA) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:908:26: COMMA type
            	    {
            	    COMMA35=(Token)match(input,COMMA,FOLLOW_COMMA_in_implementsClause5913); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA35);

            	    pushFollow(FOLLOW_type_in_implementsClause5915);
            	    type36=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type.add(type36.getTree());

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);



            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 910:9: -> ( ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS\"] type ) )*
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:910:13: ( ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS\"] type ) )*
                while ( stream_type.hasNext() ) {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:910:14: ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS\"] type )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPLEMENTS_CLAUSE, IMPLEMENTS33, "IMPLEMENTS"), root_1);

                    adaptor.addChild(root_1, stream_type.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_type.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, implementsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "implementsClause"

    public static class genericTypeParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeParameterList"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:920:1: genericTypeParameterList : LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> genericTypeParameter ;
    public final SSQSA_JavaParser.genericTypeParameterList_return genericTypeParameterList() throws RecognitionException {
        SSQSA_JavaParser.genericTypeParameterList_return retval = new SSQSA_JavaParser.genericTypeParameterList_return();
        retval.start = input.LT(1);
        int genericTypeParameterList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN37=null;
        Token COMMA39=null;
        SSQSA_JavaParser.genericTypeParameter_return genericTypeParameter38 = null;

        SSQSA_JavaParser.genericTypeParameter_return genericTypeParameter40 = null;

        SSQSA_JavaParser.genericTypeListClosing_return genericTypeListClosing41 = null;


        CommonTree LESS_THAN37_tree=null;
        CommonTree COMMA39_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeParameter=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameter");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:922:5: ( LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> genericTypeParameter )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:922:9: LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing
            {
            LESS_THAN37=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeParameterList5971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN37);

            pushFollow(FOLLOW_genericTypeParameter_in_genericTypeParameterList5973);
            genericTypeParameter38=genericTypeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeParameter.add(genericTypeParameter38.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:922:40: ( COMMA genericTypeParameter )*
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==COMMA) ) {
                    alt14=1;
                }


                switch (alt14) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:922:41: COMMA genericTypeParameter
            	    {
            	    COMMA39=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeParameterList5976); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA39);

            	    pushFollow(FOLLOW_genericTypeParameter_in_genericTypeParameterList5978);
            	    genericTypeParameter40=genericTypeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_genericTypeParameter.add(genericTypeParameter40.getTree());

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeParameterList5982);
            genericTypeListClosing41=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing41.getTree());


            // AST REWRITE
            // elements: genericTypeParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 926:9: -> genericTypeParameter
            {
                adaptor.addChild(root_0, stream_genericTypeParameter.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, genericTypeParameterList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeParameterList"

    public static class genericTypeListClosing_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeListClosing"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:932:1: genericTypeListClosing : ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | );
    public final SSQSA_JavaParser.genericTypeListClosing_return genericTypeListClosing() throws RecognitionException {
        SSQSA_JavaParser.genericTypeListClosing_return retval = new SSQSA_JavaParser.genericTypeListClosing_return();
        retval.start = input.LT(1);
        int genericTypeListClosing_StartIndex = input.index();
        CommonTree root_0 = null;

        Token GREATER_THAN42=null;
        Token SHIFT_RIGHT43=null;
        Token BIT_SHIFT_RIGHT44=null;

        CommonTree GREATER_THAN42_tree=null;
        CommonTree SHIFT_RIGHT43_tree=null;
        CommonTree BIT_SHIFT_RIGHT44_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:940:5: ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | )
            int alt15=4;
            switch ( input.LA(1) ) {
            case GREATER_THAN:
                {
                int LA15_1 = input.LA(2);

                if ( (synpred17_SSQSA_Java()) ) {
                    alt15=1;
                }
                else if ( (true) ) {
                    alt15=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 15, 1, input);

                    throw nvae;
                }
                }
                break;
            case SHIFT_RIGHT:
                {
                int LA15_2 = input.LA(2);

                if ( (synpred18_SSQSA_Java()) ) {
                    alt15=2;
                }
                else if ( (true) ) {
                    alt15=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 15, 2, input);

                    throw nvae;
                }
                }
                break;
            case BIT_SHIFT_RIGHT:
                {
                int LA15_3 = input.LA(2);

                if ( (synpred19_SSQSA_Java()) ) {
                    alt15=3;
                }
                else if ( (true) ) {
                    alt15=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 15, 3, input);

                    throw nvae;
                }
                }
                break;
            case EOF:
            case AND:
            case AND_ASSIGN:
            case ASSIGN:
            case BIT_SHIFT_RIGHT_ASSIGN:
            case COLON:
            case COMMA:
            case DIV_ASSIGN:
            case DOT:
            case ELLIPSIS:
            case EQUAL:
            case LBRACK:
            case LCURLY:
            case LOGICAL_AND:
            case LOGICAL_OR:
            case LPAREN:
            case MINUS_ASSIGN:
            case MOD_ASSIGN:
            case NOT_EQUAL:
            case OR:
            case OR_ASSIGN:
            case PLUS_ASSIGN:
            case QUESTION:
            case RBRACK:
            case RCURLY:
            case RPAREN:
            case SEMI:
            case SHIFT_LEFT_ASSIGN:
            case SHIFT_RIGHT_ASSIGN:
            case STAR_ASSIGN:
            case XOR:
            case XOR_ASSIGN:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case EXTENDS:
            case FLOAT:
            case IMPLEMENTS:
            case INT:
            case LONG:
            case SHORT:
            case SUPER:
            case THIS:
            case VOID:
            case IDENT:
                {
                alt15=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }

            switch (alt15) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:940:9: GREATER_THAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATER_THAN42=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_genericTypeListClosing6108); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_THAN42_tree = (CommonTree)adaptor.create(GREATER_THAN42);
                    adaptor.addChild(root_0, GREATER_THAN42_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:942:9: SHIFT_RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SHIFT_RIGHT43=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_genericTypeListClosing6119); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_RIGHT43_tree = (CommonTree)adaptor.create(SHIFT_RIGHT43);
                    adaptor.addChild(root_0, SHIFT_RIGHT43_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:944:9: BIT_SHIFT_RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BIT_SHIFT_RIGHT44=(Token)match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_genericTypeListClosing6130); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIT_SHIFT_RIGHT44_tree = (CommonTree)adaptor.create(BIT_SHIFT_RIGHT44);
                    adaptor.addChild(root_0, BIT_SHIFT_RIGHT44_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:948:5: 
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, genericTypeListClosing_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeListClosing"

    public static class genericTypeParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeParameter"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:952:1: genericTypeParameter : IDENT ( bound )? -> ^( TYPE IDENT ) ( bound )? ;
    public final SSQSA_JavaParser.genericTypeParameter_return genericTypeParameter() throws RecognitionException {
        SSQSA_JavaParser.genericTypeParameter_return retval = new SSQSA_JavaParser.genericTypeParameter_return();
        retval.start = input.LT(1);
        int genericTypeParameter_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT45=null;
        SSQSA_JavaParser.bound_return bound46 = null;


        CommonTree IDENT45_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_bound=new RewriteRuleSubtreeStream(adaptor,"rule bound");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:954:5: ( IDENT ( bound )? -> ^( TYPE IDENT ) ( bound )? )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:954:9: IDENT ( bound )?
            {
            IDENT45=(Token)match(input,IDENT,FOLLOW_IDENT_in_genericTypeParameter6163); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT45);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:954:15: ( bound )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==EXTENDS) ) {
                int LA16_1 = input.LA(2);

                if ( (LA16_1==BOOLEAN||LA16_1==BYTE||LA16_1==CHAR||LA16_1==DOUBLE||LA16_1==FLOAT||(LA16_1>=INT && LA16_1<=LONG)||LA16_1==SHORT) ) {
                    int LA16_3 = input.LA(3);

                    if ( (synpred20_SSQSA_Java()) ) {
                        alt16=1;
                    }
                }
                else if ( (LA16_1==IDENT) ) {
                    int LA16_4 = input.LA(3);

                    if ( (synpred20_SSQSA_Java()) ) {
                        alt16=1;
                    }
                }
            }
            switch (alt16) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: bound
                    {
                    pushFollow(FOLLOW_bound_in_genericTypeParameter6165);
                    bound46=bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound.add(bound46.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bound, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 958:9: -> ^( TYPE IDENT ) ( bound )?
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:958:12: ^( TYPE IDENT )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_IDENT.nextNode());

                adaptor.addChild(root_0, root_1);
                }
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:958:42: ( bound )?
                if ( stream_bound.hasNext() ) {
                    adaptor.addChild(root_0, stream_bound.nextTree());

                }
                stream_bound.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, genericTypeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeParameter"

    public static class bound_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bound"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:968:1: bound : EXTENDS type ( AND type )* ;
    public final SSQSA_JavaParser.bound_return bound() throws RecognitionException {
        SSQSA_JavaParser.bound_return retval = new SSQSA_JavaParser.bound_return();
        retval.start = input.LT(1);
        int bound_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS47=null;
        Token AND49=null;
        SSQSA_JavaParser.type_return type48 = null;

        SSQSA_JavaParser.type_return type50 = null;


        CommonTree EXTENDS47_tree=null;
        CommonTree AND49_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:970:5: ( EXTENDS type ( AND type )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:970:9: EXTENDS type ( AND type )*
            {
            root_0 = (CommonTree)adaptor.nil();

            EXTENDS47=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_bound6229); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXTENDS47_tree = (CommonTree)adaptor.create(EXTENDS47);
            adaptor.addChild(root_0, EXTENDS47_tree);
            }
            pushFollow(FOLLOW_type_in_bound6231);
            type48=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type48.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:970:22: ( AND type )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==AND) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:970:23: AND type
            	    {
            	    AND49=(Token)match(input,AND,FOLLOW_AND_in_bound6234); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AND49_tree = (CommonTree)adaptor.create(AND49);
            	    adaptor.addChild(root_0, AND49_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_bound6236);
            	    type50=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type50.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, bound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bound"

    public static class enumTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumTypeDeclaration"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:978:1: enumTypeDeclaration[CommonTree modifiers] : ENUM IDENT ( implementsClause )? enumBody -> ^( TYPE_DECL ^( NAME IDENT ) ( implementsClause )? enumBody ) ;
    public final SSQSA_JavaParser.enumTypeDeclaration_return enumTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        SSQSA_JavaParser.enumTypeDeclaration_return retval = new SSQSA_JavaParser.enumTypeDeclaration_return();
        retval.start = input.LT(1);
        int enumTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ENUM51=null;
        Token IDENT52=null;
        SSQSA_JavaParser.implementsClause_return implementsClause53 = null;

        SSQSA_JavaParser.enumBody_return enumBody54 = null;


        CommonTree ENUM51_tree=null;
        CommonTree IDENT52_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ENUM=new RewriteRuleTokenStream(adaptor,"token ENUM");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:980:5: ( ENUM IDENT ( implementsClause )? enumBody -> ^( TYPE_DECL ^( NAME IDENT ) ( implementsClause )? enumBody ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:980:9: ENUM IDENT ( implementsClause )? enumBody
            {
            ENUM51=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumTypeDeclaration6264); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ENUM.add(ENUM51);

            IDENT52=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumTypeDeclaration6266); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT52);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:980:20: ( implementsClause )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==IMPLEMENTS) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: implementsClause
                    {
                    pushFollow(FOLLOW_implementsClause_in_enumTypeDeclaration6268);
                    implementsClause53=implementsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause53.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumTypeDeclaration6271);
            enumBody54=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumBody.add(enumBody54.getTree());


            // AST REWRITE
            // elements: enumBody, implementsClause, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 982:9: -> ^( TYPE_DECL ^( NAME IDENT ) ( implementsClause )? enumBody )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:982:13: ^( TYPE_DECL ^( NAME IDENT ) ( implementsClause )? enumBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_DECL, "TYPE_DECL"), root_1);

                adaptor.addChild(root_1, modifiers);
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:982:38: ^( NAME IDENT )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

                adaptor.addChild(root_2, stream_IDENT.nextNode());

                adaptor.addChild(root_1, root_2);
                }
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:982:52: ( implementsClause )?
                if ( stream_implementsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_implementsClause.nextTree());

                }
                stream_implementsClause.reset();
                adaptor.addChild(root_1, stream_enumBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, enumTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumTypeDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBody"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:992:1: enumBody : LCURLY enumScopeDeclarations RCURLY ;
    public final SSQSA_JavaParser.enumBody_return enumBody() throws RecognitionException {
        SSQSA_JavaParser.enumBody_return retval = new SSQSA_JavaParser.enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY55=null;
        Token RCURLY57=null;
        SSQSA_JavaParser.enumScopeDeclarations_return enumScopeDeclarations56 = null;


        CommonTree LCURLY55_tree=null;
        CommonTree RCURLY57_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:994:5: ( LCURLY enumScopeDeclarations RCURLY )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:994:9: LCURLY enumScopeDeclarations RCURLY
            {
            root_0 = (CommonTree)adaptor.nil();

            LCURLY55=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_enumBody6331); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LCURLY55_tree = (CommonTree)adaptor.create(LCURLY55);
            adaptor.addChild(root_0, LCURLY55_tree);
            }
            pushFollow(FOLLOW_enumScopeDeclarations_in_enumBody6333);
            enumScopeDeclarations56=enumScopeDeclarations();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumScopeDeclarations56.getTree());
            RCURLY57=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_enumBody6335); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RCURLY57_tree = (CommonTree)adaptor.create(RCURLY57);
            adaptor.addChild(root_0, RCURLY57_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumScopeDeclarations"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1000:1: enumScopeDeclarations : enumConstants ( COMMA )? ( enumClassScopeDeclarations )? ;
    public final SSQSA_JavaParser.enumScopeDeclarations_return enumScopeDeclarations() throws RecognitionException {
        SSQSA_JavaParser.enumScopeDeclarations_return retval = new SSQSA_JavaParser.enumScopeDeclarations_return();
        retval.start = input.LT(1);
        int enumScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA59=null;
        SSQSA_JavaParser.enumConstants_return enumConstants58 = null;

        SSQSA_JavaParser.enumClassScopeDeclarations_return enumClassScopeDeclarations60 = null;


        CommonTree COMMA59_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1002:5: ( enumConstants ( COMMA )? ( enumClassScopeDeclarations )? )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1002:9: enumConstants ( COMMA )? ( enumClassScopeDeclarations )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_enumConstants_in_enumScopeDeclarations6361);
            enumConstants58=enumConstants();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstants58.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1002:23: ( COMMA )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==COMMA) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1002:24: COMMA
                    {
                    COMMA59=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumScopeDeclarations6364); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA59_tree = (CommonTree)adaptor.create(COMMA59);
                    adaptor.addChild(root_0, COMMA59_tree);
                    }

                    }
                    break;

            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1002:32: ( enumClassScopeDeclarations )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==SEMI) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: enumClassScopeDeclarations
                    {
                    pushFollow(FOLLOW_enumClassScopeDeclarations_in_enumScopeDeclarations6368);
                    enumClassScopeDeclarations60=enumClassScopeDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumClassScopeDeclarations60.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, enumScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumScopeDeclarations"

    public static class enumClassScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumClassScopeDeclarations"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1012:1: enumClassScopeDeclarations : SEMI ( classScopeDeclarations )* ;
    public final SSQSA_JavaParser.enumClassScopeDeclarations_return enumClassScopeDeclarations() throws RecognitionException {
        SSQSA_JavaParser.enumClassScopeDeclarations_return retval = new SSQSA_JavaParser.enumClassScopeDeclarations_return();
        retval.start = input.LT(1);
        int enumClassScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI61=null;
        SSQSA_JavaParser.classScopeDeclarations_return classScopeDeclarations62 = null;


        CommonTree SEMI61_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1014:5: ( SEMI ( classScopeDeclarations )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1014:9: SEMI ( classScopeDeclarations )*
            {
            root_0 = (CommonTree)adaptor.nil();

            SEMI61=(Token)match(input,SEMI,FOLLOW_SEMI_in_enumClassScopeDeclarations6396); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI61_tree = (CommonTree)adaptor.create(SEMI61);
            adaptor.addChild(root_0, SEMI61_tree);
            }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1014:14: ( classScopeDeclarations )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==AT||LA21_0==LCURLY||LA21_0==LESS_THAN||LA21_0==SEMI||LA21_0==ABSTRACT||LA21_0==BOOLEAN||LA21_0==BYTE||(LA21_0>=CHAR && LA21_0<=CLASS)||LA21_0==DOUBLE||LA21_0==ENUM||LA21_0==FINAL||LA21_0==FLOAT||LA21_0==INTERFACE||(LA21_0>=INT && LA21_0<=NATIVE)||(LA21_0>=PRIVATE && LA21_0<=PUBLIC)||(LA21_0>=SHORT && LA21_0<=STRICTFP)||LA21_0==SYNCHRONIZED||LA21_0==TRANSIENT||(LA21_0>=VOID && LA21_0<=VOLATILE)||LA21_0==IDENT) ) {
                    alt21=1;
                }


                switch (alt21) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: classScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_classScopeDeclarations_in_enumClassScopeDeclarations6398);
            	    classScopeDeclarations62=classScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classScopeDeclarations62.getTree());

            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, enumClassScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumClassScopeDeclarations"

    public static class enumConstants_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstants"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1020:1: enumConstants : enumConstant ( COMMA enumConstant )* ;
    public final SSQSA_JavaParser.enumConstants_return enumConstants() throws RecognitionException {
        SSQSA_JavaParser.enumConstants_return retval = new SSQSA_JavaParser.enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA64=null;
        SSQSA_JavaParser.enumConstant_return enumConstant63 = null;

        SSQSA_JavaParser.enumConstant_return enumConstant65 = null;


        CommonTree COMMA64_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1022:5: ( enumConstant ( COMMA enumConstant )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1022:9: enumConstant ( COMMA enumConstant )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_enumConstant_in_enumConstants6424);
            enumConstant63=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant63.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1022:22: ( COMMA enumConstant )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==COMMA) ) {
                    int LA22_1 = input.LA(2);

                    if ( (LA22_1==AT||LA22_1==IDENT) ) {
                        alt22=1;
                    }


                }


                switch (alt22) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1022:23: COMMA enumConstant
            	    {
            	    COMMA64=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumConstants6427); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA64_tree = (CommonTree)adaptor.create(COMMA64);
            	    adaptor.addChild(root_0, COMMA64_tree);
            	    }
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants6429);
            	    enumConstant65=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant65.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstant"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1028:1: enumConstant : annotationList IDENT ( arguments )? ( classBody )? ;
    public final SSQSA_JavaParser.enumConstant_return enumConstant() throws RecognitionException {
        SSQSA_JavaParser.enumConstant_return retval = new SSQSA_JavaParser.enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT67=null;
        SSQSA_JavaParser.annotationList_return annotationList66 = null;

        SSQSA_JavaParser.arguments_return arguments68 = null;

        SSQSA_JavaParser.classBody_return classBody69 = null;


        CommonTree IDENT67_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1030:5: ( annotationList IDENT ( arguments )? ( classBody )? )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1030:9: annotationList IDENT ( arguments )? ( classBody )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_annotationList_in_enumConstant6458);
            annotationList66=annotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationList66.getTree());
            IDENT67=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumConstant6460); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT67_tree = (CommonTree)adaptor.create(IDENT67);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT67_tree, root_0);
            }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1030:31: ( arguments )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==LPAREN) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant6463);
                    arguments68=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments68.getTree());

                    }
                    break;

            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1030:42: ( classBody )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==LCURLY) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant6466);
                    classBody69=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBody69.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class interfaceTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceTypeDeclaration"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1040:1: interfaceTypeDeclaration[CommonTree modifiers] : INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE_UNIT_DECL ^( NAME IDENT ) ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) ;
    public final SSQSA_JavaParser.interfaceTypeDeclaration_return interfaceTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        SSQSA_JavaParser.interfaceTypeDeclaration_return retval = new SSQSA_JavaParser.interfaceTypeDeclaration_return();
        retval.start = input.LT(1);
        int interfaceTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INTERFACE70=null;
        Token IDENT71=null;
        SSQSA_JavaParser.genericTypeParameterList_return genericTypeParameterList72 = null;

        SSQSA_JavaParser.interfaceExtendsClause_return interfaceExtendsClause73 = null;

        SSQSA_JavaParser.interfaceBody_return interfaceBody74 = null;


        CommonTree INTERFACE70_tree=null;
        CommonTree IDENT71_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
        RewriteRuleSubtreeStream stream_interfaceExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule interfaceExtendsClause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1042:5: ( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE_UNIT_DECL ^( NAME IDENT ) ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1042:9: INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody
            {
            INTERFACE70=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_interfaceTypeDeclaration6497); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTERFACE.add(INTERFACE70);

            IDENT71=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceTypeDeclaration6499); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT71);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1042:25: ( genericTypeParameterList )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==LESS_THAN) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_interfaceTypeDeclaration6501);
                    genericTypeParameterList72=genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList72.getTree());

                    }
                    break;

            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1042:51: ( interfaceExtendsClause )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==EXTENDS) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: interfaceExtendsClause
                    {
                    pushFollow(FOLLOW_interfaceExtendsClause_in_interfaceTypeDeclaration6504);
                    interfaceExtendsClause73=interfaceExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceExtendsClause.add(interfaceExtendsClause73.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_interfaceTypeDeclaration6507);
            interfaceBody74=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceBody.add(interfaceBody74.getTree());


            // AST REWRITE
            // elements: genericTypeParameterList, interfaceExtendsClause, IDENT, interfaceBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1044:9: -> ^( INTERFACE_UNIT_DECL ^( NAME IDENT ) ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1044:12: ^( INTERFACE_UNIT_DECL ^( NAME IDENT ) ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERFACE_UNIT_DECL, "INTERFACE_UNIT_DECL"), root_1);

                adaptor.addChild(root_1, modifiers);
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1044:47: ^( NAME IDENT )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

                adaptor.addChild(root_2, stream_IDENT.nextNode());

                adaptor.addChild(root_1, root_2);
                }
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1044:62: ( genericTypeParameterList )?
                if ( stream_genericTypeParameterList.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                }
                stream_genericTypeParameterList.reset();
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1044:89: ( interfaceExtendsClause )?
                if ( stream_interfaceExtendsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceExtendsClause.nextTree());

                }
                stream_interfaceExtendsClause.reset();
                adaptor.addChild(root_1, stream_interfaceBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, interfaceTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceTypeDeclaration"

    public static class typeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1052:1: typeList : type ( COMMA type )* ;
    public final SSQSA_JavaParser.typeList_return typeList() throws RecognitionException {
        SSQSA_JavaParser.typeList_return retval = new SSQSA_JavaParser.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA76=null;
        SSQSA_JavaParser.type_return type75 = null;

        SSQSA_JavaParser.type_return type77 = null;


        CommonTree COMMA76_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1054:5: ( type ( COMMA type )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1054:9: type ( COMMA type )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList6569);
            type75=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type75.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1054:14: ( COMMA type )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==COMMA) ) {
                    alt27=1;
                }


                switch (alt27) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1054:15: COMMA type
            	    {
            	    COMMA76=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeList6572); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA76_tree = (CommonTree)adaptor.create(COMMA76);
            	    adaptor.addChild(root_0, COMMA76_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_typeList6574);
            	    type77=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type77.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class classBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1064:1: classBody : LCURLY ( classScopeDeclarations )* RCURLY ;
    public final SSQSA_JavaParser.classBody_return classBody() throws RecognitionException {
        SSQSA_JavaParser.classBody_return retval = new SSQSA_JavaParser.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY78=null;
        Token RCURLY80=null;
        SSQSA_JavaParser.classScopeDeclarations_return classScopeDeclarations79 = null;


        CommonTree LCURLY78_tree=null;
        CommonTree RCURLY80_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1066:5: ( LCURLY ( classScopeDeclarations )* RCURLY )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1066:9: LCURLY ( classScopeDeclarations )* RCURLY
            {
            root_0 = (CommonTree)adaptor.nil();

            LCURLY78=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_classBody6607); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LCURLY78_tree = (CommonTree)adaptor.create(LCURLY78);
            adaptor.addChild(root_0, LCURLY78_tree);
            }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1066:16: ( classScopeDeclarations )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==AT||LA28_0==LCURLY||LA28_0==LESS_THAN||LA28_0==SEMI||LA28_0==ABSTRACT||LA28_0==BOOLEAN||LA28_0==BYTE||(LA28_0>=CHAR && LA28_0<=CLASS)||LA28_0==DOUBLE||LA28_0==ENUM||LA28_0==FINAL||LA28_0==FLOAT||LA28_0==INTERFACE||(LA28_0>=INT && LA28_0<=NATIVE)||(LA28_0>=PRIVATE && LA28_0<=PUBLIC)||(LA28_0>=SHORT && LA28_0<=STRICTFP)||LA28_0==SYNCHRONIZED||LA28_0==TRANSIENT||(LA28_0>=VOID && LA28_0<=VOLATILE)||LA28_0==IDENT) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: classScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_classScopeDeclarations_in_classBody6609);
            	    classScopeDeclarations79=classScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classScopeDeclarations79.getTree());

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);

            RCURLY80=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_classBody6612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RCURLY80_tree = (CommonTree)adaptor.create(RCURLY80);
            adaptor.addChild(root_0, RCURLY80_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1078:1: interfaceBody : LCURLY ( interfaceScopeDeclarations )* RCURLY ;
    public final SSQSA_JavaParser.interfaceBody_return interfaceBody() throws RecognitionException {
        SSQSA_JavaParser.interfaceBody_return retval = new SSQSA_JavaParser.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY81=null;
        Token RCURLY83=null;
        SSQSA_JavaParser.interfaceScopeDeclarations_return interfaceScopeDeclarations82 = null;


        CommonTree LCURLY81_tree=null;
        CommonTree RCURLY83_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1080:5: ( LCURLY ( interfaceScopeDeclarations )* RCURLY )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1080:9: LCURLY ( interfaceScopeDeclarations )* RCURLY
            {
            root_0 = (CommonTree)adaptor.nil();

            LCURLY81=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_interfaceBody6648); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LCURLY81_tree = (CommonTree)adaptor.create(LCURLY81);
            adaptor.addChild(root_0, LCURLY81_tree);
            }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1080:16: ( interfaceScopeDeclarations )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==AT||LA29_0==LESS_THAN||LA29_0==SEMI||LA29_0==ABSTRACT||LA29_0==BOOLEAN||LA29_0==BYTE||(LA29_0>=CHAR && LA29_0<=CLASS)||LA29_0==DOUBLE||LA29_0==ENUM||LA29_0==FINAL||LA29_0==FLOAT||LA29_0==INTERFACE||(LA29_0>=INT && LA29_0<=NATIVE)||(LA29_0>=PRIVATE && LA29_0<=PUBLIC)||(LA29_0>=SHORT && LA29_0<=STRICTFP)||LA29_0==SYNCHRONIZED||LA29_0==TRANSIENT||(LA29_0>=VOID && LA29_0<=VOLATILE)||LA29_0==IDENT) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: interfaceScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_interfaceScopeDeclarations_in_interfaceBody6650);
            	    interfaceScopeDeclarations82=interfaceScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceScopeDeclarations82.getTree());

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);

            RCURLY83=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_interfaceBody6653); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RCURLY83_tree = (CommonTree)adaptor.create(RCURLY83);
            adaptor.addChild(root_0, RCURLY83_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class classScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classScopeDeclarations"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1112:1: classScopeDeclarations : ( block | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? ( block )? ) | IDENT formalParameterList ( throwsClause )? block -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE EDITABLE_TOKEN[\"void\"] ) ^( NAME IDENT ) formalParameterList ( throwsClause )? block ) ) | type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI -> ( ^( ATTRIBUTE_DECL modifierList type variableDeclaratorId ^( VALUE ( variableInitializer )? ) ) )* ) | typeDeclaration | STATIC block | SEMI );
    public final SSQSA_JavaParser.classScopeDeclarations_return classScopeDeclarations() throws RecognitionException {
        SSQSA_JavaParser.classScopeDeclarations_return retval = new SSQSA_JavaParser.classScopeDeclarations_return();
        retval.start = input.LT(1);
        int classScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT88=null;
        Token SEMI93=null;
        Token VOID94=null;
        Token IDENT95=null;
        Token SEMI99=null;
        Token IDENT100=null;
        Token ASSIGN106=null;
        Token COMMA108=null;
        Token ASSIGN110=null;
        Token SEMI112=null;
        Token STATIC114=null;
        Token SEMI116=null;
        SSQSA_JavaParser.block_return block84 = null;

        SSQSA_JavaParser.modifierList_return modifierList85 = null;

        SSQSA_JavaParser.genericTypeParameterList_return genericTypeParameterList86 = null;

        SSQSA_JavaParser.type_return type87 = null;

        SSQSA_JavaParser.formalParameterList_return formalParameterList89 = null;

        SSQSA_JavaParser.arrayDeclaratorList_return arrayDeclaratorList90 = null;

        SSQSA_JavaParser.throwsClause_return throwsClause91 = null;

        SSQSA_JavaParser.block_return block92 = null;

        SSQSA_JavaParser.formalParameterList_return formalParameterList96 = null;

        SSQSA_JavaParser.throwsClause_return throwsClause97 = null;

        SSQSA_JavaParser.block_return block98 = null;

        SSQSA_JavaParser.formalParameterList_return formalParameterList101 = null;

        SSQSA_JavaParser.throwsClause_return throwsClause102 = null;

        SSQSA_JavaParser.block_return block103 = null;

        SSQSA_JavaParser.type_return type104 = null;

        SSQSA_JavaParser.variableDeclaratorId_return variableDeclaratorId105 = null;

        SSQSA_JavaParser.variableInitializer_return variableInitializer107 = null;

        SSQSA_JavaParser.variableDeclaratorId_return variableDeclaratorId109 = null;

        SSQSA_JavaParser.variableInitializer_return variableInitializer111 = null;

        SSQSA_JavaParser.typeDeclaration_return typeDeclaration113 = null;

        SSQSA_JavaParser.block_return block115 = null;


        CommonTree IDENT88_tree=null;
        CommonTree SEMI93_tree=null;
        CommonTree VOID94_tree=null;
        CommonTree IDENT95_tree=null;
        CommonTree SEMI99_tree=null;
        CommonTree IDENT100_tree=null;
        CommonTree ASSIGN106_tree=null;
        CommonTree COMMA108_tree=null;
        CommonTree ASSIGN110_tree=null;
        CommonTree SEMI112_tree=null;
        CommonTree STATIC114_tree=null;
        CommonTree SEMI116_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1114:5: ( block | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? ( block )? ) | IDENT formalParameterList ( throwsClause )? block -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE EDITABLE_TOKEN[\"void\"] ) ^( NAME IDENT ) formalParameterList ( throwsClause )? block ) ) | type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI -> ( ^( ATTRIBUTE_DECL modifierList type variableDeclaratorId ^( VALUE ( variableInitializer )? ) ) )* ) | typeDeclaration | STATIC block | SEMI )
            int alt42=5;
            alt42 = dfa42.predict(input);
            switch (alt42) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1114:9: block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_block_in_classScopeDeclarations6702);
                    block84=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block84.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1116:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? ( block )? ) | IDENT formalParameterList ( throwsClause )? block -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE EDITABLE_TOKEN[\"void\"] ) ^( NAME IDENT ) formalParameterList ( throwsClause )? block ) ) | type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI -> ( ^( ATTRIBUTE_DECL modifierList type variableDeclaratorId ^( VALUE ( variableInitializer )? ) ) )* )
                    {
                    pushFollow(FOLLOW_modifierList_in_classScopeDeclarations6724);
                    modifierList85=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifierList.add(modifierList85.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1118:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? ( block )? ) | IDENT formalParameterList ( throwsClause )? block -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE EDITABLE_TOKEN[\"void\"] ) ^( NAME IDENT ) formalParameterList ( throwsClause )? block ) ) | type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI -> ( ^( ATTRIBUTE_DECL modifierList type variableDeclaratorId ^( VALUE ( variableInitializer )? ) ) )* )
                    int alt41=2;
                    switch ( input.LA(1) ) {
                    case LESS_THAN:
                    case VOID:
                        {
                        alt41=1;
                        }
                        break;
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT:
                        {
                        int LA41_2 = input.LA(2);

                        if ( (synpred44_SSQSA_Java()) ) {
                            alt41=1;
                        }
                        else if ( (true) ) {
                            alt41=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 41, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case IDENT:
                        {
                        int LA41_3 = input.LA(2);

                        if ( (synpred44_SSQSA_Java()) ) {
                            alt41=1;
                        }
                        else if ( (true) ) {
                            alt41=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 41, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 41, 0, input);

                        throw nvae;
                    }

                    switch (alt41) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1118:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? ( block )? ) | IDENT formalParameterList ( throwsClause )? block -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE EDITABLE_TOKEN[\"void\"] ) ^( NAME IDENT ) formalParameterList ( throwsClause )? block ) )
                            {
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1118:13: ( genericTypeParameterList )?
                            int alt30=2;
                            int LA30_0 = input.LA(1);

                            if ( (LA30_0==LESS_THAN) ) {
                                alt30=1;
                            }
                            switch (alt30) {
                                case 1 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: genericTypeParameterList
                                    {
                                    pushFollow(FOLLOW_genericTypeParameterList_in_classScopeDeclarations6739);
                                    genericTypeParameterList86=genericTypeParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList86.getTree());

                                    }
                                    break;

                            }

                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? ( block )? ) | IDENT formalParameterList ( throwsClause )? block -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE EDITABLE_TOKEN[\"void\"] ) ^( NAME IDENT ) formalParameterList ( throwsClause )? block ) )
                            int alt37=3;
                            switch ( input.LA(1) ) {
                            case BOOLEAN:
                            case BYTE:
                            case CHAR:
                            case DOUBLE:
                            case FLOAT:
                            case INT:
                            case LONG:
                            case SHORT:
                                {
                                alt37=1;
                                }
                                break;
                            case IDENT:
                                {
                                int LA37_2 = input.LA(2);

                                if ( (LA37_2==DOT||LA37_2==LBRACK||LA37_2==LESS_THAN||LA37_2==IDENT) ) {
                                    alt37=1;
                                }
                                else if ( (LA37_2==LPAREN) ) {
                                    alt37=3;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 37, 2, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case VOID:
                                {
                                alt37=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 37, 0, input);

                                throw nvae;
                            }

                            switch (alt37) {
                                case 1 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                                    {
                                    pushFollow(FOLLOW_type_in_classScopeDeclarations6759);
                                    type87=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type87.getTree());
                                    IDENT88=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations6761); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT88);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations6763);
                                    formalParameterList89=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList89.getTree());
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:48: ( arrayDeclaratorList )?
                                    int alt31=2;
                                    int LA31_0 = input.LA(1);

                                    if ( (LA31_0==LBRACK) ) {
                                        alt31=1;
                                    }
                                    switch (alt31) {
                                        case 1 :
                                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: arrayDeclaratorList
                                            {
                                            pushFollow(FOLLOW_arrayDeclaratorList_in_classScopeDeclarations6765);
                                            arrayDeclaratorList90=arrayDeclaratorList();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList90.getTree());

                                            }
                                            break;

                                    }

                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:69: ( throwsClause )?
                                    int alt32=2;
                                    int LA32_0 = input.LA(1);

                                    if ( (LA32_0==THROWS) ) {
                                        alt32=1;
                                    }
                                    switch (alt32) {
                                        case 1 :
                                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations6768);
                                            throwsClause91=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause91.getTree());

                                            }
                                            break;

                                    }

                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:83: ( block | SEMI )
                                    int alt33=2;
                                    int LA33_0 = input.LA(1);

                                    if ( (LA33_0==LCURLY) ) {
                                        alt33=1;
                                    }
                                    else if ( (LA33_0==SEMI) ) {
                                        alt33=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 33, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt33) {
                                        case 1 :
                                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:84: block
                                            {
                                            pushFollow(FOLLOW_block_in_classScopeDeclarations6772);
                                            block92=block();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_block.add(block92.getTree());

                                            }
                                            break;
                                        case 2 :
                                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:92: SEMI
                                            {
                                            SEMI93=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations6776); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI93);


                                            }
                                            break;

                                    }



                                    // AST REWRITE
                                    // elements: throwsClause, IDENT, block, arrayDeclaratorList, formalParameterList, genericTypeParameterList, modifierList, type
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1122:17: -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
                                    {
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1122:21: ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_DECL, "FUNCTION_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1122:50: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_type.nextTree());
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1122:82: ^( NAME IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1122:116: ( arrayDeclaratorList )?
                                        if ( stream_arrayDeclaratorList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                                        }
                                        stream_arrayDeclaratorList.reset();
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1122:137: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1122:151: ( block )?
                                        if ( stream_block.hasNext() ) {
                                            adaptor.addChild(root_1, stream_block.nextTree());

                                        }
                                        stream_block.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1126:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                                    {
                                    VOID94=(Token)match(input,VOID,FOLLOW_VOID_in_classScopeDeclarations6859); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_VOID.add(VOID94);

                                    IDENT95=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations6861); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT95);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations6863);
                                    formalParameterList96=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList96.getTree());
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1126:48: ( throwsClause )?
                                    int alt34=2;
                                    int LA34_0 = input.LA(1);

                                    if ( (LA34_0==THROWS) ) {
                                        alt34=1;
                                    }
                                    switch (alt34) {
                                        case 1 :
                                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations6865);
                                            throwsClause97=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause97.getTree());

                                            }
                                            break;

                                    }

                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1126:62: ( block | SEMI )
                                    int alt35=2;
                                    int LA35_0 = input.LA(1);

                                    if ( (LA35_0==LCURLY) ) {
                                        alt35=1;
                                    }
                                    else if ( (LA35_0==SEMI) ) {
                                        alt35=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 35, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt35) {
                                        case 1 :
                                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1126:63: block
                                            {
                                            pushFollow(FOLLOW_block_in_classScopeDeclarations6869);
                                            block98=block();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_block.add(block98.getTree());

                                            }
                                            break;
                                        case 2 :
                                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1126:71: SEMI
                                            {
                                            SEMI99=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations6873); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI99);


                                            }
                                            break;

                                    }



                                    // AST REWRITE
                                    // elements: IDENT, block, throwsClause, formalParameterList, VOID, genericTypeParameterList, modifierList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1128:17: -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? ( block )? )
                                    {
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1128:20: ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? ( block )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_DECL, "FUNCTION_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1128:49: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1128:76: ^( TYPE VOID )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_2);

                                        adaptor.addChild(root_2, stream_VOID.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1128:89: ^( NAME IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1128:123: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1128:137: ( block )?
                                        if ( stream_block.hasNext() ) {
                                            adaptor.addChild(root_1, stream_block.nextTree());

                                        }
                                        stream_block.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 3 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1132:17: IDENT formalParameterList ( throwsClause )? block
                                    {
                                    IDENT100=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations6956); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT100);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations6958);
                                    formalParameterList101=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList101.getTree());
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1132:43: ( throwsClause )?
                                    int alt36=2;
                                    int LA36_0 = input.LA(1);

                                    if ( (LA36_0==THROWS) ) {
                                        alt36=1;
                                    }
                                    switch (alt36) {
                                        case 1 :
                                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations6960);
                                            throwsClause102=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause102.getTree());

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_block_in_classScopeDeclarations6963);
                                    block103=block();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_block.add(block103.getTree());


                                    // AST REWRITE
                                    // elements: throwsClause, IDENT, block, formalParameterList, modifierList, genericTypeParameterList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1134:17: -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE EDITABLE_TOKEN[\"void\"] ) ^( NAME IDENT ) formalParameterList ( throwsClause )? block )
                                    {
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1134:21: ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE EDITABLE_TOKEN[\"void\"] ) ^( NAME IDENT ) formalParameterList ( throwsClause )? block )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_DECL, "FUNCTION_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1134:50: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1134:76: ^( TYPE EDITABLE_TOKEN[\"void\"] )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_2);

                                        adaptor.addChild(root_2, (CommonTree)adaptor.create(EDITABLE_TOKEN, "void"));

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1134:107: ^( NAME IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1134:141: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();
                                        adaptor.addChild(root_1, stream_block.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1142:13: type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI
                            {
                            pushFollow(FOLLOW_type_in_classScopeDeclarations7070);
                            type104=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type104.getTree());
                            pushFollow(FOLLOW_variableDeclaratorId_in_classScopeDeclarations7072);
                            variableDeclaratorId105=variableDeclaratorId();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId105.getTree());
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1142:39: ( ASSIGN variableInitializer )?
                            int alt38=2;
                            int LA38_0 = input.LA(1);

                            if ( (LA38_0==ASSIGN) ) {
                                alt38=1;
                            }
                            switch (alt38) {
                                case 1 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1142:40: ASSIGN variableInitializer
                                    {
                                    ASSIGN106=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_classScopeDeclarations7075); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN106);

                                    pushFollow(FOLLOW_variableInitializer_in_classScopeDeclarations7077);
                                    variableInitializer107=variableInitializer();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer107.getTree());

                                    }
                                    break;

                            }

                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1142:69: ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )*
                            loop40:
                            do {
                                int alt40=2;
                                int LA40_0 = input.LA(1);

                                if ( (LA40_0==COMMA) ) {
                                    alt40=1;
                                }


                                switch (alt40) {
                            	case 1 :
                            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1142:70: COMMA variableDeclaratorId ( ASSIGN variableInitializer )?
                            	    {
                            	    COMMA108=(Token)match(input,COMMA,FOLLOW_COMMA_in_classScopeDeclarations7082); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA108);

                            	    pushFollow(FOLLOW_variableDeclaratorId_in_classScopeDeclarations7084);
                            	    variableDeclaratorId109=variableDeclaratorId();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId109.getTree());
                            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1142:97: ( ASSIGN variableInitializer )?
                            	    int alt39=2;
                            	    int LA39_0 = input.LA(1);

                            	    if ( (LA39_0==ASSIGN) ) {
                            	        alt39=1;
                            	    }
                            	    switch (alt39) {
                            	        case 1 :
                            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1142:98: ASSIGN variableInitializer
                            	            {
                            	            ASSIGN110=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_classScopeDeclarations7087); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN110);

                            	            pushFollow(FOLLOW_variableInitializer_in_classScopeDeclarations7089);
                            	            variableInitializer111=variableInitializer();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer111.getTree());

                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop40;
                                }
                            } while (true);

                            SEMI112=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations7096); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI112);



                            // AST REWRITE
                            // elements: variableDeclaratorId, modifierList, variableInitializer, type
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1144:13: -> ( ^( ATTRIBUTE_DECL modifierList type variableDeclaratorId ^( VALUE ( variableInitializer )? ) ) )*
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1144:16: ( ^( ATTRIBUTE_DECL modifierList type variableDeclaratorId ^( VALUE ( variableInitializer )? ) ) )*
                                while ( stream_variableDeclaratorId.hasNext()||stream_modifierList.hasNext()||stream_type.hasNext() ) {
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1144:17: ^( ATTRIBUTE_DECL modifierList type variableDeclaratorId ^( VALUE ( variableInitializer )? ) )
                                    {
                                    CommonTree root_1 = (CommonTree)adaptor.nil();
                                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_DECL, "ATTRIBUTE_DECL"), root_1);

                                    adaptor.addChild(root_1, stream_modifierList.nextTree());
                                    adaptor.addChild(root_1, stream_type.nextTree());
                                    adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1144:73: ^( VALUE ( variableInitializer )? )
                                    {
                                    CommonTree root_2 = (CommonTree)adaptor.nil();
                                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VALUE, "VALUE"), root_2);

                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1144:81: ( variableInitializer )?
                                    if ( stream_variableInitializer.hasNext() ) {
                                        adaptor.addChild(root_2, stream_variableInitializer.nextTree());

                                    }
                                    stream_variableInitializer.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                    adaptor.addChild(root_0, root_1);
                                    }

                                }
                                stream_variableDeclaratorId.reset();
                                stream_modifierList.reset();
                                stream_type.reset();

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1150:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_classScopeDeclarations7155);
                    typeDeclaration113=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration113.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1152:9: STATIC block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STATIC114=(Token)match(input,STATIC,FOLLOW_STATIC_in_classScopeDeclarations7166); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STATIC114_tree = (CommonTree)adaptor.create(STATIC114);
                    adaptor.addChild(root_0, STATIC114_tree);
                    }
                    pushFollow(FOLLOW_block_in_classScopeDeclarations7168);
                    block115=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block115.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1154:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI116=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations7183); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI116_tree = (CommonTree)adaptor.create(SEMI116);
                    adaptor.addChild(root_0, SEMI116_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, classScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classScopeDeclarations"

    public static class interfaceScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceScopeDeclarations"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1178:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? ) ) | type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI -> ( ^( ATTRIBUTE_DECL modifierList type variableDeclaratorId ^( VALUE ( variableInitializer )? ) ) )* ) | typeDeclaration | SEMI );
    public final SSQSA_JavaParser.interfaceScopeDeclarations_return interfaceScopeDeclarations() throws RecognitionException {
        SSQSA_JavaParser.interfaceScopeDeclarations_return retval = new SSQSA_JavaParser.interfaceScopeDeclarations_return();
        retval.start = input.LT(1);
        int interfaceScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT120=null;
        Token SEMI124=null;
        Token VOID125=null;
        Token IDENT126=null;
        Token SEMI129=null;
        Token ASSIGN132=null;
        Token COMMA134=null;
        Token ASSIGN136=null;
        Token SEMI138=null;
        Token SEMI140=null;
        SSQSA_JavaParser.modifierList_return modifierList117 = null;

        SSQSA_JavaParser.genericTypeParameterList_return genericTypeParameterList118 = null;

        SSQSA_JavaParser.type_return type119 = null;

        SSQSA_JavaParser.formalParameterList_return formalParameterList121 = null;

        SSQSA_JavaParser.arrayDeclaratorList_return arrayDeclaratorList122 = null;

        SSQSA_JavaParser.throwsClause_return throwsClause123 = null;

        SSQSA_JavaParser.formalParameterList_return formalParameterList127 = null;

        SSQSA_JavaParser.throwsClause_return throwsClause128 = null;

        SSQSA_JavaParser.type_return type130 = null;

        SSQSA_JavaParser.variableDeclaratorId_return variableDeclaratorId131 = null;

        SSQSA_JavaParser.variableInitializer_return variableInitializer133 = null;

        SSQSA_JavaParser.variableDeclaratorId_return variableDeclaratorId135 = null;

        SSQSA_JavaParser.variableInitializer_return variableInitializer137 = null;

        SSQSA_JavaParser.typeDeclaration_return typeDeclaration139 = null;


        CommonTree IDENT120_tree=null;
        CommonTree SEMI124_tree=null;
        CommonTree VOID125_tree=null;
        CommonTree IDENT126_tree=null;
        CommonTree SEMI129_tree=null;
        CommonTree ASSIGN132_tree=null;
        CommonTree COMMA134_tree=null;
        CommonTree ASSIGN136_tree=null;
        CommonTree SEMI138_tree=null;
        CommonTree SEMI140_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1180:5: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? ) ) | type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI -> ( ^( ATTRIBUTE_DECL modifierList type variableDeclaratorId ^( VALUE ( variableInitializer )? ) ) )* ) | typeDeclaration | SEMI )
            int alt52=3;
            alt52 = dfa52.predict(input);
            switch (alt52) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1180:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? ) ) | type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI -> ( ^( ATTRIBUTE_DECL modifierList type variableDeclaratorId ^( VALUE ( variableInitializer )? ) ) )* )
                    {
                    pushFollow(FOLLOW_modifierList_in_interfaceScopeDeclarations7236);
                    modifierList117=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifierList.add(modifierList117.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1182:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? ) ) | type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI -> ( ^( ATTRIBUTE_DECL modifierList type variableDeclaratorId ^( VALUE ( variableInitializer )? ) ) )* )
                    int alt51=2;
                    switch ( input.LA(1) ) {
                    case LESS_THAN:
                    case VOID:
                        {
                        alt51=1;
                        }
                        break;
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT:
                        {
                        int LA51_2 = input.LA(2);

                        if ( (synpred56_SSQSA_Java()) ) {
                            alt51=1;
                        }
                        else if ( (true) ) {
                            alt51=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 51, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case IDENT:
                        {
                        int LA51_3 = input.LA(2);

                        if ( (synpred56_SSQSA_Java()) ) {
                            alt51=1;
                        }
                        else if ( (true) ) {
                            alt51=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 51, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 51, 0, input);

                        throw nvae;
                    }

                    switch (alt51) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1182:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? ) )
                            {
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1182:13: ( genericTypeParameterList )?
                            int alt43=2;
                            int LA43_0 = input.LA(1);

                            if ( (LA43_0==LESS_THAN) ) {
                                alt43=1;
                            }
                            switch (alt43) {
                                case 1 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: genericTypeParameterList
                                    {
                                    pushFollow(FOLLOW_genericTypeParameterList_in_interfaceScopeDeclarations7251);
                                    genericTypeParameterList118=genericTypeParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList118.getTree());

                                    }
                                    break;

                            }

                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1184:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? ) )
                            int alt47=2;
                            int LA47_0 = input.LA(1);

                            if ( (LA47_0==BOOLEAN||LA47_0==BYTE||LA47_0==CHAR||LA47_0==DOUBLE||LA47_0==FLOAT||(LA47_0>=INT && LA47_0<=LONG)||LA47_0==SHORT||LA47_0==IDENT) ) {
                                alt47=1;
                            }
                            else if ( (LA47_0==VOID) ) {
                                alt47=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 47, 0, input);

                                throw nvae;
                            }
                            switch (alt47) {
                                case 1 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1184:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                                    {
                                    pushFollow(FOLLOW_type_in_interfaceScopeDeclarations7271);
                                    type119=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type119.getTree());
                                    IDENT120=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceScopeDeclarations7273); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT120);

                                    pushFollow(FOLLOW_formalParameterList_in_interfaceScopeDeclarations7275);
                                    formalParameterList121=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList121.getTree());
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1184:48: ( arrayDeclaratorList )?
                                    int alt44=2;
                                    int LA44_0 = input.LA(1);

                                    if ( (LA44_0==LBRACK) ) {
                                        alt44=1;
                                    }
                                    switch (alt44) {
                                        case 1 :
                                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: arrayDeclaratorList
                                            {
                                            pushFollow(FOLLOW_arrayDeclaratorList_in_interfaceScopeDeclarations7277);
                                            arrayDeclaratorList122=arrayDeclaratorList();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList122.getTree());

                                            }
                                            break;

                                    }

                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1184:69: ( throwsClause )?
                                    int alt45=2;
                                    int LA45_0 = input.LA(1);

                                    if ( (LA45_0==THROWS) ) {
                                        alt45=1;
                                    }
                                    switch (alt45) {
                                        case 1 :
                                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_interfaceScopeDeclarations7280);
                                            throwsClause123=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause123.getTree());

                                            }
                                            break;

                                    }

                                    SEMI124=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations7283); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI124);



                                    // AST REWRITE
                                    // elements: genericTypeParameterList, throwsClause, formalParameterList, IDENT, type, arrayDeclaratorList, modifierList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1186:18: -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
                                    {
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1186:22: ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_DECL, "FUNCTION_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1186:51: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_type.nextTree());
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1186:82: ^( NAME IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1186:117: ( arrayDeclaratorList )?
                                        if ( stream_arrayDeclaratorList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                                        }
                                        stream_arrayDeclaratorList.reset();
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1186:138: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1188:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                                    {
                                    VOID125=(Token)match(input,VOID,FOLLOW_VOID_in_interfaceScopeDeclarations7349); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_VOID.add(VOID125);

                                    IDENT126=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceScopeDeclarations7351); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT126);

                                    pushFollow(FOLLOW_formalParameterList_in_interfaceScopeDeclarations7353);
                                    formalParameterList127=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList127.getTree());
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1188:48: ( throwsClause )?
                                    int alt46=2;
                                    int LA46_0 = input.LA(1);

                                    if ( (LA46_0==THROWS) ) {
                                        alt46=1;
                                    }
                                    switch (alt46) {
                                        case 1 :
                                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_interfaceScopeDeclarations7355);
                                            throwsClause128=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause128.getTree());

                                            }
                                            break;

                                    }

                                    SEMI129=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations7358); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI129);



                                    // AST REWRITE
                                    // elements: modifierList, IDENT, formalParameterList, throwsClause, genericTypeParameterList, VOID
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1190:17: -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? )
                                    {
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1190:20: ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_DECL, "FUNCTION_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1190:49: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1190:75: ^( TYPE VOID )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_2);

                                        adaptor.addChild(root_2, stream_VOID.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1190:88: ^( NAME IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1190:122: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1198:13: type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI
                            {
                            pushFollow(FOLLOW_type_in_interfaceScopeDeclarations7462);
                            type130=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type130.getTree());
                            pushFollow(FOLLOW_variableDeclaratorId_in_interfaceScopeDeclarations7464);
                            variableDeclaratorId131=variableDeclaratorId();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId131.getTree());
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1198:39: ( ASSIGN variableInitializer )?
                            int alt48=2;
                            int LA48_0 = input.LA(1);

                            if ( (LA48_0==ASSIGN) ) {
                                alt48=1;
                            }
                            switch (alt48) {
                                case 1 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1198:40: ASSIGN variableInitializer
                                    {
                                    ASSIGN132=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_interfaceScopeDeclarations7467); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN132);

                                    pushFollow(FOLLOW_variableInitializer_in_interfaceScopeDeclarations7469);
                                    variableInitializer133=variableInitializer();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer133.getTree());

                                    }
                                    break;

                            }

                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1198:69: ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )*
                            loop50:
                            do {
                                int alt50=2;
                                int LA50_0 = input.LA(1);

                                if ( (LA50_0==COMMA) ) {
                                    alt50=1;
                                }


                                switch (alt50) {
                            	case 1 :
                            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1198:70: COMMA variableDeclaratorId ( ASSIGN variableInitializer )?
                            	    {
                            	    COMMA134=(Token)match(input,COMMA,FOLLOW_COMMA_in_interfaceScopeDeclarations7474); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA134);

                            	    pushFollow(FOLLOW_variableDeclaratorId_in_interfaceScopeDeclarations7476);
                            	    variableDeclaratorId135=variableDeclaratorId();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId135.getTree());
                            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1198:97: ( ASSIGN variableInitializer )?
                            	    int alt49=2;
                            	    int LA49_0 = input.LA(1);

                            	    if ( (LA49_0==ASSIGN) ) {
                            	        alt49=1;
                            	    }
                            	    switch (alt49) {
                            	        case 1 :
                            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1198:98: ASSIGN variableInitializer
                            	            {
                            	            ASSIGN136=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_interfaceScopeDeclarations7479); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN136);

                            	            pushFollow(FOLLOW_variableInitializer_in_interfaceScopeDeclarations7481);
                            	            variableInitializer137=variableInitializer();

                            	            state._fsp--;
                            	            if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer137.getTree());

                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop50;
                                }
                            } while (true);

                            SEMI138=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations7488); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI138);



                            // AST REWRITE
                            // elements: type, modifierList, variableDeclaratorId, variableInitializer
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1200:13: -> ( ^( ATTRIBUTE_DECL modifierList type variableDeclaratorId ^( VALUE ( variableInitializer )? ) ) )*
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1200:16: ( ^( ATTRIBUTE_DECL modifierList type variableDeclaratorId ^( VALUE ( variableInitializer )? ) ) )*
                                while ( stream_type.hasNext()||stream_modifierList.hasNext()||stream_variableDeclaratorId.hasNext() ) {
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1200:17: ^( ATTRIBUTE_DECL modifierList type variableDeclaratorId ^( VALUE ( variableInitializer )? ) )
                                    {
                                    CommonTree root_1 = (CommonTree)adaptor.nil();
                                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_DECL, "ATTRIBUTE_DECL"), root_1);

                                    adaptor.addChild(root_1, stream_modifierList.nextTree());
                                    adaptor.addChild(root_1, stream_type.nextTree());
                                    adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1200:73: ^( VALUE ( variableInitializer )? )
                                    {
                                    CommonTree root_2 = (CommonTree)adaptor.nil();
                                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VALUE, "VALUE"), root_2);

                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1200:81: ( variableInitializer )?
                                    if ( stream_variableInitializer.hasNext() ) {
                                        adaptor.addChild(root_2, stream_variableInitializer.nextTree());

                                    }
                                    stream_variableInitializer.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                    adaptor.addChild(root_0, root_1);
                                    }

                                }
                                stream_type.reset();
                                stream_modifierList.reset();
                                stream_variableDeclaratorId.reset();

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1204:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_interfaceScopeDeclarations7545);
                    typeDeclaration139=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration139.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1206:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI140=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations7556); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI140_tree = (CommonTree)adaptor.create(SEMI140);
                    adaptor.addChild(root_0, SEMI140_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, interfaceScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceScopeDeclarations"

    public static class classFieldDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classFieldDeclaratorList"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1216:1: classFieldDeclaratorList : classFieldDeclarator ( COMMA classFieldDeclarator )* ;
    public final SSQSA_JavaParser.classFieldDeclaratorList_return classFieldDeclaratorList() throws RecognitionException {
        SSQSA_JavaParser.classFieldDeclaratorList_return retval = new SSQSA_JavaParser.classFieldDeclaratorList_return();
        retval.start = input.LT(1);
        int classFieldDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA142=null;
        SSQSA_JavaParser.classFieldDeclarator_return classFieldDeclarator141 = null;

        SSQSA_JavaParser.classFieldDeclarator_return classFieldDeclarator143 = null;


        CommonTree COMMA142_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1218:5: ( classFieldDeclarator ( COMMA classFieldDeclarator )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1218:9: classFieldDeclarator ( COMMA classFieldDeclarator )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList7583);
            classFieldDeclarator141=classFieldDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classFieldDeclarator141.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1218:30: ( COMMA classFieldDeclarator )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==COMMA) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1218:31: COMMA classFieldDeclarator
            	    {
            	    COMMA142=(Token)match(input,COMMA,FOLLOW_COMMA_in_classFieldDeclaratorList7586); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA142_tree = (CommonTree)adaptor.create(COMMA142);
            	    adaptor.addChild(root_0, COMMA142_tree);
            	    }
            	    pushFollow(FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList7588);
            	    classFieldDeclarator143=classFieldDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classFieldDeclarator143.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, classFieldDeclaratorList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classFieldDeclaratorList"

    public static class classFieldDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classFieldDeclarator"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1224:1: classFieldDeclarator : variableDeclaratorId ( ASSIGN variableInitializer )? -> variableDeclaratorId ^( VALUE ( variableInitializer )? ) ;
    public final SSQSA_JavaParser.classFieldDeclarator_return classFieldDeclarator() throws RecognitionException {
        SSQSA_JavaParser.classFieldDeclarator_return retval = new SSQSA_JavaParser.classFieldDeclarator_return();
        retval.start = input.LT(1);
        int classFieldDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN145=null;
        SSQSA_JavaParser.variableDeclaratorId_return variableDeclaratorId144 = null;

        SSQSA_JavaParser.variableInitializer_return variableInitializer146 = null;


        CommonTree ASSIGN145_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1226:5: ( variableDeclaratorId ( ASSIGN variableInitializer )? -> variableDeclaratorId ^( VALUE ( variableInitializer )? ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1226:9: variableDeclaratorId ( ASSIGN variableInitializer )?
            {
            pushFollow(FOLLOW_variableDeclaratorId_in_classFieldDeclarator7618);
            variableDeclaratorId144=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId144.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1226:30: ( ASSIGN variableInitializer )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==ASSIGN) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1226:31: ASSIGN variableInitializer
                    {
                    ASSIGN145=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_classFieldDeclarator7621); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN145);

                    pushFollow(FOLLOW_variableInitializer_in_classFieldDeclarator7623);
                    variableInitializer146=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer146.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: variableInitializer, variableDeclaratorId
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1228:9: -> variableDeclaratorId ^( VALUE ( variableInitializer )? )
            {
                adaptor.addChild(root_0, stream_variableDeclaratorId.nextTree());
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1228:34: ^( VALUE ( variableInitializer )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VALUE, "VALUE"), root_1);

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1228:42: ( variableInitializer )?
                if ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, classFieldDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classFieldDeclarator"

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorId"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1262:1: variableDeclaratorId : IDENT ( arrayDeclaratorList )? -> ^( NAME IDENT ( arrayDeclaratorList )? ) ;
    public final SSQSA_JavaParser.variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
        SSQSA_JavaParser.variableDeclaratorId_return retval = new SSQSA_JavaParser.variableDeclaratorId_return();
        retval.start = input.LT(1);
        int variableDeclaratorId_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT147=null;
        SSQSA_JavaParser.arrayDeclaratorList_return arrayDeclaratorList148 = null;


        CommonTree IDENT147_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1264:5: ( IDENT ( arrayDeclaratorList )? -> ^( NAME IDENT ( arrayDeclaratorList )? ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1264:9: IDENT ( arrayDeclaratorList )?
            {
            IDENT147=(Token)match(input,IDENT,FOLLOW_IDENT_in_variableDeclaratorId7703); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT147);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1264:15: ( arrayDeclaratorList )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==LBRACK) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_variableDeclaratorId7705);
                    arrayDeclaratorList148=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList148.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arrayDeclaratorList, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1266:5: -> ^( NAME IDENT ( arrayDeclaratorList )? )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1266:8: ^( NAME IDENT ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_IDENT.nextNode());
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1266:21: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, variableDeclaratorId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorId"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1272:1: variableInitializer : ( arrayInitializer | expression );
    public final SSQSA_JavaParser.variableInitializer_return variableInitializer() throws RecognitionException {
        SSQSA_JavaParser.variableInitializer_return retval = new SSQSA_JavaParser.variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.arrayInitializer_return arrayInitializer149 = null;

        SSQSA_JavaParser.expression_return expression150 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1274:5: ( arrayInitializer | expression )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==LCURLY) ) {
                alt56=1;
            }
            else if ( (LA56_0==DEC||LA56_0==INC||LA56_0==LESS_THAN||LA56_0==LOGICAL_NOT||(LA56_0>=LPAREN && LA56_0<=MINUS)||LA56_0==NOT||LA56_0==PLUS||LA56_0==BOOLEAN||LA56_0==BYTE||LA56_0==CHAR||LA56_0==DOUBLE||LA56_0==FALSE||LA56_0==FLOAT||(LA56_0>=INT && LA56_0<=LONG)||(LA56_0>=NEW && LA56_0<=NULL)||LA56_0==SHORT||LA56_0==SUPER||LA56_0==THIS||LA56_0==TRUE||LA56_0==VOID||(LA56_0>=IDENT && LA56_0<=STRING_LITERAL)) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1274:9: arrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer7745);
                    arrayInitializer149=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer149.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1276:9: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer7756);
                    expression150=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression150.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayDeclarator"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1286:1: arrayDeclarator : LBRACK RBRACK ;
    public final SSQSA_JavaParser.arrayDeclarator_return arrayDeclarator() throws RecognitionException {
        SSQSA_JavaParser.arrayDeclarator_return retval = new SSQSA_JavaParser.arrayDeclarator_return();
        retval.start = input.LT(1);
        int arrayDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LBRACK151=null;
        Token RBRACK152=null;

        CommonTree LBRACK151_tree=null;
        CommonTree RBRACK152_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1288:5: ( LBRACK RBRACK )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1288:9: LBRACK RBRACK
            {
            root_0 = (CommonTree)adaptor.nil();

            LBRACK151=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_arrayDeclarator7783); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACK151_tree = (CommonTree)adaptor.create(LBRACK151);
            adaptor.addChild(root_0, LBRACK151_tree);
            }
            RBRACK152=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_arrayDeclarator7785); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACK152_tree = (CommonTree)adaptor.create(RBRACK152);
            adaptor.addChild(root_0, RBRACK152_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, arrayDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayDeclarator"

    public static class arrayDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayDeclaratorList"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1298:1: arrayDeclaratorList : ( arrayDeclarator )+ ;
    public final SSQSA_JavaParser.arrayDeclaratorList_return arrayDeclaratorList() throws RecognitionException {
        SSQSA_JavaParser.arrayDeclaratorList_return retval = new SSQSA_JavaParser.arrayDeclaratorList_return();
        retval.start = input.LT(1);
        int arrayDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.arrayDeclarator_return arrayDeclarator153 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1300:5: ( ( arrayDeclarator )+ )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1300:9: ( arrayDeclarator )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1300:9: ( arrayDeclarator )+
            int cnt57=0;
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==LBRACK) ) {
                    int LA57_2 = input.LA(2);

                    if ( (synpred66_SSQSA_Java()) ) {
                        alt57=1;
                    }


                }


                switch (alt57) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: arrayDeclarator
            	    {
            	    pushFollow(FOLLOW_arrayDeclarator_in_arrayDeclaratorList7812);
            	    arrayDeclarator153=arrayDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclarator153.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt57 >= 1 ) break loop57;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(57, input);
                        throw eee;
                }
                cnt57++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, arrayDeclaratorList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayDeclaratorList"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1311:1: arrayInitializer : LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY ;
    public final SSQSA_JavaParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
        SSQSA_JavaParser.arrayInitializer_return retval = new SSQSA_JavaParser.arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY154=null;
        Token COMMA156=null;
        Token COMMA158=null;
        Token RCURLY159=null;
        SSQSA_JavaParser.variableInitializer_return variableInitializer155 = null;

        SSQSA_JavaParser.variableInitializer_return variableInitializer157 = null;


        CommonTree LCURLY154_tree=null;
        CommonTree COMMA156_tree=null;
        CommonTree COMMA158_tree=null;
        CommonTree RCURLY159_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1313:5: ( LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1313:9: LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY
            {
            root_0 = (CommonTree)adaptor.nil();

            LCURLY154=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayInitializer7847); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LCURLY154_tree = (CommonTree)adaptor.create(LCURLY154);
            adaptor.addChild(root_0, LCURLY154_tree);
            }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1313:16: ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==DEC||LA60_0==INC||LA60_0==LCURLY||LA60_0==LESS_THAN||LA60_0==LOGICAL_NOT||(LA60_0>=LPAREN && LA60_0<=MINUS)||LA60_0==NOT||LA60_0==PLUS||LA60_0==BOOLEAN||LA60_0==BYTE||LA60_0==CHAR||LA60_0==DOUBLE||LA60_0==FALSE||LA60_0==FLOAT||(LA60_0>=INT && LA60_0<=LONG)||(LA60_0>=NEW && LA60_0<=NULL)||LA60_0==SHORT||LA60_0==SUPER||LA60_0==THIS||LA60_0==TRUE||LA60_0==VOID||(LA60_0>=IDENT && LA60_0<=STRING_LITERAL)) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1313:17: variableInitializer ( COMMA variableInitializer )* ( COMMA )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer7850);
                    variableInitializer155=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer155.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1313:37: ( COMMA variableInitializer )*
                    loop58:
                    do {
                        int alt58=2;
                        int LA58_0 = input.LA(1);

                        if ( (LA58_0==COMMA) ) {
                            int LA58_1 = input.LA(2);

                            if ( (LA58_1==DEC||LA58_1==INC||LA58_1==LCURLY||LA58_1==LESS_THAN||LA58_1==LOGICAL_NOT||(LA58_1>=LPAREN && LA58_1<=MINUS)||LA58_1==NOT||LA58_1==PLUS||LA58_1==BOOLEAN||LA58_1==BYTE||LA58_1==CHAR||LA58_1==DOUBLE||LA58_1==FALSE||LA58_1==FLOAT||(LA58_1>=INT && LA58_1<=LONG)||(LA58_1>=NEW && LA58_1<=NULL)||LA58_1==SHORT||LA58_1==SUPER||LA58_1==THIS||LA58_1==TRUE||LA58_1==VOID||(LA58_1>=IDENT && LA58_1<=STRING_LITERAL)) ) {
                                alt58=1;
                            }


                        }


                        switch (alt58) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1313:38: COMMA variableInitializer
                    	    {
                    	    COMMA156=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer7853); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA156_tree = (CommonTree)adaptor.create(COMMA156);
                    	    adaptor.addChild(root_0, COMMA156_tree);
                    	    }
                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer7855);
                    	    variableInitializer157=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer157.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop58;
                        }
                    } while (true);

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1313:66: ( COMMA )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==COMMA) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: COMMA
                            {
                            COMMA158=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer7859); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA158_tree = (CommonTree)adaptor.create(COMMA158);
                            adaptor.addChild(root_0, COMMA158_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RCURLY159=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayInitializer7864); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RCURLY159_tree = (CommonTree)adaptor.create(RCURLY159);
            adaptor.addChild(root_0, RCURLY159_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class throwsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "throwsClause"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1319:1: throwsClause : THROWS throwIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS\"] throwIdentList ) ;
    public final SSQSA_JavaParser.throwsClause_return throwsClause() throws RecognitionException {
        SSQSA_JavaParser.throwsClause_return retval = new SSQSA_JavaParser.throwsClause_return();
        retval.start = input.LT(1);
        int throwsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token THROWS160=null;
        SSQSA_JavaParser.throwIdentList_return throwIdentList161 = null;


        CommonTree THROWS160_tree=null;
        RewriteRuleTokenStream stream_THROWS=new RewriteRuleTokenStream(adaptor,"token THROWS");
        RewriteRuleSubtreeStream stream_throwIdentList=new RewriteRuleSubtreeStream(adaptor,"rule throwIdentList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1321:5: ( THROWS throwIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS\"] throwIdentList ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1321:9: THROWS throwIdentList
            {
            THROWS160=(Token)match(input,THROWS,FOLLOW_THROWS_in_throwsClause7890); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THROWS.add(THROWS160);

            pushFollow(FOLLOW_throwIdentList_in_throwsClause7892);
            throwIdentList161=throwIdentList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_throwIdentList.add(throwIdentList161.getTree());


            // AST REWRITE
            // elements: throwIdentList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1323:9: -> ^( THROWS_CLAUSE[$THROWS, \"THROWS\"] throwIdentList )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1323:13: ^( THROWS_CLAUSE[$THROWS, \"THROWS\"] throwIdentList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THROWS_CLAUSE, THROWS160, "THROWS"), root_1);

                adaptor.addChild(root_1, stream_throwIdentList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, throwsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "throwsClause"

    public static class throwIdentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "throwIdentList"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1331:1: throwIdentList : qualifiedIdentifier ( COMMA qualifiedIdentifier )* -> ( ^( TYPE qualifiedIdentifier ) )* ;
    public final SSQSA_JavaParser.throwIdentList_return throwIdentList() throws RecognitionException {
        SSQSA_JavaParser.throwIdentList_return retval = new SSQSA_JavaParser.throwIdentList_return();
        retval.start = input.LT(1);
        int throwIdentList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA163=null;
        SSQSA_JavaParser.qualifiedIdentifier_return qualifiedIdentifier162 = null;

        SSQSA_JavaParser.qualifiedIdentifier_return qualifiedIdentifier164 = null;


        CommonTree COMMA163_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_qualifiedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1333:5: ( qualifiedIdentifier ( COMMA qualifiedIdentifier )* -> ( ^( TYPE qualifiedIdentifier ) )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1333:9: qualifiedIdentifier ( COMMA qualifiedIdentifier )*
            {
            pushFollow(FOLLOW_qualifiedIdentifier_in_throwIdentList7936);
            qualifiedIdentifier162=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedIdentifier.add(qualifiedIdentifier162.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1333:29: ( COMMA qualifiedIdentifier )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==COMMA) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1333:30: COMMA qualifiedIdentifier
            	    {
            	    COMMA163=(Token)match(input,COMMA,FOLLOW_COMMA_in_throwIdentList7939); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA163);

            	    pushFollow(FOLLOW_qualifiedIdentifier_in_throwIdentList7941);
            	    qualifiedIdentifier164=qualifiedIdentifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_qualifiedIdentifier.add(qualifiedIdentifier164.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);



            // AST REWRITE
            // elements: qualifiedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1335:9: -> ( ^( TYPE qualifiedIdentifier ) )*
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1335:12: ( ^( TYPE qualifiedIdentifier ) )*
                while ( stream_qualifiedIdentifier.hasNext() ) {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1335:12: ^( TYPE qualifiedIdentifier )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                    adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_qualifiedIdentifier.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, throwIdentList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "throwIdentList"

    public static class modifierList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifierList"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1355:1: modifierList : ( annotation )? ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) ;
    public final SSQSA_JavaParser.modifierList_return modifierList() throws RecognitionException {
        SSQSA_JavaParser.modifierList_return retval = new SSQSA_JavaParser.modifierList_return();
        retval.start = input.LT(1);
        int modifierList_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.annotation_return annotation165 = null;

        SSQSA_JavaParser.modifier_return modifier166 = null;


        RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1357:5: ( ( annotation )? ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1357:9: ( annotation )? ( modifier )*
            {
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1357:9: ( annotation )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==AT) ) {
                int LA62_1 = input.LA(2);

                if ( (LA62_1==IDENT) ) {
                    int LA62_3 = input.LA(3);

                    if ( (synpred71_SSQSA_Java()) ) {
                        alt62=1;
                    }
                }
            }
            switch (alt62) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: annotation
                    {
                    pushFollow(FOLLOW_annotation_in_modifierList7997);
                    annotation165=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotation.add(annotation165.getTree());

                    }
                    break;

            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1357:21: ( modifier )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==AT) ) {
                    int LA63_2 = input.LA(2);

                    if ( (LA63_2==IDENT) ) {
                        alt63=1;
                    }


                }
                else if ( (LA63_0==ABSTRACT||LA63_0==FINAL||LA63_0==NATIVE||(LA63_0>=PRIVATE && LA63_0<=PUBLIC)||(LA63_0>=STATIC && LA63_0<=STRICTFP)||LA63_0==SYNCHRONIZED||LA63_0==TRANSIENT||LA63_0==VOLATILE) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1357:22: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_modifierList8001);
            	    modifier166=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_modifier.add(modifier166.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);



            // AST REWRITE
            // elements: modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1359:5: -> ^( MODIFIER_LIST ( modifier )* )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1359:8: ^( MODIFIER_LIST ( modifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MODIFIER_LIST, "MODIFIER_LIST"), root_1);

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1359:24: ( modifier )*
                while ( stream_modifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_modifier.nextTree());

                }
                stream_modifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, modifierList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifierList"

    public static class modifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifier"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1369:1: modifier : ( STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | PUBLIC | PROTECTED | PRIVATE | localModifier );
    public final SSQSA_JavaParser.modifier_return modifier() throws RecognitionException {
        SSQSA_JavaParser.modifier_return retval = new SSQSA_JavaParser.modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token STATIC167=null;
        Token ABSTRACT168=null;
        Token NATIVE169=null;
        Token SYNCHRONIZED170=null;
        Token TRANSIENT171=null;
        Token VOLATILE172=null;
        Token STRICTFP173=null;
        Token PUBLIC174=null;
        Token PROTECTED175=null;
        Token PRIVATE176=null;
        SSQSA_JavaParser.localModifier_return localModifier177 = null;


        CommonTree STATIC167_tree=null;
        CommonTree ABSTRACT168_tree=null;
        CommonTree NATIVE169_tree=null;
        CommonTree SYNCHRONIZED170_tree=null;
        CommonTree TRANSIENT171_tree=null;
        CommonTree VOLATILE172_tree=null;
        CommonTree STRICTFP173_tree=null;
        CommonTree PUBLIC174_tree=null;
        CommonTree PROTECTED175_tree=null;
        CommonTree PRIVATE176_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1371:5: ( STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | PUBLIC | PROTECTED | PRIVATE | localModifier )
            int alt64=11;
            switch ( input.LA(1) ) {
            case STATIC:
                {
                alt64=1;
                }
                break;
            case ABSTRACT:
                {
                alt64=2;
                }
                break;
            case NATIVE:
                {
                alt64=3;
                }
                break;
            case SYNCHRONIZED:
                {
                alt64=4;
                }
                break;
            case TRANSIENT:
                {
                alt64=5;
                }
                break;
            case VOLATILE:
                {
                alt64=6;
                }
                break;
            case STRICTFP:
                {
                alt64=7;
                }
                break;
            case PUBLIC:
                {
                alt64=8;
                }
                break;
            case PROTECTED:
                {
                alt64=9;
                }
                break;
            case PRIVATE:
                {
                alt64=10;
                }
                break;
            case AT:
            case FINAL:
                {
                alt64=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }

            switch (alt64) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1371:9: STATIC
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STATIC167=(Token)match(input,STATIC,FOLLOW_STATIC_in_modifier8051); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STATIC167_tree = (CommonTree)adaptor.create(STATIC167);
                    adaptor.addChild(root_0, STATIC167_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1373:7: ABSTRACT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ABSTRACT168=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_modifier8060); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ABSTRACT168_tree = (CommonTree)adaptor.create(ABSTRACT168);
                    adaptor.addChild(root_0, ABSTRACT168_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1375:9: NATIVE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NATIVE169=(Token)match(input,NATIVE,FOLLOW_NATIVE_in_modifier8071); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NATIVE169_tree = (CommonTree)adaptor.create(NATIVE169);
                    adaptor.addChild(root_0, NATIVE169_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1377:9: SYNCHRONIZED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SYNCHRONIZED170=(Token)match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_modifier8082); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SYNCHRONIZED170_tree = (CommonTree)adaptor.create(SYNCHRONIZED170);
                    adaptor.addChild(root_0, SYNCHRONIZED170_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1379:9: TRANSIENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TRANSIENT171=(Token)match(input,TRANSIENT,FOLLOW_TRANSIENT_in_modifier8093); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRANSIENT171_tree = (CommonTree)adaptor.create(TRANSIENT171);
                    adaptor.addChild(root_0, TRANSIENT171_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1381:9: VOLATILE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VOLATILE172=(Token)match(input,VOLATILE,FOLLOW_VOLATILE_in_modifier8104); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VOLATILE172_tree = (CommonTree)adaptor.create(VOLATILE172);
                    adaptor.addChild(root_0, VOLATILE172_tree);
                    }

                    }
                    break;
                case 7 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1383:9: STRICTFP
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STRICTFP173=(Token)match(input,STRICTFP,FOLLOW_STRICTFP_in_modifier8115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRICTFP173_tree = (CommonTree)adaptor.create(STRICTFP173);
                    adaptor.addChild(root_0, STRICTFP173_tree);
                    }

                    }
                    break;
                case 8 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1385:9: PUBLIC
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PUBLIC174=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_modifier8126); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PUBLIC174_tree = (CommonTree)adaptor.create(PUBLIC174);
                    adaptor.addChild(root_0, PUBLIC174_tree);
                    }

                    }
                    break;
                case 9 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1387:9: PROTECTED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PROTECTED175=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_modifier8137); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PROTECTED175_tree = (CommonTree)adaptor.create(PROTECTED175);
                    adaptor.addChild(root_0, PROTECTED175_tree);
                    }

                    }
                    break;
                case 10 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1389:9: PRIVATE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIVATE176=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_modifier8148); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIVATE176_tree = (CommonTree)adaptor.create(PRIVATE176);
                    adaptor.addChild(root_0, PRIVATE176_tree);
                    }

                    }
                    break;
                case 11 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1391:9: localModifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_localModifier_in_modifier8160);
                    localModifier177=localModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localModifier177.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public static class localModifierList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localModifierList"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1397:1: localModifierList : ( localModifier )* -> ^( MODIFIER_LIST ( localModifier )* ) ;
    public final SSQSA_JavaParser.localModifierList_return localModifierList() throws RecognitionException {
        SSQSA_JavaParser.localModifierList_return retval = new SSQSA_JavaParser.localModifierList_return();
        retval.start = input.LT(1);
        int localModifierList_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.localModifier_return localModifier178 = null;


        RewriteRuleSubtreeStream stream_localModifier=new RewriteRuleSubtreeStream(adaptor,"rule localModifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1399:5: ( ( localModifier )* -> ^( MODIFIER_LIST ( localModifier )* ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1399:9: ( localModifier )*
            {
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1399:9: ( localModifier )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==AT||LA65_0==FINAL) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: localModifier
            	    {
            	    pushFollow(FOLLOW_localModifier_in_localModifierList8183);
            	    localModifier178=localModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_localModifier.add(localModifier178.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);



            // AST REWRITE
            // elements: localModifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1401:9: -> ^( MODIFIER_LIST ( localModifier )* )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1401:12: ^( MODIFIER_LIST ( localModifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MODIFIER_LIST, "MODIFIER_LIST"), root_1);

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1401:28: ( localModifier )*
                while ( stream_localModifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_localModifier.nextTree());

                }
                stream_localModifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, localModifierList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localModifierList"

    public static class localModifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localModifier"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1407:1: localModifier : ( FINAL | annotation );
    public final SSQSA_JavaParser.localModifier_return localModifier() throws RecognitionException {
        SSQSA_JavaParser.localModifier_return retval = new SSQSA_JavaParser.localModifier_return();
        retval.start = input.LT(1);
        int localModifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINAL179=null;
        SSQSA_JavaParser.annotation_return annotation180 = null;


        CommonTree FINAL179_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1409:5: ( FINAL | annotation )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==FINAL) ) {
                alt66=1;
            }
            else if ( (LA66_0==AT) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1409:9: FINAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FINAL179=(Token)match(input,FINAL,FOLLOW_FINAL_in_localModifier8229); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL179_tree = (CommonTree)adaptor.create(FINAL179);
                    adaptor.addChild(root_0, FINAL179_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1411:9: annotation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_localModifier8240);
                    annotation180=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation180.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, localModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localModifier"

    public static class type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1417:1: type : ( simpleType | objectType );
    public final SSQSA_JavaParser.type_return type() throws RecognitionException {
        SSQSA_JavaParser.type_return retval = new SSQSA_JavaParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.simpleType_return simpleType181 = null;

        SSQSA_JavaParser.objectType_return objectType182 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1419:5: ( simpleType | objectType )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==BOOLEAN||LA67_0==BYTE||LA67_0==CHAR||LA67_0==DOUBLE||LA67_0==FLOAT||(LA67_0>=INT && LA67_0<=LONG)||LA67_0==SHORT) ) {
                alt67=1;
            }
            else if ( (LA67_0==IDENT) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1419:9: simpleType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_simpleType_in_type8263);
                    simpleType181=simpleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleType181.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1421:9: objectType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_objectType_in_type8274);
                    objectType182=objectType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, objectType182.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class simpleType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simpleType"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1427:1: simpleType : ( primitiveType arrayDeclaratorList -> ^( TYPE primitiveType arrayDeclaratorList ) | primitiveType -> ^( TYPE primitiveType ) );
    public final SSQSA_JavaParser.simpleType_return simpleType() throws RecognitionException {
        SSQSA_JavaParser.simpleType_return retval = new SSQSA_JavaParser.simpleType_return();
        retval.start = input.LT(1);
        int simpleType_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.primitiveType_return primitiveType183 = null;

        SSQSA_JavaParser.arrayDeclaratorList_return arrayDeclaratorList184 = null;

        SSQSA_JavaParser.primitiveType_return primitiveType185 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1429:5: ( primitiveType arrayDeclaratorList -> ^( TYPE primitiveType arrayDeclaratorList ) | primitiveType -> ^( TYPE primitiveType ) )
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==BOOLEAN||LA68_0==BYTE||LA68_0==CHAR||LA68_0==DOUBLE||LA68_0==FLOAT||(LA68_0>=INT && LA68_0<=LONG)||LA68_0==SHORT) ) {
                int LA68_1 = input.LA(2);

                if ( (LA68_1==LBRACK) ) {
                    int LA68_2 = input.LA(3);

                    if ( (LA68_2==RBRACK) ) {
                        int LA68_4 = input.LA(4);

                        if ( (synpred86_SSQSA_Java()) ) {
                            alt68=1;
                        }
                        else if ( (true) ) {
                            alt68=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 68, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA68_2==DEC||LA68_2==INC||LA68_2==LESS_THAN||LA68_2==LOGICAL_NOT||(LA68_2>=LPAREN && LA68_2<=MINUS)||LA68_2==NOT||LA68_2==PLUS||LA68_2==BOOLEAN||LA68_2==BYTE||LA68_2==CHAR||LA68_2==DOUBLE||LA68_2==FALSE||LA68_2==FLOAT||(LA68_2>=INT && LA68_2<=LONG)||(LA68_2>=NEW && LA68_2<=NULL)||LA68_2==SHORT||LA68_2==SUPER||LA68_2==THIS||LA68_2==TRUE||LA68_2==VOID||(LA68_2>=IDENT && LA68_2<=STRING_LITERAL)) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 2, input);

                        throw nvae;
                    }
                }
                else if ( (LA68_1==EOF||(LA68_1>=AND && LA68_1<=ASSIGN)||(LA68_1>=BIT_SHIFT_RIGHT && LA68_1<=COMMA)||(LA68_1>=DIV_ASSIGN && LA68_1<=DOT)||(LA68_1>=ELLIPSIS && LA68_1<=EQUAL)||LA68_1==GREATER_THAN||LA68_1==LCURLY||LA68_1==LOGICAL_AND||(LA68_1>=LOGICAL_OR && LA68_1<=LPAREN)||LA68_1==MINUS_ASSIGN||LA68_1==MOD_ASSIGN||(LA68_1>=NOT_EQUAL && LA68_1<=OR_ASSIGN)||(LA68_1>=PLUS_ASSIGN && LA68_1<=SEMI)||(LA68_1>=SHIFT_LEFT_ASSIGN && LA68_1<=SHIFT_RIGHT_ASSIGN)||(LA68_1>=STAR_ASSIGN && LA68_1<=XOR_ASSIGN)||LA68_1==BOOLEAN||LA68_1==BYTE||LA68_1==CHAR||LA68_1==DOUBLE||LA68_1==EXTENDS||LA68_1==FLOAT||LA68_1==IMPLEMENTS||(LA68_1>=INT && LA68_1<=LONG)||LA68_1==SHORT||LA68_1==SUPER||LA68_1==THIS||LA68_1==VOID||LA68_1==IDENT) ) {
                    alt68=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 68, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1429:9: primitiveType arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_primitiveType_in_simpleType8298);
                    primitiveType183=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType183.getTree());
                    pushFollow(FOLLOW_arrayDeclaratorList_in_simpleType8301);
                    arrayDeclaratorList184=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList184.getTree());


                    // AST REWRITE
                    // elements: primitiveType, arrayDeclaratorList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1431:9: -> ^( TYPE primitiveType arrayDeclaratorList )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1431:13: ^( TYPE primitiveType arrayDeclaratorList )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, stream_primitiveType.nextTree());
                        adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1433:11: primitiveType
                    {
                    pushFollow(FOLLOW_primitiveType_in_simpleType8338);
                    primitiveType185=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType185.getTree());


                    // AST REWRITE
                    // elements: primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1435:9: -> ^( TYPE primitiveType )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1435:12: ^( TYPE primitiveType )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, stream_primitiveType.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, simpleType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simpleType"

    public static class objectType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectType"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1441:1: objectType : ( qualifiedTypeIdent arrayDeclaratorList -> ^( TYPE qualifiedTypeIdent ) | qualifiedTypeIdent -> ^( TYPE qualifiedTypeIdent ) );
    public final SSQSA_JavaParser.objectType_return objectType() throws RecognitionException {
        SSQSA_JavaParser.objectType_return retval = new SSQSA_JavaParser.objectType_return();
        retval.start = input.LT(1);
        int objectType_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.qualifiedTypeIdent_return qualifiedTypeIdent186 = null;

        SSQSA_JavaParser.arrayDeclaratorList_return arrayDeclaratorList187 = null;

        SSQSA_JavaParser.qualifiedTypeIdent_return qualifiedTypeIdent188 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1443:5: ( qualifiedTypeIdent arrayDeclaratorList -> ^( TYPE qualifiedTypeIdent ) | qualifiedTypeIdent -> ^( TYPE qualifiedTypeIdent ) )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==IDENT) ) {
                int LA69_1 = input.LA(2);

                if ( (synpred87_SSQSA_Java()) ) {
                    alt69=1;
                }
                else if ( (true) ) {
                    alt69=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1443:9: qualifiedTypeIdent arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_qualifiedTypeIdent_in_objectType8383);
                    qualifiedTypeIdent186=qualifiedTypeIdent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifiedTypeIdent.add(qualifiedTypeIdent186.getTree());
                    pushFollow(FOLLOW_arrayDeclaratorList_in_objectType8386);
                    arrayDeclaratorList187=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList187.getTree());


                    // AST REWRITE
                    // elements: qualifiedTypeIdent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1447:9: -> ^( TYPE qualifiedTypeIdent )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1447:12: ^( TYPE qualifiedTypeIdent )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, stream_qualifiedTypeIdent.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1449:11: qualifiedTypeIdent
                    {
                    pushFollow(FOLLOW_qualifiedTypeIdent_in_objectType8427);
                    qualifiedTypeIdent188=qualifiedTypeIdent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifiedTypeIdent.add(qualifiedTypeIdent188.getTree());


                    // AST REWRITE
                    // elements: qualifiedTypeIdent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1451:9: -> ^( TYPE qualifiedTypeIdent )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1451:12: ^( TYPE qualifiedTypeIdent )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, stream_qualifiedTypeIdent.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, objectType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objectType"

    public static class qualifiedTypeIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedTypeIdent"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1481:1: qualifiedTypeIdent : typeIdent ( DOT typeIdent )* -> ^( NAME typeIdent ( DOT typeIdent )* ) ;
    public final SSQSA_JavaParser.qualifiedTypeIdent_return qualifiedTypeIdent() throws RecognitionException {
        SSQSA_JavaParser.qualifiedTypeIdent_return retval = new SSQSA_JavaParser.qualifiedTypeIdent_return();
        retval.start = input.LT(1);
        int qualifiedTypeIdent_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DOT190=null;
        SSQSA_JavaParser.typeIdent_return typeIdent189 = null;

        SSQSA_JavaParser.typeIdent_return typeIdent191 = null;


        CommonTree DOT190_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_typeIdent=new RewriteRuleSubtreeStream(adaptor,"rule typeIdent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1483:5: ( typeIdent ( DOT typeIdent )* -> ^( NAME typeIdent ( DOT typeIdent )* ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1483:9: typeIdent ( DOT typeIdent )*
            {
            pushFollow(FOLLOW_typeIdent_in_qualifiedTypeIdent8491);
            typeIdent189=typeIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeIdent.add(typeIdent189.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1483:19: ( DOT typeIdent )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==DOT) ) {
                    int LA70_2 = input.LA(2);

                    if ( (synpred88_SSQSA_Java()) ) {
                        alt70=1;
                    }


                }


                switch (alt70) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1483:20: DOT typeIdent
            	    {
            	    DOT190=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedTypeIdent8494); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT190);

            	    pushFollow(FOLLOW_typeIdent_in_qualifiedTypeIdent8496);
            	    typeIdent191=typeIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeIdent.add(typeIdent191.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);



            // AST REWRITE
            // elements: DOT, typeIdent, typeIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1485:9: -> ^( NAME typeIdent ( DOT typeIdent )* )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1485:12: ^( NAME typeIdent ( DOT typeIdent )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_typeIdent.nextTree());
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1485:29: ( DOT typeIdent )*
                while ( stream_DOT.hasNext()||stream_typeIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_DOT.nextNode());
                    adaptor.addChild(root_1, stream_typeIdent.nextTree());

                }
                stream_DOT.reset();
                stream_typeIdent.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, qualifiedTypeIdent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedTypeIdent"

    public static class qualifiedTypeIdentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedTypeIdentSimplified"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1493:1: qualifiedTypeIdentSimplified : typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( TYPE ^( NAME typeIdentSimplified ( DOT typeIdentSimplified )* ) ) ;
    public final SSQSA_JavaParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified() throws RecognitionException {
        SSQSA_JavaParser.qualifiedTypeIdentSimplified_return retval = new SSQSA_JavaParser.qualifiedTypeIdentSimplified_return();
        retval.start = input.LT(1);
        int qualifiedTypeIdentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DOT193=null;
        SSQSA_JavaParser.typeIdentSimplified_return typeIdentSimplified192 = null;

        SSQSA_JavaParser.typeIdentSimplified_return typeIdentSimplified194 = null;


        CommonTree DOT193_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_typeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule typeIdentSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1495:5: ( typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( TYPE ^( NAME typeIdentSimplified ( DOT typeIdentSimplified )* ) ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1495:9: typeIdentSimplified ( DOT typeIdentSimplified )*
            {
            pushFollow(FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified8551);
            typeIdentSimplified192=typeIdentSimplified();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeIdentSimplified.add(typeIdentSimplified192.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1495:29: ( DOT typeIdentSimplified )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==DOT) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1495:30: DOT typeIdentSimplified
            	    {
            	    DOT193=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedTypeIdentSimplified8554); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT193);

            	    pushFollow(FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified8556);
            	    typeIdentSimplified194=typeIdentSimplified();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeIdentSimplified.add(typeIdentSimplified194.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);



            // AST REWRITE
            // elements: DOT, typeIdentSimplified, typeIdentSimplified
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1497:9: -> ^( TYPE ^( NAME typeIdentSimplified ( DOT typeIdentSimplified )* ) )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1497:13: ^( TYPE ^( NAME typeIdentSimplified ( DOT typeIdentSimplified )* ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1497:20: ^( NAME typeIdentSimplified ( DOT typeIdentSimplified )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

                adaptor.addChild(root_2, stream_typeIdentSimplified.nextTree());
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1497:47: ( DOT typeIdentSimplified )*
                while ( stream_DOT.hasNext()||stream_typeIdentSimplified.hasNext() ) {
                    adaptor.addChild(root_2, stream_DOT.nextNode());
                    adaptor.addChild(root_2, stream_typeIdentSimplified.nextTree());

                }
                stream_DOT.reset();
                stream_typeIdentSimplified.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, qualifiedTypeIdentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedTypeIdentSimplified"

    public static class typeIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeIdent"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1503:1: typeIdent : IDENT ( genericTypeArgumentList )? -> IDENT ;
    public final SSQSA_JavaParser.typeIdent_return typeIdent() throws RecognitionException {
        SSQSA_JavaParser.typeIdent_return retval = new SSQSA_JavaParser.typeIdent_return();
        retval.start = input.LT(1);
        int typeIdent_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT195=null;
        SSQSA_JavaParser.genericTypeArgumentList_return genericTypeArgumentList196 = null;


        CommonTree IDENT195_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_genericTypeArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1505:5: ( IDENT ( genericTypeArgumentList )? -> IDENT )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1505:9: IDENT ( genericTypeArgumentList )?
            {
            IDENT195=(Token)match(input,IDENT,FOLLOW_IDENT_in_typeIdent8611); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT195);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1505:15: ( genericTypeArgumentList )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==LESS_THAN) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: genericTypeArgumentList
                    {
                    pushFollow(FOLLOW_genericTypeArgumentList_in_typeIdent8613);
                    genericTypeArgumentList196=genericTypeArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeArgumentList.add(genericTypeArgumentList196.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1507:9: -> IDENT
            {
                adaptor.addChild(root_0, stream_IDENT.nextNode());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, typeIdent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeIdent"

    public static class typeIdentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeIdentSimplified"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1513:1: typeIdentSimplified : IDENT ( genericTypeArgumentListSimplified )? -> IDENT ;
    public final SSQSA_JavaParser.typeIdentSimplified_return typeIdentSimplified() throws RecognitionException {
        SSQSA_JavaParser.typeIdentSimplified_return retval = new SSQSA_JavaParser.typeIdentSimplified_return();
        retval.start = input.LT(1);
        int typeIdentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT197=null;
        SSQSA_JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified198 = null;


        CommonTree IDENT197_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1515:5: ( IDENT ( genericTypeArgumentListSimplified )? -> IDENT )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1515:9: IDENT ( genericTypeArgumentListSimplified )?
            {
            IDENT197=(Token)match(input,IDENT,FOLLOW_IDENT_in_typeIdentSimplified8651); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT197);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1515:15: ( genericTypeArgumentListSimplified )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==LESS_THAN) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: genericTypeArgumentListSimplified
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_typeIdentSimplified8653);
                    genericTypeArgumentListSimplified198=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified198.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1517:9: -> IDENT
            {
                adaptor.addChild(root_0, stream_IDENT.nextNode());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, typeIdentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeIdentSimplified"

    public static class primitiveType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1525:1: primitiveType : ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE );
    public final SSQSA_JavaParser.primitiveType_return primitiveType() throws RecognitionException {
        SSQSA_JavaParser.primitiveType_return retval = new SSQSA_JavaParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set199=null;

        CommonTree set199_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1527:5: ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set199=(Token)input.LT(1);
            if ( input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||(input.LA(1)>=INT && input.LA(1)<=LONG)||input.LA(1)==SHORT ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set199));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class genericTypeArgumentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgumentList"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1547:1: genericTypeArgumentList : LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing ;
    public final SSQSA_JavaParser.genericTypeArgumentList_return genericTypeArgumentList() throws RecognitionException {
        SSQSA_JavaParser.genericTypeArgumentList_return retval = new SSQSA_JavaParser.genericTypeArgumentList_return();
        retval.start = input.LT(1);
        int genericTypeArgumentList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN200=null;
        Token COMMA202=null;
        SSQSA_JavaParser.genericTypeArgument_return genericTypeArgument201 = null;

        SSQSA_JavaParser.genericTypeArgument_return genericTypeArgument203 = null;

        SSQSA_JavaParser.genericTypeListClosing_return genericTypeListClosing204 = null;


        CommonTree LESS_THAN200_tree=null;
        CommonTree COMMA202_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1549:5: ( LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1549:9: LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing
            {
            root_0 = (CommonTree)adaptor.nil();

            LESS_THAN200=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeArgumentList8801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LESS_THAN200_tree = (CommonTree)adaptor.create(LESS_THAN200);
            adaptor.addChild(root_0, LESS_THAN200_tree);
            }
            pushFollow(FOLLOW_genericTypeArgument_in_genericTypeArgumentList8803);
            genericTypeArgument201=genericTypeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeArgument201.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1549:39: ( COMMA genericTypeArgument )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==COMMA) ) {
                    int LA74_2 = input.LA(2);

                    if ( (synpred99_SSQSA_Java()) ) {
                        alt74=1;
                    }


                }


                switch (alt74) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1549:40: COMMA genericTypeArgument
            	    {
            	    COMMA202=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeArgumentList8806); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA202_tree = (CommonTree)adaptor.create(COMMA202);
            	    adaptor.addChild(root_0, COMMA202_tree);
            	    }
            	    pushFollow(FOLLOW_genericTypeArgument_in_genericTypeArgumentList8808);
            	    genericTypeArgument203=genericTypeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeArgument203.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeArgumentList8812);
            genericTypeListClosing204=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeListClosing204.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, genericTypeArgumentList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentList"

    public static class genericTypeArgument_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgument"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1557:1: genericTypeArgument : ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) );
    public final SSQSA_JavaParser.genericTypeArgument_return genericTypeArgument() throws RecognitionException {
        SSQSA_JavaParser.genericTypeArgument_return retval = new SSQSA_JavaParser.genericTypeArgument_return();
        retval.start = input.LT(1);
        int genericTypeArgument_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION206=null;
        SSQSA_JavaParser.type_return type205 = null;

        SSQSA_JavaParser.genericWildcardBoundType_return genericWildcardBoundType207 = null;


        CommonTree QUESTION206_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleSubtreeStream stream_genericWildcardBoundType=new RewriteRuleSubtreeStream(adaptor,"rule genericWildcardBoundType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1559:5: ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==BOOLEAN||LA76_0==BYTE||LA76_0==CHAR||LA76_0==DOUBLE||LA76_0==FLOAT||(LA76_0>=INT && LA76_0<=LONG)||LA76_0==SHORT||LA76_0==IDENT) ) {
                alt76=1;
            }
            else if ( (LA76_0==QUESTION) ) {
                alt76=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1559:9: type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_in_genericTypeArgument8845);
                    type205=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type205.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1561:9: QUESTION ( genericWildcardBoundType )?
                    {
                    QUESTION206=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_genericTypeArgument8856); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(QUESTION206);

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1561:18: ( genericWildcardBoundType )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==EXTENDS) ) {
                        int LA75_1 = input.LA(2);

                        if ( (LA75_1==BOOLEAN||LA75_1==BYTE||LA75_1==CHAR||LA75_1==DOUBLE||LA75_1==FLOAT||(LA75_1>=INT && LA75_1<=LONG)||LA75_1==SHORT) ) {
                            int LA75_4 = input.LA(3);

                            if ( (synpred101_SSQSA_Java()) ) {
                                alt75=1;
                            }
                        }
                        else if ( (LA75_1==IDENT) ) {
                            int LA75_5 = input.LA(3);

                            if ( (synpred101_SSQSA_Java()) ) {
                                alt75=1;
                            }
                        }
                    }
                    else if ( (LA75_0==SUPER) ) {
                        int LA75_3 = input.LA(2);

                        if ( (LA75_3==BOOLEAN||LA75_3==BYTE||LA75_3==CHAR||LA75_3==DOUBLE||LA75_3==FLOAT||(LA75_3>=INT && LA75_3<=LONG)||LA75_3==SHORT||LA75_3==IDENT) ) {
                            alt75=1;
                        }
                    }
                    switch (alt75) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: genericWildcardBoundType
                            {
                            pushFollow(FOLLOW_genericWildcardBoundType_in_genericTypeArgument8858);
                            genericWildcardBoundType207=genericWildcardBoundType();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericWildcardBoundType.add(genericWildcardBoundType207.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: genericWildcardBoundType, QUESTION
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1563:9: -> ^( QUESTION ( genericWildcardBoundType )? )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1563:12: ^( QUESTION ( genericWildcardBoundType )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_QUESTION.nextNode(), root_1);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1563:23: ( genericWildcardBoundType )?
                        if ( stream_genericWildcardBoundType.hasNext() ) {
                            adaptor.addChild(root_1, stream_genericWildcardBoundType.nextTree());

                        }
                        stream_genericWildcardBoundType.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, genericTypeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgument"

    public static class genericWildcardBoundType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericWildcardBoundType"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1569:1: genericWildcardBoundType : ( EXTENDS | SUPER ) type ;
    public final SSQSA_JavaParser.genericWildcardBoundType_return genericWildcardBoundType() throws RecognitionException {
        SSQSA_JavaParser.genericWildcardBoundType_return retval = new SSQSA_JavaParser.genericWildcardBoundType_return();
        retval.start = input.LT(1);
        int genericWildcardBoundType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set208=null;
        SSQSA_JavaParser.type_return type209 = null;


        CommonTree set208_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1571:5: ( ( EXTENDS | SUPER ) type )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1571:9: ( EXTENDS | SUPER ) type
            {
            root_0 = (CommonTree)adaptor.nil();

            set208=(Token)input.LT(1);
            set208=(Token)input.LT(1);
            if ( input.LA(1)==EXTENDS||input.LA(1)==SUPER ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set208), root_0);
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            pushFollow(FOLLOW_type_in_genericWildcardBoundType8913);
            type209=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type209.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, genericWildcardBoundType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericWildcardBoundType"

    public static class genericTypeArgumentListSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgumentListSimplified"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1577:1: genericTypeArgumentListSimplified : LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing ;
    public final SSQSA_JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified() throws RecognitionException {
        SSQSA_JavaParser.genericTypeArgumentListSimplified_return retval = new SSQSA_JavaParser.genericTypeArgumentListSimplified_return();
        retval.start = input.LT(1);
        int genericTypeArgumentListSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN210=null;
        Token COMMA212=null;
        SSQSA_JavaParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified211 = null;

        SSQSA_JavaParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified213 = null;

        SSQSA_JavaParser.genericTypeListClosing_return genericTypeListClosing214 = null;


        CommonTree LESS_THAN210_tree=null;
        CommonTree COMMA212_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1579:5: ( LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1579:9: LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing
            {
            root_0 = (CommonTree)adaptor.nil();

            LESS_THAN210=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeArgumentListSimplified8936); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LESS_THAN210_tree = (CommonTree)adaptor.create(LESS_THAN210);
            adaptor.addChild(root_0, LESS_THAN210_tree);
            }
            pushFollow(FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified8938);
            genericTypeArgumentSimplified211=genericTypeArgumentSimplified();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeArgumentSimplified211.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1579:49: ( COMMA genericTypeArgumentSimplified )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==COMMA) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1579:50: COMMA genericTypeArgumentSimplified
            	    {
            	    COMMA212=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeArgumentListSimplified8941); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA212_tree = (CommonTree)adaptor.create(COMMA212);
            	    adaptor.addChild(root_0, COMMA212_tree);
            	    }
            	    pushFollow(FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified8943);
            	    genericTypeArgumentSimplified213=genericTypeArgumentSimplified();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeArgumentSimplified213.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeArgumentListSimplified8947);
            genericTypeListClosing214=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeListClosing214.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, genericTypeArgumentListSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentListSimplified"

    public static class genericTypeArgumentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgumentSimplified"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1587:1: genericTypeArgumentSimplified : ( type | QUESTION );
    public final SSQSA_JavaParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified() throws RecognitionException {
        SSQSA_JavaParser.genericTypeArgumentSimplified_return retval = new SSQSA_JavaParser.genericTypeArgumentSimplified_return();
        retval.start = input.LT(1);
        int genericTypeArgumentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION216=null;
        SSQSA_JavaParser.type_return type215 = null;


        CommonTree QUESTION216_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1589:5: ( type | QUESTION )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==BOOLEAN||LA78_0==BYTE||LA78_0==CHAR||LA78_0==DOUBLE||LA78_0==FLOAT||(LA78_0>=INT && LA78_0<=LONG)||LA78_0==SHORT||LA78_0==IDENT) ) {
                alt78=1;
            }
            else if ( (LA78_0==QUESTION) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1589:9: type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_in_genericTypeArgumentSimplified8984);
                    type215=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type215.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1591:9: QUESTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    QUESTION216=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_genericTypeArgumentSimplified8995); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION216_tree = (CommonTree)adaptor.create(QUESTION216);
                    adaptor.addChild(root_0, QUESTION216_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, genericTypeArgumentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentSimplified"

    public static class formalParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterList"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1599:1: formalParameterList : LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN ;
    public final SSQSA_JavaParser.formalParameterList_return formalParameterList() throws RecognitionException {
        SSQSA_JavaParser.formalParameterList_return retval = new SSQSA_JavaParser.formalParameterList_return();
        retval.start = input.LT(1);
        int formalParameterList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN217=null;
        Token COMMA219=null;
        Token COMMA221=null;
        Token RPAREN224=null;
        SSQSA_JavaParser.formalParameterStandardDecl_return formalParameterStandardDecl218 = null;

        SSQSA_JavaParser.formalParameterStandardDecl_return formalParameterStandardDecl220 = null;

        SSQSA_JavaParser.formalParameterVarArgDecl_return formalParameterVarArgDecl222 = null;

        SSQSA_JavaParser.formalParameterVarArgDecl_return formalParameterVarArgDecl223 = null;


        CommonTree LPAREN217_tree=null;
        CommonTree COMMA219_tree=null;
        CommonTree COMMA221_tree=null;
        CommonTree RPAREN224_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_formalParameterVarArgDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterVarArgDecl");
        RewriteRuleSubtreeStream stream_formalParameterStandardDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterStandardDecl");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1601:5: ( LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1601:9: LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN
            {
            LPAREN217=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_formalParameterList9028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN217);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1603:9: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) )
            int alt81=3;
            switch ( input.LA(1) ) {
            case FINAL:
                {
                int LA81_1 = input.LA(2);

                if ( (synpred107_SSQSA_Java()) ) {
                    alt81=1;
                }
                else if ( (synpred108_SSQSA_Java()) ) {
                    alt81=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 1, input);

                    throw nvae;
                }
                }
                break;
            case AT:
                {
                int LA81_2 = input.LA(2);

                if ( (synpred107_SSQSA_Java()) ) {
                    alt81=1;
                }
                else if ( (synpred108_SSQSA_Java()) ) {
                    alt81=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 2, input);

                    throw nvae;
                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA81_3 = input.LA(2);

                if ( (synpred107_SSQSA_Java()) ) {
                    alt81=1;
                }
                else if ( (synpred108_SSQSA_Java()) ) {
                    alt81=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 3, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                int LA81_4 = input.LA(2);

                if ( (synpred107_SSQSA_Java()) ) {
                    alt81=1;
                }
                else if ( (synpred108_SSQSA_Java()) ) {
                    alt81=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 4, input);

                    throw nvae;
                }
                }
                break;
            case RPAREN:
                {
                alt81=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }

            switch (alt81) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1605:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
                    {
                    pushFollow(FOLLOW_formalParameterStandardDecl_in_formalParameterList9058);
                    formalParameterStandardDecl218=formalParameterStandardDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterStandardDecl.add(formalParameterStandardDecl218.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1605:41: ( COMMA formalParameterStandardDecl )*
                    loop79:
                    do {
                        int alt79=2;
                        int LA79_0 = input.LA(1);

                        if ( (LA79_0==COMMA) ) {
                            int LA79_1 = input.LA(2);

                            if ( (synpred105_SSQSA_Java()) ) {
                                alt79=1;
                            }


                        }


                        switch (alt79) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1605:42: COMMA formalParameterStandardDecl
                    	    {
                    	    COMMA219=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterList9061); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA219);

                    	    pushFollow(FOLLOW_formalParameterStandardDecl_in_formalParameterList9063);
                    	    formalParameterStandardDecl220=formalParameterStandardDecl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_formalParameterStandardDecl.add(formalParameterStandardDecl220.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop79;
                        }
                    } while (true);

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1605:78: ( COMMA formalParameterVarArgDecl )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==COMMA) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1605:79: COMMA formalParameterVarArgDecl
                            {
                            COMMA221=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterList9068); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA221);

                            pushFollow(FOLLOW_formalParameterVarArgDecl_in_formalParameterList9070);
                            formalParameterVarArgDecl222=formalParameterVarArgDecl();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_formalParameterVarArgDecl.add(formalParameterVarArgDecl222.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: formalParameterVarArgDecl, formalParameterStandardDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1607:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1607:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN217, "FORMAL_PARAM_LIST"), root_1);

                        if ( !(stream_formalParameterStandardDecl.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_formalParameterStandardDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameterStandardDecl.nextTree());

                        }
                        stream_formalParameterStandardDecl.reset();
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1607:96: ( formalParameterVarArgDecl )?
                        if ( stream_formalParameterVarArgDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameterVarArgDecl.nextTree());

                        }
                        stream_formalParameterVarArgDecl.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1611:13: formalParameterVarArgDecl
                    {
                    pushFollow(FOLLOW_formalParameterVarArgDecl_in_formalParameterList9130);
                    formalParameterVarArgDecl223=formalParameterVarArgDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterVarArgDecl.add(formalParameterVarArgDecl223.getTree());


                    // AST REWRITE
                    // elements: formalParameterVarArgDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1613:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1613:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN217, "FORMAL_PARAM_LIST"), root_1);

                        adaptor.addChild(root_1, stream_formalParameterVarArgDecl.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1617:13: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1617:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1617:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN217, "FORMAL_PARAM_LIST"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            RPAREN224=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_formalParameterList9212); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN224);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, formalParameterList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterList"

    public static class formalParameterStandardDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterStandardDecl"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1629:1: formalParameterStandardDecl : localModifierList type variableDeclaratorId -> ^( PARAMETER_DECL localModifierList type variableDeclaratorId ) ;
    public final SSQSA_JavaParser.formalParameterStandardDecl_return formalParameterStandardDecl() throws RecognitionException {
        SSQSA_JavaParser.formalParameterStandardDecl_return retval = new SSQSA_JavaParser.formalParameterStandardDecl_return();
        retval.start = input.LT(1);
        int formalParameterStandardDecl_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.localModifierList_return localModifierList225 = null;

        SSQSA_JavaParser.type_return type226 = null;

        SSQSA_JavaParser.variableDeclaratorId_return variableDeclaratorId227 = null;


        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1631:5: ( localModifierList type variableDeclaratorId -> ^( PARAMETER_DECL localModifierList type variableDeclaratorId ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1631:9: localModifierList type variableDeclaratorId
            {
            pushFollow(FOLLOW_localModifierList_in_formalParameterStandardDecl9242);
            localModifierList225=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList225.getTree());
            pushFollow(FOLLOW_type_in_formalParameterStandardDecl9244);
            type226=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type226.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterStandardDecl9246);
            variableDeclaratorId227=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId227.getTree());


            // AST REWRITE
            // elements: variableDeclaratorId, localModifierList, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1633:9: -> ^( PARAMETER_DECL localModifierList type variableDeclaratorId )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1633:44: ^( PARAMETER_DECL localModifierList type variableDeclaratorId )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMETER_DECL, "PARAMETER_DECL"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, formalParameterStandardDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterStandardDecl"

    public static class formalParameterVarArgDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterVarArgDecl"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1639:1: formalParameterVarArgDecl : localModifierList type ELLIPSIS variableDeclaratorId -> ^( PARAMETER_DECL localModifierList type variableDeclaratorId ) ;
    public final SSQSA_JavaParser.formalParameterVarArgDecl_return formalParameterVarArgDecl() throws RecognitionException {
        SSQSA_JavaParser.formalParameterVarArgDecl_return retval = new SSQSA_JavaParser.formalParameterVarArgDecl_return();
        retval.start = input.LT(1);
        int formalParameterVarArgDecl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ELLIPSIS230=null;
        SSQSA_JavaParser.localModifierList_return localModifierList228 = null;

        SSQSA_JavaParser.type_return type229 = null;

        SSQSA_JavaParser.variableDeclaratorId_return variableDeclaratorId231 = null;


        CommonTree ELLIPSIS230_tree=null;
        RewriteRuleTokenStream stream_ELLIPSIS=new RewriteRuleTokenStream(adaptor,"token ELLIPSIS");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1641:5: ( localModifierList type ELLIPSIS variableDeclaratorId -> ^( PARAMETER_DECL localModifierList type variableDeclaratorId ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1641:9: localModifierList type ELLIPSIS variableDeclaratorId
            {
            pushFollow(FOLLOW_localModifierList_in_formalParameterVarArgDecl9299);
            localModifierList228=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList228.getTree());
            pushFollow(FOLLOW_type_in_formalParameterVarArgDecl9301);
            type229=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type229.getTree());
            ELLIPSIS230=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_formalParameterVarArgDecl9303); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ELLIPSIS.add(ELLIPSIS230);

            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterVarArgDecl9305);
            variableDeclaratorId231=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId231.getTree());


            // AST REWRITE
            // elements: type, variableDeclaratorId, localModifierList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1643:9: -> ^( PARAMETER_DECL localModifierList type variableDeclaratorId )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1643:47: ^( PARAMETER_DECL localModifierList type variableDeclaratorId )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMETER_DECL, "PARAMETER_DECL"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, formalParameterVarArgDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterVarArgDecl"

    public static class qualifiedIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedIdentifier"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1651:1: qualifiedIdentifier : ( IDENT -> ^( NAME IDENT ) ) ( DOT IDENT -> ^( NAME $qualifiedIdentifier DOT ^( NAME IDENT ) ) )* ;
    public final SSQSA_JavaParser.qualifiedIdentifier_return qualifiedIdentifier() throws RecognitionException {
        SSQSA_JavaParser.qualifiedIdentifier_return retval = new SSQSA_JavaParser.qualifiedIdentifier_return();
        retval.start = input.LT(1);
        int qualifiedIdentifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT232=null;
        Token DOT233=null;
        Token IDENT234=null;

        CommonTree IDENT232_tree=null;
        CommonTree DOT233_tree=null;
        CommonTree IDENT234_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1653:5: ( ( IDENT -> ^( NAME IDENT ) ) ( DOT IDENT -> ^( NAME $qualifiedIdentifier DOT ^( NAME IDENT ) ) )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1653:7: ( IDENT -> ^( NAME IDENT ) ) ( DOT IDENT -> ^( NAME $qualifiedIdentifier DOT ^( NAME IDENT ) ) )*
            {
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1653:7: ( IDENT -> ^( NAME IDENT ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1654:7: IDENT
            {
            IDENT232=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentifier9364); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT232);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1654:13: -> ^( NAME IDENT )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1654:16: ^( NAME IDENT )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

                adaptor.addChild(root_1, stream_IDENT.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1656:6: ( DOT IDENT -> ^( NAME $qualifiedIdentifier DOT ^( NAME IDENT ) ) )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==DOT) ) {
                    int LA82_2 = input.LA(2);

                    if ( (LA82_2==IDENT) ) {
                        int LA82_3 = input.LA(3);

                        if ( (synpred109_SSQSA_Java()) ) {
                            alt82=1;
                        }


                    }


                }


                switch (alt82) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1657:7: DOT IDENT
            	    {
            	    DOT233=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentifier9395); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT233);

            	    IDENT234=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentifier9397); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT234);



            	    // AST REWRITE
            	    // elements: DOT, qualifiedIdentifier, IDENT
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 1657:18: -> ^( NAME $qualifiedIdentifier DOT ^( NAME IDENT ) )
            	    {
            	        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1657:21: ^( NAME $qualifiedIdentifier DOT ^( NAME IDENT ) )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_DOT.nextNode());
            	        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1657:53: ^( NAME IDENT )
            	        {
            	        CommonTree root_2 = (CommonTree)adaptor.nil();
            	        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

            	        adaptor.addChild(root_2, stream_IDENT.nextNode());

            	        adaptor.addChild(root_1, root_2);
            	        }

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, qualifiedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentifier"

    public static class annotationList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationList"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1668:1: annotationList : ( annotation )* ;
    public final SSQSA_JavaParser.annotationList_return annotationList() throws RecognitionException {
        SSQSA_JavaParser.annotationList_return retval = new SSQSA_JavaParser.annotationList_return();
        retval.start = input.LT(1);
        int annotationList_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.annotation_return annotation235 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1670:5: ( ( annotation )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1670:9: ( annotation )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1670:9: ( annotation )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==AT) ) {
                    int LA83_2 = input.LA(2);

                    if ( (LA83_2==IDENT) ) {
                        int LA83_3 = input.LA(3);

                        if ( (synpred110_SSQSA_Java()) ) {
                            alt83=1;
                        }


                    }


                }


                switch (alt83) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotationList9454);
            	    annotation235=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation235.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, annotationList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationList"

    public static class annotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1678:1: annotation : AT qualifiedIdentifier ( annotationInit )? ;
    public final SSQSA_JavaParser.annotation_return annotation() throws RecognitionException {
        SSQSA_JavaParser.annotation_return retval = new SSQSA_JavaParser.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AT236=null;
        SSQSA_JavaParser.qualifiedIdentifier_return qualifiedIdentifier237 = null;

        SSQSA_JavaParser.annotationInit_return annotationInit238 = null;


        CommonTree AT236_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1682:5: ( AT qualifiedIdentifier ( annotationInit )? )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1682:7: AT qualifiedIdentifier ( annotationInit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            AT236=(Token)match(input,AT,FOLLOW_AT_in_annotation9492); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AT236_tree = (CommonTree)adaptor.create(AT236);
            adaptor.addChild(root_0, AT236_tree);
            }
            pushFollow(FOLLOW_qualifiedIdentifier_in_annotation9494);
            qualifiedIdentifier237=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier237.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1682:30: ( annotationInit )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==LPAREN) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: annotationInit
                    {
                    pushFollow(FOLLOW_annotationInit_in_annotation9496);
                    annotationInit238=annotationInit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationInit238.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationInit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationInit"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1688:1: annotationInit : LPAREN annotationInitializers RPAREN -> ^( SEPARATOR LPAREN ) annotationInitializers ^( SEPARATOR RPAREN ) ;
    public final SSQSA_JavaParser.annotationInit_return annotationInit() throws RecognitionException {
        SSQSA_JavaParser.annotationInit_return retval = new SSQSA_JavaParser.annotationInit_return();
        retval.start = input.LT(1);
        int annotationInit_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN239=null;
        Token RPAREN241=null;
        SSQSA_JavaParser.annotationInitializers_return annotationInitializers240 = null;


        CommonTree LPAREN239_tree=null;
        CommonTree RPAREN241_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_annotationInitializers=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializers");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1690:5: ( LPAREN annotationInitializers RPAREN -> ^( SEPARATOR LPAREN ) annotationInitializers ^( SEPARATOR RPAREN ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1690:9: LPAREN annotationInitializers RPAREN
            {
            LPAREN239=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationInit9524); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN239);

            pushFollow(FOLLOW_annotationInitializers_in_annotationInit9526);
            annotationInitializers240=annotationInitializers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationInitializers.add(annotationInitializers240.getTree());
            RPAREN241=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationInit9528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN241);



            // AST REWRITE
            // elements: RPAREN, LPAREN, annotationInitializers
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1691:9: -> ^( SEPARATOR LPAREN ) annotationInitializers ^( SEPARATOR RPAREN )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1691:12: ^( SEPARATOR LPAREN )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_1);

                adaptor.addChild(root_1, stream_LPAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }
                adaptor.addChild(root_0, stream_annotationInitializers.nextTree());
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1691:56: ^( SEPARATOR RPAREN )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_1);

                adaptor.addChild(root_1, stream_RPAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, annotationInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationInit"

    public static class annotationInitializers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationInitializers"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1698:1: annotationInitializers : ( annotationInitializer ( COMMA annotationInitializer )* | annotationElementValue );
    public final SSQSA_JavaParser.annotationInitializers_return annotationInitializers() throws RecognitionException {
        SSQSA_JavaParser.annotationInitializers_return retval = new SSQSA_JavaParser.annotationInitializers_return();
        retval.start = input.LT(1);
        int annotationInitializers_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA243=null;
        SSQSA_JavaParser.annotationInitializer_return annotationInitializer242 = null;

        SSQSA_JavaParser.annotationInitializer_return annotationInitializer244 = null;

        SSQSA_JavaParser.annotationElementValue_return annotationElementValue245 = null;


        CommonTree COMMA243_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1700:5: ( annotationInitializer ( COMMA annotationInitializer )* | annotationElementValue )
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==IDENT) ) {
                int LA86_1 = input.LA(2);

                if ( (LA86_1==ASSIGN) ) {
                    alt86=1;
                }
                else if ( (LA86_1==AND||LA86_1==BIT_SHIFT_RIGHT||(LA86_1>=DEC && LA86_1<=DIV)||LA86_1==DOT||(LA86_1>=EQUAL && LA86_1<=LBRACK)||(LA86_1>=LESS_OR_EQUAL && LA86_1<=LOGICAL_AND)||(LA86_1>=LOGICAL_OR && LA86_1<=MINUS)||LA86_1==MOD||(LA86_1>=NOT_EQUAL && LA86_1<=OR)||LA86_1==PLUS||LA86_1==QUESTION||LA86_1==RPAREN||LA86_1==SHIFT_LEFT||LA86_1==SHIFT_RIGHT||LA86_1==STAR||LA86_1==XOR||LA86_1==INSTANCEOF) ) {
                    alt86=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 86, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA86_0==AT||LA86_0==DEC||LA86_0==INC||LA86_0==LCURLY||LA86_0==LESS_THAN||LA86_0==LOGICAL_NOT||(LA86_0>=LPAREN && LA86_0<=MINUS)||LA86_0==NOT||LA86_0==PLUS||LA86_0==BOOLEAN||LA86_0==BYTE||LA86_0==CHAR||LA86_0==DOUBLE||LA86_0==FALSE||LA86_0==FLOAT||(LA86_0>=INT && LA86_0<=LONG)||(LA86_0>=NEW && LA86_0<=NULL)||LA86_0==SHORT||LA86_0==SUPER||LA86_0==THIS||LA86_0==TRUE||LA86_0==VOID||(LA86_0>=HEX_LITERAL && LA86_0<=STRING_LITERAL)) ) {
                alt86=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;
            }
            switch (alt86) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1700:9: annotationInitializer ( COMMA annotationInitializer )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationInitializer_in_annotationInitializers9585);
                    annotationInitializer242=annotationInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationInitializer242.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1700:31: ( COMMA annotationInitializer )*
                    loop85:
                    do {
                        int alt85=2;
                        int LA85_0 = input.LA(1);

                        if ( (LA85_0==COMMA) ) {
                            alt85=1;
                        }


                        switch (alt85) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1700:32: COMMA annotationInitializer
                    	    {
                    	    COMMA243=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationInitializers9588); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA243_tree = (CommonTree)adaptor.create(COMMA243);
                    	    adaptor.addChild(root_0, COMMA243_tree);
                    	    }
                    	    pushFollow(FOLLOW_annotationInitializer_in_annotationInitializers9590);
                    	    annotationInitializer244=annotationInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationInitializer244.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop85;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1704:9: annotationElementValue
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationElementValue_in_annotationInitializers9613);
                    annotationElementValue245=annotationElementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValue245.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, annotationInitializers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationInitializers"

    public static class annotationInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationInitializer"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1712:1: annotationInitializer : IDENT ASSIGN annotationElementValue ;
    public final SSQSA_JavaParser.annotationInitializer_return annotationInitializer() throws RecognitionException {
        SSQSA_JavaParser.annotationInitializer_return retval = new SSQSA_JavaParser.annotationInitializer_return();
        retval.start = input.LT(1);
        int annotationInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT246=null;
        Token ASSIGN247=null;
        SSQSA_JavaParser.annotationElementValue_return annotationElementValue248 = null;


        CommonTree IDENT246_tree=null;
        CommonTree ASSIGN247_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1716:5: ( IDENT ASSIGN annotationElementValue )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1716:10: IDENT ASSIGN annotationElementValue
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT246=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationInitializer9658); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT246_tree = (CommonTree)adaptor.create(IDENT246);
            adaptor.addChild(root_0, IDENT246_tree);
            }
            ASSIGN247=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_annotationInitializer9660); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ASSIGN247_tree = (CommonTree)adaptor.create(ASSIGN247);
            adaptor.addChild(root_0, ASSIGN247_tree);
            }
            pushFollow(FOLLOW_annotationElementValue_in_annotationInitializer9662);
            annotationElementValue248=annotationElementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValue248.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, annotationInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationInitializer"

    public static class annotationElementValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationElementValue"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1722:1: annotationElementValue : ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer );
    public final SSQSA_JavaParser.annotationElementValue_return annotationElementValue() throws RecognitionException {
        SSQSA_JavaParser.annotationElementValue_return retval = new SSQSA_JavaParser.annotationElementValue_return();
        retval.start = input.LT(1);
        int annotationElementValue_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.annotationElementValueExpression_return annotationElementValueExpression249 = null;

        SSQSA_JavaParser.annotation_return annotation250 = null;

        SSQSA_JavaParser.annotationElementValueArrayInitializer_return annotationElementValueArrayInitializer251 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1724:5: ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer )
            int alt87=3;
            switch ( input.LA(1) ) {
            case DEC:
            case INC:
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case MINUS:
            case NOT:
            case PLUS:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case IDENT:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt87=1;
                }
                break;
            case AT:
                {
                alt87=2;
                }
                break;
            case LCURLY:
                {
                alt87=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;
            }

            switch (alt87) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1724:9: annotationElementValueExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationElementValueExpression_in_annotationElementValue9689);
                    annotationElementValueExpression249=annotationElementValueExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValueExpression249.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1726:9: annotation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_annotationElementValue9700);
                    annotation250=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation250.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1728:9: annotationElementValueArrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationElementValueArrayInitializer_in_annotationElementValue9711);
                    annotationElementValueArrayInitializer251=annotationElementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValueArrayInitializer251.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, annotationElementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationElementValue"

    public static class annotationElementValueExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationElementValueExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1734:1: annotationElementValueExpression : conditionalExpression ;
    public final SSQSA_JavaParser.annotationElementValueExpression_return annotationElementValueExpression() throws RecognitionException {
        SSQSA_JavaParser.annotationElementValueExpression_return retval = new SSQSA_JavaParser.annotationElementValueExpression_return();
        retval.start = input.LT(1);
        int annotationElementValueExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.conditionalExpression_return conditionalExpression252 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1736:5: ( conditionalExpression )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1736:9: conditionalExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_annotationElementValueExpression9738);
            conditionalExpression252=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression252.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, annotationElementValueExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationElementValueExpression"

    public static class annotationElementValueArrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationElementValueArrayInitializer"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1744:1: annotationElementValueArrayInitializer : LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY ;
    public final SSQSA_JavaParser.annotationElementValueArrayInitializer_return annotationElementValueArrayInitializer() throws RecognitionException {
        SSQSA_JavaParser.annotationElementValueArrayInitializer_return retval = new SSQSA_JavaParser.annotationElementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int annotationElementValueArrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY253=null;
        Token COMMA255=null;
        Token COMMA257=null;
        Token RCURLY258=null;
        SSQSA_JavaParser.annotationElementValue_return annotationElementValue254 = null;

        SSQSA_JavaParser.annotationElementValue_return annotationElementValue256 = null;


        CommonTree LCURLY253_tree=null;
        CommonTree COMMA255_tree=null;
        CommonTree COMMA257_tree=null;
        CommonTree RCURLY258_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1746:5: ( LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1746:9: LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY
            {
            root_0 = (CommonTree)adaptor.nil();

            LCURLY253=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_annotationElementValueArrayInitializer9775); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LCURLY253_tree = (CommonTree)adaptor.create(LCURLY253);
            adaptor.addChild(root_0, LCURLY253_tree);
            }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1746:16: ( annotationElementValue ( COMMA annotationElementValue )* )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==AT||LA89_0==DEC||LA89_0==INC||LA89_0==LCURLY||LA89_0==LESS_THAN||LA89_0==LOGICAL_NOT||(LA89_0>=LPAREN && LA89_0<=MINUS)||LA89_0==NOT||LA89_0==PLUS||LA89_0==BOOLEAN||LA89_0==BYTE||LA89_0==CHAR||LA89_0==DOUBLE||LA89_0==FALSE||LA89_0==FLOAT||(LA89_0>=INT && LA89_0<=LONG)||(LA89_0>=NEW && LA89_0<=NULL)||LA89_0==SHORT||LA89_0==SUPER||LA89_0==THIS||LA89_0==TRUE||LA89_0==VOID||(LA89_0>=IDENT && LA89_0<=STRING_LITERAL)) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1746:17: annotationElementValue ( COMMA annotationElementValue )*
                    {
                    pushFollow(FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer9778);
                    annotationElementValue254=annotationElementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValue254.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1746:40: ( COMMA annotationElementValue )*
                    loop88:
                    do {
                        int alt88=2;
                        int LA88_0 = input.LA(1);

                        if ( (LA88_0==COMMA) ) {
                            int LA88_1 = input.LA(2);

                            if ( (LA88_1==AT||LA88_1==DEC||LA88_1==INC||LA88_1==LCURLY||LA88_1==LESS_THAN||LA88_1==LOGICAL_NOT||(LA88_1>=LPAREN && LA88_1<=MINUS)||LA88_1==NOT||LA88_1==PLUS||LA88_1==BOOLEAN||LA88_1==BYTE||LA88_1==CHAR||LA88_1==DOUBLE||LA88_1==FALSE||LA88_1==FLOAT||(LA88_1>=INT && LA88_1<=LONG)||(LA88_1>=NEW && LA88_1<=NULL)||LA88_1==SHORT||LA88_1==SUPER||LA88_1==THIS||LA88_1==TRUE||LA88_1==VOID||(LA88_1>=IDENT && LA88_1<=STRING_LITERAL)) ) {
                                alt88=1;
                            }


                        }


                        switch (alt88) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1746:41: COMMA annotationElementValue
                    	    {
                    	    COMMA255=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationElementValueArrayInitializer9781); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA255_tree = (CommonTree)adaptor.create(COMMA255);
                    	    adaptor.addChild(root_0, COMMA255_tree);
                    	    }
                    	    pushFollow(FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer9783);
                    	    annotationElementValue256=annotationElementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValue256.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop88;
                        }
                    } while (true);


                    }
                    break;

            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1746:74: ( COMMA )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==COMMA) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1746:75: COMMA
                    {
                    COMMA257=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationElementValueArrayInitializer9790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA257_tree = (CommonTree)adaptor.create(COMMA257);
                    adaptor.addChild(root_0, COMMA257_tree);
                    }

                    }
                    break;

            }

            RCURLY258=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_annotationElementValueArrayInitializer9794); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RCURLY258_tree = (CommonTree)adaptor.create(RCURLY258);
            adaptor.addChild(root_0, RCURLY258_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, annotationElementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationElementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1754:1: annotationTypeDeclaration : AT INTERFACE IDENT annotationBody ;
    public final SSQSA_JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration() throws RecognitionException {
        SSQSA_JavaParser.annotationTypeDeclaration_return retval = new SSQSA_JavaParser.annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AT259=null;
        Token INTERFACE260=null;
        Token IDENT261=null;
        SSQSA_JavaParser.annotationBody_return annotationBody262 = null;


        CommonTree AT259_tree=null;
        CommonTree INTERFACE260_tree=null;
        CommonTree IDENT261_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1756:5: ( AT INTERFACE IDENT annotationBody )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1756:9: AT INTERFACE IDENT annotationBody
            {
            root_0 = (CommonTree)adaptor.nil();

            AT259=(Token)match(input,AT,FOLLOW_AT_in_annotationTypeDeclaration9832); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AT259_tree = (CommonTree)adaptor.create(AT259);
            adaptor.addChild(root_0, AT259_tree);
            }
            INTERFACE260=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_annotationTypeDeclaration9834); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTERFACE260_tree = (CommonTree)adaptor.create(INTERFACE260);
            adaptor.addChild(root_0, INTERFACE260_tree);
            }
            IDENT261=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationTypeDeclaration9836); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT261_tree = (CommonTree)adaptor.create(IDENT261);
            adaptor.addChild(root_0, IDENT261_tree);
            }
            pushFollow(FOLLOW_annotationBody_in_annotationTypeDeclaration9838);
            annotationBody262=annotationBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationBody262.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationBody"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1764:1: annotationBody : LCURLY ( annotationScopeDeclarations )* RCURLY ;
    public final SSQSA_JavaParser.annotationBody_return annotationBody() throws RecognitionException {
        SSQSA_JavaParser.annotationBody_return retval = new SSQSA_JavaParser.annotationBody_return();
        retval.start = input.LT(1);
        int annotationBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY263=null;
        Token RCURLY265=null;
        SSQSA_JavaParser.annotationScopeDeclarations_return annotationScopeDeclarations264 = null;


        CommonTree LCURLY263_tree=null;
        CommonTree RCURLY265_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1766:5: ( LCURLY ( annotationScopeDeclarations )* RCURLY )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1766:9: LCURLY ( annotationScopeDeclarations )* RCURLY
            {
            root_0 = (CommonTree)adaptor.nil();

            LCURLY263=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_annotationBody9875); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LCURLY263_tree = (CommonTree)adaptor.create(LCURLY263);
            adaptor.addChild(root_0, LCURLY263_tree);
            }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1766:16: ( annotationScopeDeclarations )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==AT||LA91_0==LESS_THAN||LA91_0==ABSTRACT||LA91_0==BOOLEAN||LA91_0==BYTE||(LA91_0>=CHAR && LA91_0<=CLASS)||LA91_0==DOUBLE||LA91_0==ENUM||LA91_0==FINAL||LA91_0==FLOAT||LA91_0==INTERFACE||(LA91_0>=INT && LA91_0<=NATIVE)||(LA91_0>=PRIVATE && LA91_0<=PUBLIC)||(LA91_0>=SHORT && LA91_0<=STRICTFP)||LA91_0==SYNCHRONIZED||LA91_0==TRANSIENT||(LA91_0>=VOID && LA91_0<=VOLATILE)||LA91_0==IDENT) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: annotationScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_annotationScopeDeclarations_in_annotationBody9877);
            	    annotationScopeDeclarations264=annotationScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationScopeDeclarations264.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);

            RCURLY265=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_annotationBody9880); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RCURLY265_tree = (CommonTree)adaptor.create(RCURLY265);
            adaptor.addChild(root_0, RCURLY265_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, annotationBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationBody"

    public static class annotationScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationScopeDeclarations"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1774:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI ) | typeDeclaration );
    public final SSQSA_JavaParser.annotationScopeDeclarations_return annotationScopeDeclarations() throws RecognitionException {
        SSQSA_JavaParser.annotationScopeDeclarations_return retval = new SSQSA_JavaParser.annotationScopeDeclarations_return();
        retval.start = input.LT(1);
        int annotationScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT268=null;
        Token LPAREN269=null;
        Token RPAREN270=null;
        Token SEMI272=null;
        Token SEMI274=null;
        SSQSA_JavaParser.modifierList_return modifierList266 = null;

        SSQSA_JavaParser.type_return type267 = null;

        SSQSA_JavaParser.annotationDefaultValue_return annotationDefaultValue271 = null;

        SSQSA_JavaParser.classFieldDeclaratorList_return classFieldDeclaratorList273 = null;

        SSQSA_JavaParser.typeDeclaration_return typeDeclaration275 = null;


        CommonTree IDENT268_tree=null;
        CommonTree LPAREN269_tree=null;
        CommonTree RPAREN270_tree=null;
        CommonTree SEMI272_tree=null;
        CommonTree SEMI274_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1776:5: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI ) | typeDeclaration )
            int alt94=2;
            alt94 = dfa94.predict(input);
            switch (alt94) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1776:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_modifierList_in_annotationScopeDeclarations9917);
                    modifierList266=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifierList266.getTree());
                    pushFollow(FOLLOW_type_in_annotationScopeDeclarations9919);
                    type267=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type267.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1778:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==IDENT) ) {
                        int LA93_1 = input.LA(2);

                        if ( (LA93_1==LPAREN) ) {
                            alt93=1;
                        }
                        else if ( (LA93_1==ASSIGN||LA93_1==COMMA||LA93_1==LBRACK||LA93_1==SEMI) ) {
                            alt93=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 93, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 93, 0, input);

                        throw nvae;
                    }
                    switch (alt93) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1778:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
                            {
                            IDENT268=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationScopeDeclarations9934); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            IDENT268_tree = (CommonTree)adaptor.create(IDENT268);
                            adaptor.addChild(root_0, IDENT268_tree);
                            }
                            LPAREN269=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationScopeDeclarations9936); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN269_tree = (CommonTree)adaptor.create(LPAREN269);
                            adaptor.addChild(root_0, LPAREN269_tree);
                            }
                            RPAREN270=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationScopeDeclarations9938); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN270_tree = (CommonTree)adaptor.create(RPAREN270);
                            adaptor.addChild(root_0, RPAREN270_tree);
                            }
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1778:33: ( annotationDefaultValue )?
                            int alt92=2;
                            int LA92_0 = input.LA(1);

                            if ( (LA92_0==DEFAULT) ) {
                                alt92=1;
                            }
                            switch (alt92) {
                                case 1 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: annotationDefaultValue
                                    {
                                    pushFollow(FOLLOW_annotationDefaultValue_in_annotationScopeDeclarations9940);
                                    annotationDefaultValue271=annotationDefaultValue();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationDefaultValue271.getTree());

                                    }
                                    break;

                            }

                            SEMI272=(Token)match(input,SEMI,FOLLOW_SEMI_in_annotationScopeDeclarations9943); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEMI272_tree = (CommonTree)adaptor.create(SEMI272);
                            adaptor.addChild(root_0, SEMI272_tree);
                            }

                            }
                            break;
                        case 2 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1782:13: classFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_classFieldDeclaratorList_in_annotationScopeDeclarations9972);
                            classFieldDeclaratorList273=classFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classFieldDeclaratorList273.getTree());
                            SEMI274=(Token)match(input,SEMI,FOLLOW_SEMI_in_annotationScopeDeclarations9974); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEMI274_tree = (CommonTree)adaptor.create(SEMI274);
                            adaptor.addChild(root_0, SEMI274_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1788:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_annotationScopeDeclarations10010);
                    typeDeclaration275=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration275.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, annotationScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationScopeDeclarations"

    public static class annotationDefaultValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationDefaultValue"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1794:1: annotationDefaultValue : DEFAULT annotationElementValue ;
    public final SSQSA_JavaParser.annotationDefaultValue_return annotationDefaultValue() throws RecognitionException {
        SSQSA_JavaParser.annotationDefaultValue_return retval = new SSQSA_JavaParser.annotationDefaultValue_return();
        retval.start = input.LT(1);
        int annotationDefaultValue_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DEFAULT276=null;
        SSQSA_JavaParser.annotationElementValue_return annotationElementValue277 = null;


        CommonTree DEFAULT276_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1798:5: ( DEFAULT annotationElementValue )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1798:7: DEFAULT annotationElementValue
            {
            root_0 = (CommonTree)adaptor.nil();

            DEFAULT276=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_annotationDefaultValue10041); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFAULT276_tree = (CommonTree)adaptor.create(DEFAULT276);
            adaptor.addChild(root_0, DEFAULT276_tree);
            }
            pushFollow(FOLLOW_annotationElementValue_in_annotationDefaultValue10043);
            annotationElementValue277=annotationElementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValue277.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, annotationDefaultValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationDefaultValue"

    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1808:1: block : LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE ^( SEPARATOR LCURLY ) ( blockStatement )* ^( SEPARATOR RCURLY ) ) ;
    public final SSQSA_JavaParser.block_return block() throws RecognitionException {
        SSQSA_JavaParser.block_return retval = new SSQSA_JavaParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY278=null;
        Token RCURLY280=null;
        SSQSA_JavaParser.blockStatement_return blockStatement279 = null;


        CommonTree LCURLY278_tree=null;
        CommonTree RCURLY280_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1810:5: ( LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE ^( SEPARATOR LCURLY ) ( blockStatement )* ^( SEPARATOR RCURLY ) ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1810:9: LCURLY ( blockStatement )* RCURLY
            {
            LCURLY278=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_block10070); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY278);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1810:16: ( blockStatement )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==AT||LA95_0==DEC||LA95_0==INC||LA95_0==LCURLY||LA95_0==LESS_THAN||LA95_0==LOGICAL_NOT||(LA95_0>=LPAREN && LA95_0<=MINUS)||LA95_0==NOT||LA95_0==PLUS||LA95_0==SEMI||(LA95_0>=ABSTRACT && LA95_0<=BYTE)||(LA95_0>=CHAR && LA95_0<=CONTINUE)||(LA95_0>=DO && LA95_0<=DOUBLE)||LA95_0==ENUM||(LA95_0>=FALSE && LA95_0<=FINAL)||(LA95_0>=FLOAT && LA95_0<=IF)||LA95_0==INTERFACE||(LA95_0>=INT && LA95_0<=NULL)||(LA95_0>=PRIVATE && LA95_0<=THROW)||(LA95_0>=TRANSIENT && LA95_0<=WHILE)||(LA95_0>=IDENT && LA95_0<=STRING_LITERAL)) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block10072);
            	    blockStatement279=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement279.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);

            RCURLY280=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_block10075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY280);



            // AST REWRITE
            // elements: RCURLY, LCURLY, blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1812:9: -> ^( BLOCK_SCOPE ^( SEPARATOR LCURLY ) ( blockStatement )* ^( SEPARATOR RCURLY ) )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1812:13: ^( BLOCK_SCOPE ^( SEPARATOR LCURLY ) ( blockStatement )* ^( SEPARATOR RCURLY ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, "BLOCK_SCOPE"), root_1);

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1812:27: ^( SEPARATOR LCURLY )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_2);

                adaptor.addChild(root_2, stream_LCURLY.nextNode());

                adaptor.addChild(root_1, root_2);
                }
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1812:47: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1812:63: ^( SEPARATOR RCURLY )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_2);

                adaptor.addChild(root_2, stream_RCURLY.nextNode());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1818:1: blockStatement : ( localVariableDeclaration SEMI | typeDeclaration | statement );
    public final SSQSA_JavaParser.blockStatement_return blockStatement() throws RecognitionException {
        SSQSA_JavaParser.blockStatement_return retval = new SSQSA_JavaParser.blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI282=null;
        SSQSA_JavaParser.localVariableDeclaration_return localVariableDeclaration281 = null;

        SSQSA_JavaParser.typeDeclaration_return typeDeclaration283 = null;

        SSQSA_JavaParser.statement_return statement284 = null;


        CommonTree SEMI282_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1820:5: ( localVariableDeclaration SEMI | typeDeclaration | statement )
            int alt96=3;
            alt96 = dfa96.predict(input);
            switch (alt96) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1820:9: localVariableDeclaration SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_blockStatement10129);
                    localVariableDeclaration281=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration281.getTree());
                    SEMI282=(Token)match(input,SEMI,FOLLOW_SEMI_in_blockStatement10131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI282_tree = (CommonTree)adaptor.create(SEMI282);
                    adaptor.addChild(root_0, SEMI282_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1822:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_blockStatement10142);
                    typeDeclaration283=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration283.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1824:9: statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_blockStatement10153);
                    statement284=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement284.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclaration"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1842:1: localVariableDeclaration : localModifierList type localVariableInitialisation ( COMMA localVariableInitialisation )* -> ^( VAR_DECL localModifierList type localVariableInitialisation ( COMMA localVariableInitialisation )* ) ;
    public final SSQSA_JavaParser.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        SSQSA_JavaParser.localVariableDeclaration_return retval = new SSQSA_JavaParser.localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA288=null;
        SSQSA_JavaParser.localModifierList_return localModifierList285 = null;

        SSQSA_JavaParser.type_return type286 = null;

        SSQSA_JavaParser.localVariableInitialisation_return localVariableInitialisation287 = null;

        SSQSA_JavaParser.localVariableInitialisation_return localVariableInitialisation289 = null;


        CommonTree COMMA288_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_localVariableInitialisation=new RewriteRuleSubtreeStream(adaptor,"rule localVariableInitialisation");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1844:3: ( localModifierList type localVariableInitialisation ( COMMA localVariableInitialisation )* -> ^( VAR_DECL localModifierList type localVariableInitialisation ( COMMA localVariableInitialisation )* ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1844:5: localModifierList type localVariableInitialisation ( COMMA localVariableInitialisation )*
            {
            pushFollow(FOLLOW_localModifierList_in_localVariableDeclaration10188);
            localModifierList285=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList285.getTree());
            pushFollow(FOLLOW_type_in_localVariableDeclaration10190);
            type286=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type286.getTree());
            pushFollow(FOLLOW_localVariableInitialisation_in_localVariableDeclaration10192);
            localVariableInitialisation287=localVariableInitialisation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localVariableInitialisation.add(localVariableInitialisation287.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1844:56: ( COMMA localVariableInitialisation )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==COMMA) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1844:57: COMMA localVariableInitialisation
            	    {
            	    COMMA288=(Token)match(input,COMMA,FOLLOW_COMMA_in_localVariableDeclaration10195); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA288);

            	    pushFollow(FOLLOW_localVariableInitialisation_in_localVariableDeclaration10197);
            	    localVariableInitialisation289=localVariableInitialisation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_localVariableInitialisation.add(localVariableInitialisation289.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);



            // AST REWRITE
            // elements: localModifierList, localVariableInitialisation, localVariableInitialisation, type, COMMA
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1845:4: -> ^( VAR_DECL localModifierList type localVariableInitialisation ( COMMA localVariableInitialisation )* )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1845:7: ^( VAR_DECL localModifierList type localVariableInitialisation ( COMMA localVariableInitialisation )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECL, "VAR_DECL"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_localVariableInitialisation.nextTree());
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1845:69: ( COMMA localVariableInitialisation )*
                while ( stream_localVariableInitialisation.hasNext()||stream_COMMA.hasNext() ) {
                    adaptor.addChild(root_1, stream_COMMA.nextNode());
                    adaptor.addChild(root_1, stream_localVariableInitialisation.nextTree());

                }
                stream_localVariableInitialisation.reset();
                stream_COMMA.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class localVariableInitialisation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableInitialisation"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1848:1: localVariableInitialisation : variableDeclaratorId ( -> variableDeclaratorId | ( ASSIGN variableInitializer ) -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR ASSIGN variableDeclaratorId ^( VALUE variableInitializer ) ) ) ) ;
    public final SSQSA_JavaParser.localVariableInitialisation_return localVariableInitialisation() throws RecognitionException {
        SSQSA_JavaParser.localVariableInitialisation_return retval = new SSQSA_JavaParser.localVariableInitialisation_return();
        retval.start = input.LT(1);
        int localVariableInitialisation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN291=null;
        SSQSA_JavaParser.variableDeclaratorId_return variableDeclaratorId290 = null;

        SSQSA_JavaParser.variableInitializer_return variableInitializer292 = null;


        CommonTree ASSIGN291_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1849:1: ( variableDeclaratorId ( -> variableDeclaratorId | ( ASSIGN variableInitializer ) -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR ASSIGN variableDeclaratorId ^( VALUE variableInitializer ) ) ) ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1849:3: variableDeclaratorId ( -> variableDeclaratorId | ( ASSIGN variableInitializer ) -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR ASSIGN variableDeclaratorId ^( VALUE variableInitializer ) ) ) )
            {
            pushFollow(FOLLOW_variableDeclaratorId_in_localVariableInitialisation10230);
            variableDeclaratorId290=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId290.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1849:24: ( -> variableDeclaratorId | ( ASSIGN variableInitializer ) -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR ASSIGN variableDeclaratorId ^( VALUE variableInitializer ) ) ) )
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==EOF||LA98_0==COMMA||LA98_0==SEMI) ) {
                alt98=1;
            }
            else if ( (LA98_0==ASSIGN) ) {
                alt98=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1849:26: 
                    {

                    // AST REWRITE
                    // elements: variableDeclaratorId
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1849:26: -> variableDeclaratorId
                    {
                        adaptor.addChild(root_0, stream_variableDeclaratorId.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1850:3: ( ASSIGN variableInitializer )
                    {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1850:3: ( ASSIGN variableInitializer )
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1850:4: ASSIGN variableInitializer
                    {
                    ASSIGN291=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_localVariableInitialisation10241); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN291);

                    pushFollow(FOLLOW_variableInitializer_in_localVariableInitialisation10243);
                    variableInitializer292=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer292.getTree());

                    }



                    // AST REWRITE
                    // elements: variableDeclaratorId, variableInitializer, ASSIGN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1850:32: -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR ASSIGN variableDeclaratorId ^( VALUE variableInitializer ) ) )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1850:35: ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR ASSIGN variableDeclaratorId ^( VALUE variableInitializer ) ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGNMENT_STATEMENT, "ASSIGNMENT_STATEMENT"), root_1);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1850:58: ^( ASSIGN_OPERATOR ASSIGN variableDeclaratorId ^( VALUE variableInitializer ) )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGN_OPERATOR, "ASSIGN_OPERATOR"), root_2);

                        adaptor.addChild(root_2, stream_ASSIGN.nextNode());
                        adaptor.addChild(root_2, stream_variableDeclaratorId.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1850:104: ^( VALUE variableInitializer )
                        {
                        CommonTree root_3 = (CommonTree)adaptor.nil();
                        root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VALUE, "VALUE"), root_3);

                        adaptor.addChild(root_3, stream_variableInitializer.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, localVariableInitialisation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableInitialisation"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1856:1: statement : ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( BRANCH_STATEMENT ^( BRANCH ^( KEYWORD IF ) ^( CONDITION parenthesizedExpression ) ^( BLOCK_SCOPE $ifStat) ) ^( BRANCH ^( KEYWORD ELSE ) ^( BLOCK_SCOPE $elseStat) ) ) | -> ^( BRANCH_STATEMENT ^( BRANCH ^( KEYWORD IF ) ^( CONDITION parenthesizedExpression ) ^( BLOCK_SCOPE $ifStat) ) ) ) | FOR LPAREN ( ( forInit )? SEMI ( forCondition )? SEMI ( forUpdater )? RPAREN statement -> ^( LOOP_STATEMENT ^( KEYWORD FOR ) ( ^( INIT forInit ) )? ( ^( CONDITION forCondition ) )? ( ^( STEP forUpdater ) )? statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( LOOP_STATEMENT ^( KEYWORD FOR_EACH[$FOR, \"FOR_EACH\"] ) ^( CONDITION localModifierList type ^( NAME IDENT ) expression ) statement ) ) | WHILE parenthesizedExpression statement -> ^( LOOP_STATEMENT ^( KEYWORD WHILE ) ^( CONDITION parenthesizedExpression ) statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( LOOP_STATEMENT ^( KEYWORD DO ) statement ^( CONDITION parenthesizedExpression ) ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( BRANCH_STATEMENT TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( BRANCH_STATEMENT ^( KEYWORD SWITCH ) ^( CONDITION parenthesizedExpression ) LCURLY switchBlockLabels RCURLY ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( JUMP_STATEMENT ^( KEYWORD RETURN ) ( expression )? ) | THROW expression SEMI -> ^( JUMP_STATEMENT ^( KEYWORD THROW ) expression ) | BREAK ( IDENT )? SEMI -> ^( JUMP_STATEMENT ^( KEYWORD BREAK ) ( ^( NAME IDENT ) )? ) | CONTINUE ( IDENT )? SEMI -> ^( JUMP_STATEMENT ^( KEYWORD CONTINUE ) ( ^( NAME IDENT ) )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT ^( NAME IDENT ) statement ) | expression SEMI | SEMI );
    public final SSQSA_JavaParser.statement_return statement() throws RecognitionException {
        SSQSA_JavaParser.statement_return retval = new SSQSA_JavaParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSERT294=null;
        Token COLON295=null;
        Token SEMI296=null;
        Token SEMI297=null;
        Token IF298=null;
        Token ELSE300=null;
        Token FOR301=null;
        Token LPAREN302=null;
        Token SEMI304=null;
        Token SEMI306=null;
        Token RPAREN308=null;
        Token IDENT312=null;
        Token COLON313=null;
        Token RPAREN315=null;
        Token WHILE317=null;
        Token DO320=null;
        Token WHILE322=null;
        Token SEMI324=null;
        Token TRY325=null;
        Token SWITCH330=null;
        Token LCURLY332=null;
        Token RCURLY334=null;
        Token SYNCHRONIZED335=null;
        Token RETURN338=null;
        Token SEMI340=null;
        Token THROW341=null;
        Token SEMI343=null;
        Token BREAK344=null;
        Token IDENT345=null;
        Token SEMI346=null;
        Token CONTINUE347=null;
        Token IDENT348=null;
        Token SEMI349=null;
        Token IDENT350=null;
        Token COLON351=null;
        Token SEMI354=null;
        Token SEMI355=null;
        SSQSA_JavaParser.expression_return expr1 = null;

        SSQSA_JavaParser.expression_return expr2 = null;

        SSQSA_JavaParser.statement_return ifStat = null;

        SSQSA_JavaParser.statement_return elseStat = null;

        SSQSA_JavaParser.block_return block293 = null;

        SSQSA_JavaParser.parenthesizedExpression_return parenthesizedExpression299 = null;

        SSQSA_JavaParser.forInit_return forInit303 = null;

        SSQSA_JavaParser.forCondition_return forCondition305 = null;

        SSQSA_JavaParser.forUpdater_return forUpdater307 = null;

        SSQSA_JavaParser.statement_return statement309 = null;

        SSQSA_JavaParser.localModifierList_return localModifierList310 = null;

        SSQSA_JavaParser.type_return type311 = null;

        SSQSA_JavaParser.expression_return expression314 = null;

        SSQSA_JavaParser.statement_return statement316 = null;

        SSQSA_JavaParser.parenthesizedExpression_return parenthesizedExpression318 = null;

        SSQSA_JavaParser.statement_return statement319 = null;

        SSQSA_JavaParser.statement_return statement321 = null;

        SSQSA_JavaParser.parenthesizedExpression_return parenthesizedExpression323 = null;

        SSQSA_JavaParser.block_return block326 = null;

        SSQSA_JavaParser.catches_return catches327 = null;

        SSQSA_JavaParser.finallyClause_return finallyClause328 = null;

        SSQSA_JavaParser.finallyClause_return finallyClause329 = null;

        SSQSA_JavaParser.parenthesizedExpression_return parenthesizedExpression331 = null;

        SSQSA_JavaParser.switchBlockLabels_return switchBlockLabels333 = null;

        SSQSA_JavaParser.parenthesizedExpression_return parenthesizedExpression336 = null;

        SSQSA_JavaParser.block_return block337 = null;

        SSQSA_JavaParser.expression_return expression339 = null;

        SSQSA_JavaParser.expression_return expression342 = null;

        SSQSA_JavaParser.statement_return statement352 = null;

        SSQSA_JavaParser.expression_return expression353 = null;


        CommonTree ASSERT294_tree=null;
        CommonTree COLON295_tree=null;
        CommonTree SEMI296_tree=null;
        CommonTree SEMI297_tree=null;
        CommonTree IF298_tree=null;
        CommonTree ELSE300_tree=null;
        CommonTree FOR301_tree=null;
        CommonTree LPAREN302_tree=null;
        CommonTree SEMI304_tree=null;
        CommonTree SEMI306_tree=null;
        CommonTree RPAREN308_tree=null;
        CommonTree IDENT312_tree=null;
        CommonTree COLON313_tree=null;
        CommonTree RPAREN315_tree=null;
        CommonTree WHILE317_tree=null;
        CommonTree DO320_tree=null;
        CommonTree WHILE322_tree=null;
        CommonTree SEMI324_tree=null;
        CommonTree TRY325_tree=null;
        CommonTree SWITCH330_tree=null;
        CommonTree LCURLY332_tree=null;
        CommonTree RCURLY334_tree=null;
        CommonTree SYNCHRONIZED335_tree=null;
        CommonTree RETURN338_tree=null;
        CommonTree SEMI340_tree=null;
        CommonTree THROW341_tree=null;
        CommonTree SEMI343_tree=null;
        CommonTree BREAK344_tree=null;
        CommonTree IDENT345_tree=null;
        CommonTree SEMI346_tree=null;
        CommonTree CONTINUE347_tree=null;
        CommonTree IDENT348_tree=null;
        CommonTree SEMI349_tree=null;
        CommonTree IDENT350_tree=null;
        CommonTree COLON351_tree=null;
        CommonTree SEMI354_tree=null;
        CommonTree SEMI355_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SYNCHRONIZED=new RewriteRuleTokenStream(adaptor,"token SYNCHRONIZED");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_CONTINUE=new RewriteRuleTokenStream(adaptor,"token CONTINUE");
        RewriteRuleTokenStream stream_SWITCH=new RewriteRuleTokenStream(adaptor,"token SWITCH");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_ASSERT=new RewriteRuleTokenStream(adaptor,"token ASSERT");
        RewriteRuleTokenStream stream_BREAK=new RewriteRuleTokenStream(adaptor,"token BREAK");
        RewriteRuleTokenStream stream_THROW=new RewriteRuleTokenStream(adaptor,"token THROW");
        RewriteRuleTokenStream stream_TRY=new RewriteRuleTokenStream(adaptor,"token TRY");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_finallyClause=new RewriteRuleSubtreeStream(adaptor,"rule finallyClause");
        RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
        RewriteRuleSubtreeStream stream_forUpdater=new RewriteRuleSubtreeStream(adaptor,"rule forUpdater");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_forCondition=new RewriteRuleSubtreeStream(adaptor,"rule forCondition");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_switchBlockLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockLabels");
        RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1858:5: ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( BRANCH_STATEMENT ^( BRANCH ^( KEYWORD IF ) ^( CONDITION parenthesizedExpression ) ^( BLOCK_SCOPE $ifStat) ) ^( BRANCH ^( KEYWORD ELSE ) ^( BLOCK_SCOPE $elseStat) ) ) | -> ^( BRANCH_STATEMENT ^( BRANCH ^( KEYWORD IF ) ^( CONDITION parenthesizedExpression ) ^( BLOCK_SCOPE $ifStat) ) ) ) | FOR LPAREN ( ( forInit )? SEMI ( forCondition )? SEMI ( forUpdater )? RPAREN statement -> ^( LOOP_STATEMENT ^( KEYWORD FOR ) ( ^( INIT forInit ) )? ( ^( CONDITION forCondition ) )? ( ^( STEP forUpdater ) )? statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( LOOP_STATEMENT ^( KEYWORD FOR_EACH[$FOR, \"FOR_EACH\"] ) ^( CONDITION localModifierList type ^( NAME IDENT ) expression ) statement ) ) | WHILE parenthesizedExpression statement -> ^( LOOP_STATEMENT ^( KEYWORD WHILE ) ^( CONDITION parenthesizedExpression ) statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( LOOP_STATEMENT ^( KEYWORD DO ) statement ^( CONDITION parenthesizedExpression ) ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( BRANCH_STATEMENT TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( BRANCH_STATEMENT ^( KEYWORD SWITCH ) ^( CONDITION parenthesizedExpression ) LCURLY switchBlockLabels RCURLY ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( JUMP_STATEMENT ^( KEYWORD RETURN ) ( expression )? ) | THROW expression SEMI -> ^( JUMP_STATEMENT ^( KEYWORD THROW ) expression ) | BREAK ( IDENT )? SEMI -> ^( JUMP_STATEMENT ^( KEYWORD BREAK ) ( ^( NAME IDENT ) )? ) | CONTINUE ( IDENT )? SEMI -> ^( JUMP_STATEMENT ^( KEYWORD CONTINUE ) ( ^( NAME IDENT ) )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT ^( NAME IDENT ) statement ) | expression SEMI | SEMI )
            int alt110=16;
            alt110 = dfa110.predict(input);
            switch (alt110) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1858:9: block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_block_in_statement10290);
                    block293=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block293.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1860:9: ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
                    {
                    ASSERT294=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_statement10301); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSERT.add(ASSERT294);

                    pushFollow(FOLLOW_expression_in_statement10305);
                    expr1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expr1.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1862:9: ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==COLON) ) {
                        alt99=1;
                    }
                    else if ( (LA99_0==SEMI) ) {
                        alt99=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 99, 0, input);

                        throw nvae;
                    }
                    switch (alt99) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1862:13: COLON expr2= expression SEMI
                            {
                            COLON295=(Token)match(input,COLON,FOLLOW_COLON_in_statement10321); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON295);

                            pushFollow(FOLLOW_expression_in_statement10325);
                            expr2=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expr2.getTree());
                            SEMI296=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10327); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI296);



                            // AST REWRITE
                            // elements: expr2, expr1, ASSERT
                            // token labels: 
                            // rule labels: retval, expr1, expr2
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.tree:null);
                            RewriteRuleSubtreeStream stream_expr2=new RewriteRuleSubtreeStream(adaptor,"rule expr2",expr2!=null?expr2.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1862:77: -> ^( ASSERT $expr1 $expr2)
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1862:81: ^( ASSERT $expr1 $expr2)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSERT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_expr1.nextTree());
                                adaptor.addChild(root_1, stream_expr2.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1864:13: SEMI
                            {
                            SEMI297=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10391); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI297);



                            // AST REWRITE
                            // elements: expr1, ASSERT
                            // token labels: 
                            // rule labels: retval, expr1
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1864:77: -> ^( ASSERT $expr1)
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1864:81: ^( ASSERT $expr1)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSERT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_expr1.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1868:9: IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( BRANCH_STATEMENT ^( BRANCH ^( KEYWORD IF ) ^( CONDITION parenthesizedExpression ) ^( BLOCK_SCOPE $ifStat) ) ^( BRANCH ^( KEYWORD ELSE ) ^( BLOCK_SCOPE $elseStat) ) ) | -> ^( BRANCH_STATEMENT ^( BRANCH ^( KEYWORD IF ) ^( CONDITION parenthesizedExpression ) ^( BLOCK_SCOPE $ifStat) ) ) )
                    {
                    IF298=(Token)match(input,IF,FOLLOW_IF_in_statement10482); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IF.add(IF298);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement10484);
                    parenthesizedExpression299=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression299.getTree());
                    pushFollow(FOLLOW_statement_in_statement10488);
                    ifStat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(ifStat.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1870:9: ( ELSE elseStat= statement -> ^( BRANCH_STATEMENT ^( BRANCH ^( KEYWORD IF ) ^( CONDITION parenthesizedExpression ) ^( BLOCK_SCOPE $ifStat) ) ^( BRANCH ^( KEYWORD ELSE ) ^( BLOCK_SCOPE $elseStat) ) ) | -> ^( BRANCH_STATEMENT ^( BRANCH ^( KEYWORD IF ) ^( CONDITION parenthesizedExpression ) ^( BLOCK_SCOPE $ifStat) ) ) )
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==ELSE) ) {
                        int LA100_1 = input.LA(2);

                        if ( (synpred131_SSQSA_Java()) ) {
                            alt100=1;
                        }
                        else if ( (true) ) {
                            alt100=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 100, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA100_0==EOF||LA100_0==AT||LA100_0==DEC||LA100_0==INC||LA100_0==LCURLY||LA100_0==LESS_THAN||LA100_0==LOGICAL_NOT||(LA100_0>=LPAREN && LA100_0<=MINUS)||LA100_0==NOT||LA100_0==PLUS||LA100_0==RCURLY||LA100_0==SEMI||(LA100_0>=ABSTRACT && LA100_0<=CASE)||(LA100_0>=CHAR && LA100_0<=DOUBLE)||LA100_0==ENUM||(LA100_0>=FALSE && LA100_0<=FINAL)||(LA100_0>=FLOAT && LA100_0<=IF)||LA100_0==INTERFACE||(LA100_0>=INT && LA100_0<=NULL)||(LA100_0>=PRIVATE && LA100_0<=THROW)||(LA100_0>=TRANSIENT && LA100_0<=WHILE)||(LA100_0>=IDENT && LA100_0<=STRING_LITERAL)) ) {
                        alt100=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 100, 0, input);

                        throw nvae;
                    }
                    switch (alt100) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1870:13: ELSE elseStat= statement
                            {
                            ELSE300=(Token)match(input,ELSE,FOLLOW_ELSE_in_statement10504); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ELSE.add(ELSE300);

                            pushFollow(FOLLOW_statement_in_statement10508);
                            elseStat=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(elseStat.getTree());


                            // AST REWRITE
                            // elements: ELSE, ifStat, IF, elseStat, parenthesizedExpression
                            // token labels: 
                            // rule labels: retval, ifStat, elseStat
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.tree:null);
                            RewriteRuleSubtreeStream stream_elseStat=new RewriteRuleSubtreeStream(adaptor,"rule elseStat",elseStat!=null?elseStat.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1870:77: -> ^( BRANCH_STATEMENT ^( BRANCH ^( KEYWORD IF ) ^( CONDITION parenthesizedExpression ) ^( BLOCK_SCOPE $ifStat) ) ^( BRANCH ^( KEYWORD ELSE ) ^( BLOCK_SCOPE $elseStat) ) )
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1870:81: ^( BRANCH_STATEMENT ^( BRANCH ^( KEYWORD IF ) ^( CONDITION parenthesizedExpression ) ^( BLOCK_SCOPE $ifStat) ) ^( BRANCH ^( KEYWORD ELSE ) ^( BLOCK_SCOPE $elseStat) ) )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH_STATEMENT, "BRANCH_STATEMENT"), root_1);

                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1870:100: ^( BRANCH ^( KEYWORD IF ) ^( CONDITION parenthesizedExpression ) ^( BLOCK_SCOPE $ifStat) )
                                {
                                CommonTree root_2 = (CommonTree)adaptor.nil();
                                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH, "BRANCH"), root_2);

                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1870:109: ^( KEYWORD IF )
                                {
                                CommonTree root_3 = (CommonTree)adaptor.nil();
                                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_3);

                                adaptor.addChild(root_3, stream_IF.nextNode());

                                adaptor.addChild(root_2, root_3);
                                }
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1870:123: ^( CONDITION parenthesizedExpression )
                                {
                                CommonTree root_3 = (CommonTree)adaptor.nil();
                                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONDITION, "CONDITION"), root_3);

                                adaptor.addChild(root_3, stream_parenthesizedExpression.nextTree());

                                adaptor.addChild(root_2, root_3);
                                }
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1870:160: ^( BLOCK_SCOPE $ifStat)
                                {
                                CommonTree root_3 = (CommonTree)adaptor.nil();
                                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, "BLOCK_SCOPE"), root_3);

                                adaptor.addChild(root_3, stream_ifStat.nextTree());

                                adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                                }
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1870:184: ^( BRANCH ^( KEYWORD ELSE ) ^( BLOCK_SCOPE $elseStat) )
                                {
                                CommonTree root_2 = (CommonTree)adaptor.nil();
                                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH, "BRANCH"), root_2);

                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1870:193: ^( KEYWORD ELSE )
                                {
                                CommonTree root_3 = (CommonTree)adaptor.nil();
                                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_3);

                                adaptor.addChild(root_3, stream_ELSE.nextNode());

                                adaptor.addChild(root_2, root_3);
                                }
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1870:209: ^( BLOCK_SCOPE $elseStat)
                                {
                                CommonTree root_3 = (CommonTree)adaptor.nil();
                                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, "BLOCK_SCOPE"), root_3);

                                adaptor.addChild(root_3, stream_elseStat.nextTree());

                                adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1872:77: 
                            {

                            // AST REWRITE
                            // elements: ifStat, IF, parenthesizedExpression
                            // token labels: 
                            // rule labels: retval, ifStat
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1872:77: -> ^( BRANCH_STATEMENT ^( BRANCH ^( KEYWORD IF ) ^( CONDITION parenthesizedExpression ) ^( BLOCK_SCOPE $ifStat) ) )
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1872:81: ^( BRANCH_STATEMENT ^( BRANCH ^( KEYWORD IF ) ^( CONDITION parenthesizedExpression ) ^( BLOCK_SCOPE $ifStat) ) )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH_STATEMENT, "BRANCH_STATEMENT"), root_1);

                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1872:100: ^( BRANCH ^( KEYWORD IF ) ^( CONDITION parenthesizedExpression ) ^( BLOCK_SCOPE $ifStat) )
                                {
                                CommonTree root_2 = (CommonTree)adaptor.nil();
                                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH, "BRANCH"), root_2);

                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1872:109: ^( KEYWORD IF )
                                {
                                CommonTree root_3 = (CommonTree)adaptor.nil();
                                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_3);

                                adaptor.addChild(root_3, stream_IF.nextNode());

                                adaptor.addChild(root_2, root_3);
                                }
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1872:123: ^( CONDITION parenthesizedExpression )
                                {
                                CommonTree root_3 = (CommonTree)adaptor.nil();
                                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONDITION, "CONDITION"), root_3);

                                adaptor.addChild(root_3, stream_parenthesizedExpression.nextTree());

                                adaptor.addChild(root_2, root_3);
                                }
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1872:160: ^( BLOCK_SCOPE $ifStat)
                                {
                                CommonTree root_3 = (CommonTree)adaptor.nil();
                                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, "BLOCK_SCOPE"), root_3);

                                adaptor.addChild(root_3, stream_ifStat.nextTree());

                                adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1876:9: FOR LPAREN ( ( forInit )? SEMI ( forCondition )? SEMI ( forUpdater )? RPAREN statement -> ^( LOOP_STATEMENT ^( KEYWORD FOR ) ( ^( INIT forInit ) )? ( ^( CONDITION forCondition ) )? ( ^( STEP forUpdater ) )? statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( LOOP_STATEMENT ^( KEYWORD FOR_EACH[$FOR, \"FOR_EACH\"] ) ^( CONDITION localModifierList type ^( NAME IDENT ) expression ) statement ) )
                    {
                    FOR301=(Token)match(input,FOR,FOLLOW_FOR_in_statement10728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOR.add(FOR301);

                    LPAREN302=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_statement10730); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN302);

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:9: ( ( forInit )? SEMI ( forCondition )? SEMI ( forUpdater )? RPAREN statement -> ^( LOOP_STATEMENT ^( KEYWORD FOR ) ( ^( INIT forInit ) )? ( ^( CONDITION forCondition ) )? ( ^( STEP forUpdater ) )? statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( LOOP_STATEMENT ^( KEYWORD FOR_EACH[$FOR, \"FOR_EACH\"] ) ^( CONDITION localModifierList type ^( NAME IDENT ) expression ) statement ) )
                    int alt104=2;
                    alt104 = dfa104.predict(input);
                    switch (alt104) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:13: ( forInit )? SEMI ( forCondition )? SEMI ( forUpdater )? RPAREN statement
                            {
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:13: ( forInit )?
                            int alt101=2;
                            int LA101_0 = input.LA(1);

                            if ( (LA101_0==AT||LA101_0==DEC||LA101_0==INC||LA101_0==LESS_THAN||LA101_0==LOGICAL_NOT||(LA101_0>=LPAREN && LA101_0<=MINUS)||LA101_0==NOT||LA101_0==PLUS||LA101_0==BOOLEAN||LA101_0==BYTE||LA101_0==CHAR||LA101_0==DOUBLE||(LA101_0>=FALSE && LA101_0<=FINAL)||LA101_0==FLOAT||(LA101_0>=INT && LA101_0<=LONG)||(LA101_0>=NEW && LA101_0<=NULL)||LA101_0==SHORT||LA101_0==SUPER||LA101_0==THIS||LA101_0==TRUE||LA101_0==VOID||(LA101_0>=IDENT && LA101_0<=STRING_LITERAL)) ) {
                                alt101=1;
                            }
                            else if ( (LA101_0==SEMI) ) {
                                int LA101_2 = input.LA(2);

                                if ( (synpred133_SSQSA_Java()) ) {
                                    alt101=1;
                                }
                            }
                            switch (alt101) {
                                case 1 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: forInit
                                    {
                                    pushFollow(FOLLOW_forInit_in_statement10746);
                                    forInit303=forInit();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_forInit.add(forInit303.getTree());

                                    }
                                    break;

                            }

                            SEMI304=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10749); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI304);

                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:27: ( forCondition )?
                            int alt102=2;
                            int LA102_0 = input.LA(1);

                            if ( (LA102_0==DEC||LA102_0==INC||LA102_0==LESS_THAN||LA102_0==LOGICAL_NOT||(LA102_0>=LPAREN && LA102_0<=MINUS)||LA102_0==NOT||LA102_0==PLUS||LA102_0==BOOLEAN||LA102_0==BYTE||LA102_0==CHAR||LA102_0==DOUBLE||LA102_0==FALSE||LA102_0==FLOAT||(LA102_0>=INT && LA102_0<=LONG)||(LA102_0>=NEW && LA102_0<=NULL)||LA102_0==SHORT||LA102_0==SUPER||LA102_0==THIS||LA102_0==TRUE||LA102_0==VOID||(LA102_0>=IDENT && LA102_0<=STRING_LITERAL)) ) {
                                alt102=1;
                            }
                            switch (alt102) {
                                case 1 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: forCondition
                                    {
                                    pushFollow(FOLLOW_forCondition_in_statement10751);
                                    forCondition305=forCondition();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_forCondition.add(forCondition305.getTree());

                                    }
                                    break;

                            }

                            SEMI306=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10754); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI306);

                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:46: ( forUpdater )?
                            int alt103=2;
                            int LA103_0 = input.LA(1);

                            if ( (LA103_0==DEC||LA103_0==INC||LA103_0==LESS_THAN||LA103_0==LOGICAL_NOT||(LA103_0>=LPAREN && LA103_0<=MINUS)||LA103_0==NOT||LA103_0==PLUS||LA103_0==BOOLEAN||LA103_0==BYTE||LA103_0==CHAR||LA103_0==DOUBLE||LA103_0==FALSE||LA103_0==FLOAT||(LA103_0>=INT && LA103_0<=LONG)||(LA103_0>=NEW && LA103_0<=NULL)||LA103_0==SHORT||LA103_0==SUPER||LA103_0==THIS||LA103_0==TRUE||LA103_0==VOID||(LA103_0>=IDENT && LA103_0<=STRING_LITERAL)) ) {
                                alt103=1;
                            }
                            switch (alt103) {
                                case 1 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: forUpdater
                                    {
                                    pushFollow(FOLLOW_forUpdater_in_statement10756);
                                    forUpdater307=forUpdater();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_forUpdater.add(forUpdater307.getTree());

                                    }
                                    break;

                            }

                            RPAREN308=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_statement10759); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN308);

                            pushFollow(FOLLOW_statement_in_statement10761);
                            statement309=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement309.getTree());


                            // AST REWRITE
                            // elements: forInit, forCondition, statement, forUpdater, FOR
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1878:77: -> ^( LOOP_STATEMENT ^( KEYWORD FOR ) ( ^( INIT forInit ) )? ( ^( CONDITION forCondition ) )? ( ^( STEP forUpdater ) )? statement )
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:81: ^( LOOP_STATEMENT ^( KEYWORD FOR ) ( ^( INIT forInit ) )? ( ^( CONDITION forCondition ) )? ( ^( STEP forUpdater ) )? statement )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOOP_STATEMENT, "LOOP_STATEMENT"), root_1);

                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:98: ^( KEYWORD FOR )
                                {
                                CommonTree root_2 = (CommonTree)adaptor.nil();
                                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_2);

                                adaptor.addChild(root_2, stream_FOR.nextNode());

                                adaptor.addChild(root_1, root_2);
                                }
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:113: ( ^( INIT forInit ) )?
                                if ( stream_forInit.hasNext() ) {
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:113: ^( INIT forInit )
                                    {
                                    CommonTree root_2 = (CommonTree)adaptor.nil();
                                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INIT, "INIT"), root_2);

                                    adaptor.addChild(root_2, stream_forInit.nextTree());

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_forInit.reset();
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:130: ( ^( CONDITION forCondition ) )?
                                if ( stream_forCondition.hasNext() ) {
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:130: ^( CONDITION forCondition )
                                    {
                                    CommonTree root_2 = (CommonTree)adaptor.nil();
                                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONDITION, "CONDITION"), root_2);

                                    adaptor.addChild(root_2, stream_forCondition.nextTree());

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_forCondition.reset();
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:157: ( ^( STEP forUpdater ) )?
                                if ( stream_forUpdater.hasNext() ) {
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:157: ^( STEP forUpdater )
                                    {
                                    CommonTree root_2 = (CommonTree)adaptor.nil();
                                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STEP, "STEP"), root_2);

                                    adaptor.addChild(root_2, stream_forUpdater.nextTree());

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_forUpdater.reset();
                                adaptor.addChild(root_1, stream_statement.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1880:13: localModifierList type IDENT COLON expression RPAREN statement
                            {
                            pushFollow(FOLLOW_localModifierList_in_statement10815);
                            localModifierList310=localModifierList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList310.getTree());
                            pushFollow(FOLLOW_type_in_statement10817);
                            type311=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type311.getTree());
                            IDENT312=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement10819); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT312);

                            COLON313=(Token)match(input,COLON,FOLLOW_COLON_in_statement10821); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON313);

                            pushFollow(FOLLOW_expression_in_statement10823);
                            expression314=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression314.getTree());
                            RPAREN315=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_statement10825); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN315);

                            pushFollow(FOLLOW_statement_in_statement10827);
                            statement316=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement316.getTree());


                            // AST REWRITE
                            // elements: IDENT, statement, expression, localModifierList, type
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1882:77: -> ^( LOOP_STATEMENT ^( KEYWORD FOR_EACH[$FOR, \"FOR_EACH\"] ) ^( CONDITION localModifierList type ^( NAME IDENT ) expression ) statement )
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1882:81: ^( LOOP_STATEMENT ^( KEYWORD FOR_EACH[$FOR, \"FOR_EACH\"] ) ^( CONDITION localModifierList type ^( NAME IDENT ) expression ) statement )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOOP_STATEMENT, "LOOP_STATEMENT"), root_1);

                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1882:98: ^( KEYWORD FOR_EACH[$FOR, \"FOR_EACH\"] )
                                {
                                CommonTree root_2 = (CommonTree)adaptor.nil();
                                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_2);

                                adaptor.addChild(root_2, (CommonTree)adaptor.create(FOR_EACH, FOR301, "FOR_EACH"));

                                adaptor.addChild(root_1, root_2);
                                }
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1882:136: ^( CONDITION localModifierList type ^( NAME IDENT ) expression )
                                {
                                CommonTree root_2 = (CommonTree)adaptor.nil();
                                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONDITION, "CONDITION"), root_2);

                                adaptor.addChild(root_2, stream_localModifierList.nextTree());
                                adaptor.addChild(root_2, stream_type.nextTree());
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1882:171: ^( NAME IDENT )
                                {
                                CommonTree root_3 = (CommonTree)adaptor.nil();
                                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_3);

                                adaptor.addChild(root_3, stream_IDENT.nextNode());

                                adaptor.addChild(root_2, root_3);
                                }
                                adaptor.addChild(root_2, stream_expression.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_statement.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1886:9: WHILE parenthesizedExpression statement
                    {
                    WHILE317=(Token)match(input,WHILE,FOLLOW_WHILE_in_statement10959); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(WHILE317);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement10961);
                    parenthesizedExpression318=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression318.getTree());
                    pushFollow(FOLLOW_statement_in_statement10963);
                    statement319=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement319.getTree());


                    // AST REWRITE
                    // elements: statement, WHILE, parenthesizedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1886:77: -> ^( LOOP_STATEMENT ^( KEYWORD WHILE ) ^( CONDITION parenthesizedExpression ) statement )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1886:81: ^( LOOP_STATEMENT ^( KEYWORD WHILE ) ^( CONDITION parenthesizedExpression ) statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOOP_STATEMENT, "LOOP_STATEMENT"), root_1);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1886:98: ^( KEYWORD WHILE )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_2);

                        adaptor.addChild(root_2, stream_WHILE.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1886:115: ^( CONDITION parenthesizedExpression )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONDITION, "CONDITION"), root_2);

                        adaptor.addChild(root_2, stream_parenthesizedExpression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1888:9: DO statement WHILE parenthesizedExpression SEMI
                    {
                    DO320=(Token)match(input,DO,FOLLOW_DO_in_statement11023); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DO.add(DO320);

                    pushFollow(FOLLOW_statement_in_statement11025);
                    statement321=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement321.getTree());
                    WHILE322=(Token)match(input,WHILE,FOLLOW_WHILE_in_statement11027); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(WHILE322);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement11029);
                    parenthesizedExpression323=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression323.getTree());
                    SEMI324=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement11031); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI324);



                    // AST REWRITE
                    // elements: parenthesizedExpression, DO, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1888:77: -> ^( LOOP_STATEMENT ^( KEYWORD DO ) statement ^( CONDITION parenthesizedExpression ) )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1888:81: ^( LOOP_STATEMENT ^( KEYWORD DO ) statement ^( CONDITION parenthesizedExpression ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOOP_STATEMENT, "LOOP_STATEMENT"), root_1);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1888:98: ^( KEYWORD DO )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_2);

                        adaptor.addChild(root_2, stream_DO.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_statement.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1888:122: ^( CONDITION parenthesizedExpression )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONDITION, "CONDITION"), root_2);

                        adaptor.addChild(root_2, stream_parenthesizedExpression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1890:9: TRY block ( catches ( finallyClause )? | finallyClause )
                    {
                    TRY325=(Token)match(input,TRY,FOLLOW_TRY_in_statement11083); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TRY.add(TRY325);

                    pushFollow(FOLLOW_block_in_statement11085);
                    block326=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block326.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1890:19: ( catches ( finallyClause )? | finallyClause )
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==CATCH) ) {
                        alt106=1;
                    }
                    else if ( (LA106_0==FINALLY) ) {
                        alt106=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 106, 0, input);

                        throw nvae;
                    }
                    switch (alt106) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1890:20: catches ( finallyClause )?
                            {
                            pushFollow(FOLLOW_catches_in_statement11088);
                            catches327=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_catches.add(catches327.getTree());
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1890:28: ( finallyClause )?
                            int alt105=2;
                            int LA105_0 = input.LA(1);

                            if ( (LA105_0==FINALLY) ) {
                                alt105=1;
                            }
                            switch (alt105) {
                                case 1 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: finallyClause
                                    {
                                    pushFollow(FOLLOW_finallyClause_in_statement11090);
                                    finallyClause328=finallyClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_finallyClause.add(finallyClause328.getTree());

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1890:45: finallyClause
                            {
                            pushFollow(FOLLOW_finallyClause_in_statement11095);
                            finallyClause329=finallyClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_finallyClause.add(finallyClause329.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: finallyClause, TRY, catches, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1890:77: -> ^( BRANCH_STATEMENT TRY block ( catches )? ( finallyClause )? )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1890:81: ^( BRANCH_STATEMENT TRY block ( catches )? ( finallyClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH_STATEMENT, "BRANCH_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_TRY.nextNode());
                        adaptor.addChild(root_1, stream_block.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1890:110: ( catches )?
                        if ( stream_catches.hasNext() ) {
                            adaptor.addChild(root_1, stream_catches.nextTree());

                        }
                        stream_catches.reset();
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1890:119: ( finallyClause )?
                        if ( stream_finallyClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_finallyClause.nextTree());

                        }
                        stream_finallyClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1892:9: SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY
                    {
                    SWITCH330=(Token)match(input,SWITCH,FOLLOW_SWITCH_in_statement11142); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SWITCH.add(SWITCH330);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement11144);
                    parenthesizedExpression331=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression331.getTree());
                    LCURLY332=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_statement11146); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY332);

                    pushFollow(FOLLOW_switchBlockLabels_in_statement11148);
                    switchBlockLabels333=switchBlockLabels();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchBlockLabels.add(switchBlockLabels333.getTree());
                    RCURLY334=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_statement11150); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY334);



                    // AST REWRITE
                    // elements: SWITCH, switchBlockLabels, parenthesizedExpression, LCURLY, RCURLY
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1892:77: -> ^( BRANCH_STATEMENT ^( KEYWORD SWITCH ) ^( CONDITION parenthesizedExpression ) LCURLY switchBlockLabels RCURLY )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1892:81: ^( BRANCH_STATEMENT ^( KEYWORD SWITCH ) ^( CONDITION parenthesizedExpression ) LCURLY switchBlockLabels RCURLY )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH_STATEMENT, "BRANCH_STATEMENT"), root_1);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1892:100: ^( KEYWORD SWITCH )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_2);

                        adaptor.addChild(root_2, stream_SWITCH.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1892:118: ^( CONDITION parenthesizedExpression )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONDITION, "CONDITION"), root_2);

                        adaptor.addChild(root_2, stream_parenthesizedExpression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_LCURLY.nextNode());
                        adaptor.addChild(root_1, stream_switchBlockLabels.nextTree());
                        adaptor.addChild(root_1, stream_RCURLY.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1894:9: SYNCHRONIZED parenthesizedExpression block
                    {
                    SYNCHRONIZED335=(Token)match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_statement11193); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SYNCHRONIZED.add(SYNCHRONIZED335);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement11195);
                    parenthesizedExpression336=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression336.getTree());
                    pushFollow(FOLLOW_block_in_statement11197);
                    block337=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block337.getTree());


                    // AST REWRITE
                    // elements: parenthesizedExpression, block, SYNCHRONIZED
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1894:77: -> ^( SYNCHRONIZED parenthesizedExpression block )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1894:81: ^( SYNCHRONIZED parenthesizedExpression block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SYNCHRONIZED.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1896:9: RETURN ( expression )? SEMI
                    {
                    RETURN338=(Token)match(input,RETURN,FOLLOW_RETURN_in_statement11244); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETURN.add(RETURN338);

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1896:16: ( expression )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==DEC||LA107_0==INC||LA107_0==LESS_THAN||LA107_0==LOGICAL_NOT||(LA107_0>=LPAREN && LA107_0<=MINUS)||LA107_0==NOT||LA107_0==PLUS||LA107_0==BOOLEAN||LA107_0==BYTE||LA107_0==CHAR||LA107_0==DOUBLE||LA107_0==FALSE||LA107_0==FLOAT||(LA107_0>=INT && LA107_0<=LONG)||(LA107_0>=NEW && LA107_0<=NULL)||LA107_0==SHORT||LA107_0==SUPER||LA107_0==THIS||LA107_0==TRUE||LA107_0==VOID||(LA107_0>=IDENT && LA107_0<=STRING_LITERAL)) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: expression
                            {
                            pushFollow(FOLLOW_expression_in_statement11246);
                            expression339=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression339.getTree());

                            }
                            break;

                    }

                    SEMI340=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement11249); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI340);



                    // AST REWRITE
                    // elements: RETURN, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1896:77: -> ^( JUMP_STATEMENT ^( KEYWORD RETURN ) ( expression )? )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1896:81: ^( JUMP_STATEMENT ^( KEYWORD RETURN ) ( expression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JUMP_STATEMENT, "JUMP_STATEMENT"), root_1);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1896:98: ^( KEYWORD RETURN )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_2);

                        adaptor.addChild(root_2, stream_RETURN.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1896:116: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1898:9: THROW expression SEMI
                    {
                    THROW341=(Token)match(input,THROW,FOLLOW_THROW_in_statement11320); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THROW.add(THROW341);

                    pushFollow(FOLLOW_expression_in_statement11322);
                    expression342=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression342.getTree());
                    SEMI343=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement11324); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI343);



                    // AST REWRITE
                    // elements: expression, THROW
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1898:77: -> ^( JUMP_STATEMENT ^( KEYWORD THROW ) expression )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1898:81: ^( JUMP_STATEMENT ^( KEYWORD THROW ) expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JUMP_STATEMENT, "JUMP_STATEMENT"), root_1);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1898:98: ^( KEYWORD THROW )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_2);

                        adaptor.addChild(root_2, stream_THROW.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1900:9: BREAK ( IDENT )? SEMI
                    {
                    BREAK344=(Token)match(input,BREAK,FOLLOW_BREAK_in_statement11396); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BREAK.add(BREAK344);

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1900:15: ( IDENT )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==IDENT) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: IDENT
                            {
                            IDENT345=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement11398); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT345);


                            }
                            break;

                    }

                    SEMI346=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement11401); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI346);



                    // AST REWRITE
                    // elements: IDENT, BREAK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1900:77: -> ^( JUMP_STATEMENT ^( KEYWORD BREAK ) ( ^( NAME IDENT ) )? )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1900:81: ^( JUMP_STATEMENT ^( KEYWORD BREAK ) ( ^( NAME IDENT ) )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JUMP_STATEMENT, "JUMP_STATEMENT"), root_1);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1900:98: ^( KEYWORD BREAK )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_2);

                        adaptor.addChild(root_2, stream_BREAK.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1900:115: ( ^( NAME IDENT ) )?
                        if ( stream_IDENT.hasNext() ) {
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1900:115: ^( NAME IDENT )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

                            adaptor.addChild(root_2, stream_IDENT.nextNode());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_IDENT.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1902:9: CONTINUE ( IDENT )? SEMI
                    {
                    CONTINUE347=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_statement11482); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONTINUE.add(CONTINUE347);

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1902:18: ( IDENT )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==IDENT) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: IDENT
                            {
                            IDENT348=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement11484); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT348);


                            }
                            break;

                    }

                    SEMI349=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement11487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI349);



                    // AST REWRITE
                    // elements: CONTINUE, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1902:77: -> ^( JUMP_STATEMENT ^( KEYWORD CONTINUE ) ( ^( NAME IDENT ) )? )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1902:81: ^( JUMP_STATEMENT ^( KEYWORD CONTINUE ) ( ^( NAME IDENT ) )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JUMP_STATEMENT, "JUMP_STATEMENT"), root_1);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1902:98: ^( KEYWORD CONTINUE )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD, "KEYWORD"), root_2);

                        adaptor.addChild(root_2, stream_CONTINUE.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1902:118: ( ^( NAME IDENT ) )?
                        if ( stream_IDENT.hasNext() ) {
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1902:118: ^( NAME IDENT )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

                            adaptor.addChild(root_2, stream_IDENT.nextNode());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_IDENT.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1904:9: IDENT COLON statement
                    {
                    IDENT350=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement11565); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT350);

                    COLON351=(Token)match(input,COLON,FOLLOW_COLON_in_statement11567); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON351);

                    pushFollow(FOLLOW_statement_in_statement11569);
                    statement352=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement352.getTree());


                    // AST REWRITE
                    // elements: statement, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1904:77: -> ^( LABELED_STATEMENT ^( NAME IDENT ) statement )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1904:81: ^( LABELED_STATEMENT ^( NAME IDENT ) statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LABELED_STATEMENT, "LABELED_STATEMENT"), root_1);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1904:101: ^( NAME IDENT )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1906:9: expression SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_statement11641);
                    expression353=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression353.getTree());
                    SEMI354=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement11643); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI354_tree = (CommonTree)adaptor.create(SEMI354);
                    adaptor.addChild(root_0, SEMI354_tree);
                    }

                    }
                    break;
                case 16 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1908:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI355=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement11665); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI355_tree = (CommonTree)adaptor.create(SEMI355);
                    adaptor.addChild(root_0, SEMI355_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class catches_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catches"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1916:1: catches : ( catchClause )+ -> ^( BRANCH CATCH_CLAUSE_LIST ( catchClause )+ ) ;
    public final SSQSA_JavaParser.catches_return catches() throws RecognitionException {
        SSQSA_JavaParser.catches_return retval = new SSQSA_JavaParser.catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.catchClause_return catchClause356 = null;


        RewriteRuleSubtreeStream stream_catchClause=new RewriteRuleSubtreeStream(adaptor,"rule catchClause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1918:5: ( ( catchClause )+ -> ^( BRANCH CATCH_CLAUSE_LIST ( catchClause )+ ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1918:9: ( catchClause )+
            {
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1918:9: ( catchClause )+
            int cnt111=0;
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==CATCH) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches11718);
            	    catchClause356=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_catchClause.add(catchClause356.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt111 >= 1 ) break loop111;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(111, input);
                        throw eee;
                }
                cnt111++;
            } while (true);



            // AST REWRITE
            // elements: catchClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1920:9: -> ^( BRANCH CATCH_CLAUSE_LIST ( catchClause )+ )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1920:13: ^( BRANCH CATCH_CLAUSE_LIST ( catchClause )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH, "BRANCH"), root_1);

                adaptor.addChild(root_1, (CommonTree)adaptor.create(CATCH_CLAUSE_LIST, "CATCH_CLAUSE_LIST"));
                if ( !(stream_catchClause.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_catchClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_catchClause.nextTree());

                }
                stream_catchClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1926:1: catchClause : CATCH LPAREN formalParameterStandardDecl RPAREN block ;
    public final SSQSA_JavaParser.catchClause_return catchClause() throws RecognitionException {
        SSQSA_JavaParser.catchClause_return retval = new SSQSA_JavaParser.catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CATCH357=null;
        Token LPAREN358=null;
        Token RPAREN360=null;
        SSQSA_JavaParser.formalParameterStandardDecl_return formalParameterStandardDecl359 = null;

        SSQSA_JavaParser.block_return block361 = null;


        CommonTree CATCH357_tree=null;
        CommonTree LPAREN358_tree=null;
        CommonTree RPAREN360_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1928:5: ( CATCH LPAREN formalParameterStandardDecl RPAREN block )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1928:9: CATCH LPAREN formalParameterStandardDecl RPAREN block
            {
            root_0 = (CommonTree)adaptor.nil();

            CATCH357=(Token)match(input,CATCH,FOLLOW_CATCH_in_catchClause11767); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CATCH357_tree = (CommonTree)adaptor.create(CATCH357);
            root_0 = (CommonTree)adaptor.becomeRoot(CATCH357_tree, root_0);
            }
            LPAREN358=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_catchClause11770); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN358_tree = (CommonTree)adaptor.create(LPAREN358);
            adaptor.addChild(root_0, LPAREN358_tree);
            }
            pushFollow(FOLLOW_formalParameterStandardDecl_in_catchClause11772);
            formalParameterStandardDecl359=formalParameterStandardDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterStandardDecl359.getTree());
            RPAREN360=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_catchClause11774); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN360_tree = (CommonTree)adaptor.create(RPAREN360);
            adaptor.addChild(root_0, RPAREN360_tree);
            }
            pushFollow(FOLLOW_block_in_catchClause11776);
            block361=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block361.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class finallyClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "finallyClause"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1934:1: finallyClause : FINALLY block -> ^( BRANCH FINALLY block ) ;
    public final SSQSA_JavaParser.finallyClause_return finallyClause() throws RecognitionException {
        SSQSA_JavaParser.finallyClause_return retval = new SSQSA_JavaParser.finallyClause_return();
        retval.start = input.LT(1);
        int finallyClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINALLY362=null;
        SSQSA_JavaParser.block_return block363 = null;


        CommonTree FINALLY362_tree=null;
        RewriteRuleTokenStream stream_FINALLY=new RewriteRuleTokenStream(adaptor,"token FINALLY");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1936:5: ( FINALLY block -> ^( BRANCH FINALLY block ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1936:9: FINALLY block
            {
            FINALLY362=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_finallyClause11799); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FINALLY.add(FINALLY362);

            pushFollow(FOLLOW_block_in_finallyClause11801);
            block363=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block363.getTree());


            // AST REWRITE
            // elements: FINALLY, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1938:9: -> ^( BRANCH FINALLY block )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1938:12: ^( BRANCH FINALLY block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH, "BRANCH"), root_1);

                adaptor.addChild(root_1, stream_FINALLY.nextNode());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, finallyClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "finallyClause"

    public static class switchBlockLabels_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockLabels"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1948:1: switchBlockLabels : ( switchCaseLabels1 )? ( switchDefaultLabel )? ( switchCaseLabels2 )? -> ^( SWITCH_BLOCK_LABEL_LIST ( switchCaseLabels1 )? ( switchDefaultLabel )? ( switchCaseLabels2 )? ) ;
    public final SSQSA_JavaParser.switchBlockLabels_return switchBlockLabels() throws RecognitionException {
        SSQSA_JavaParser.switchBlockLabels_return retval = new SSQSA_JavaParser.switchBlockLabels_return();
        retval.start = input.LT(1);
        int switchBlockLabels_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.switchCaseLabels1_return switchCaseLabels1364 = null;

        SSQSA_JavaParser.switchDefaultLabel_return switchDefaultLabel365 = null;

        SSQSA_JavaParser.switchCaseLabels2_return switchCaseLabels2366 = null;


        RewriteRuleSubtreeStream stream_switchDefaultLabel=new RewriteRuleSubtreeStream(adaptor,"rule switchDefaultLabel");
        RewriteRuleSubtreeStream stream_switchCaseLabels2=new RewriteRuleSubtreeStream(adaptor,"rule switchCaseLabels2");
        RewriteRuleSubtreeStream stream_switchCaseLabels1=new RewriteRuleSubtreeStream(adaptor,"rule switchCaseLabels1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1950:5: ( ( switchCaseLabels1 )? ( switchDefaultLabel )? ( switchCaseLabels2 )? -> ^( SWITCH_BLOCK_LABEL_LIST ( switchCaseLabels1 )? ( switchDefaultLabel )? ( switchCaseLabels2 )? ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1950:9: ( switchCaseLabels1 )? ( switchDefaultLabel )? ( switchCaseLabels2 )?
            {
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1950:9: ( switchCaseLabels1 )?
            int alt112=2;
            switch ( input.LA(1) ) {
                case CASE:
                    {
                    int LA112_1 = input.LA(2);

                    if ( (synpred155_SSQSA_Java()) ) {
                        alt112=1;
                    }
                    }
                    break;
                case DEFAULT:
                    {
                    int LA112_2 = input.LA(2);

                    if ( (synpred155_SSQSA_Java()) ) {
                        alt112=1;
                    }
                    }
                    break;
                case RCURLY:
                    {
                    int LA112_3 = input.LA(2);

                    if ( (synpred155_SSQSA_Java()) ) {
                        alt112=1;
                    }
                    }
                    break;
            }

            switch (alt112) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: switchCaseLabels1
                    {
                    pushFollow(FOLLOW_switchCaseLabels1_in_switchBlockLabels11847);
                    switchCaseLabels1364=switchCaseLabels1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchCaseLabels1.add(switchCaseLabels1364.getTree());

                    }
                    break;

            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1950:28: ( switchDefaultLabel )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==DEFAULT) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: switchDefaultLabel
                    {
                    pushFollow(FOLLOW_switchDefaultLabel_in_switchBlockLabels11850);
                    switchDefaultLabel365=switchDefaultLabel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchDefaultLabel.add(switchDefaultLabel365.getTree());

                    }
                    break;

            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1950:48: ( switchCaseLabels2 )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==CASE) ) {
                alt114=1;
            }
            else if ( (LA114_0==RCURLY) ) {
                int LA114_2 = input.LA(2);

                if ( (synpred157_SSQSA_Java()) ) {
                    alt114=1;
                }
            }
            switch (alt114) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: switchCaseLabels2
                    {
                    pushFollow(FOLLOW_switchCaseLabels2_in_switchBlockLabels11853);
                    switchCaseLabels2366=switchCaseLabels2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchCaseLabels2.add(switchCaseLabels2366.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: switchDefaultLabel, switchCaseLabels1, switchCaseLabels2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1952:9: -> ^( SWITCH_BLOCK_LABEL_LIST ( switchCaseLabels1 )? ( switchDefaultLabel )? ( switchCaseLabels2 )? )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1952:13: ^( SWITCH_BLOCK_LABEL_LIST ( switchCaseLabels1 )? ( switchDefaultLabel )? ( switchCaseLabels2 )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SWITCH_BLOCK_LABEL_LIST, "SWITCH_BLOCK_LABEL_LIST"), root_1);

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1952:39: ( switchCaseLabels1 )?
                if ( stream_switchCaseLabels1.hasNext() ) {
                    adaptor.addChild(root_1, stream_switchCaseLabels1.nextTree());

                }
                stream_switchCaseLabels1.reset();
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1952:58: ( switchDefaultLabel )?
                if ( stream_switchDefaultLabel.hasNext() ) {
                    adaptor.addChild(root_1, stream_switchDefaultLabel.nextTree());

                }
                stream_switchDefaultLabel.reset();
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1952:78: ( switchCaseLabels2 )?
                if ( stream_switchCaseLabels2.hasNext() ) {
                    adaptor.addChild(root_1, stream_switchCaseLabels2.nextTree());

                }
                stream_switchCaseLabels2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, switchBlockLabels_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockLabels"

    public static class switchCaseLabels1_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchCaseLabels1"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1958:1: switchCaseLabels1 : ( switchCaseLabel )* ;
    public final SSQSA_JavaParser.switchCaseLabels1_return switchCaseLabels1() throws RecognitionException {
        SSQSA_JavaParser.switchCaseLabels1_return retval = new SSQSA_JavaParser.switchCaseLabels1_return();
        retval.start = input.LT(1);
        int switchCaseLabels1_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.switchCaseLabel_return switchCaseLabel367 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1960:5: ( ( switchCaseLabel )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1960:9: ( switchCaseLabel )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1960:9: ( switchCaseLabel )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==CASE) ) {
                    int LA115_2 = input.LA(2);

                    if ( (synpred158_SSQSA_Java()) ) {
                        alt115=1;
                    }


                }


                switch (alt115) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: switchCaseLabel
            	    {
            	    pushFollow(FOLLOW_switchCaseLabel_in_switchCaseLabels111906);
            	    switchCaseLabel367=switchCaseLabel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchCaseLabel367.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, switchCaseLabels1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchCaseLabels1"

    public static class switchCaseLabels2_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchCaseLabels2"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1966:1: switchCaseLabels2 : ( switchCaseLabel )* ;
    public final SSQSA_JavaParser.switchCaseLabels2_return switchCaseLabels2() throws RecognitionException {
        SSQSA_JavaParser.switchCaseLabels2_return retval = new SSQSA_JavaParser.switchCaseLabels2_return();
        retval.start = input.LT(1);
        int switchCaseLabels2_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.switchCaseLabel_return switchCaseLabel368 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1968:5: ( ( switchCaseLabel )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1968:9: ( switchCaseLabel )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1968:9: ( switchCaseLabel )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==CASE) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: switchCaseLabel
            	    {
            	    pushFollow(FOLLOW_switchCaseLabel_in_switchCaseLabels211930);
            	    switchCaseLabel368=switchCaseLabel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchCaseLabel368.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, switchCaseLabels2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchCaseLabels2"

    public static class switchCaseLabel_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchCaseLabel"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1974:1: switchCaseLabel : CASE expression COLON ( blockStatement )* -> ^( BRANCH CASE expression ( blockStatement )* ) ;
    public final SSQSA_JavaParser.switchCaseLabel_return switchCaseLabel() throws RecognitionException {
        SSQSA_JavaParser.switchCaseLabel_return retval = new SSQSA_JavaParser.switchCaseLabel_return();
        retval.start = input.LT(1);
        int switchCaseLabel_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CASE369=null;
        Token COLON371=null;
        SSQSA_JavaParser.expression_return expression370 = null;

        SSQSA_JavaParser.blockStatement_return blockStatement372 = null;


        CommonTree CASE369_tree=null;
        CommonTree COLON371_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1976:5: ( CASE expression COLON ( blockStatement )* -> ^( BRANCH CASE expression ( blockStatement )* ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1976:9: CASE expression COLON ( blockStatement )*
            {
            CASE369=(Token)match(input,CASE,FOLLOW_CASE_in_switchCaseLabel11962); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CASE.add(CASE369);

            pushFollow(FOLLOW_expression_in_switchCaseLabel11964);
            expression370=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression370.getTree());
            COLON371=(Token)match(input,COLON,FOLLOW_COLON_in_switchCaseLabel11966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON371);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1976:31: ( blockStatement )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==AT||LA117_0==DEC||LA117_0==INC||LA117_0==LCURLY||LA117_0==LESS_THAN||LA117_0==LOGICAL_NOT||(LA117_0>=LPAREN && LA117_0<=MINUS)||LA117_0==NOT||LA117_0==PLUS||LA117_0==SEMI||(LA117_0>=ABSTRACT && LA117_0<=BYTE)||(LA117_0>=CHAR && LA117_0<=CONTINUE)||(LA117_0>=DO && LA117_0<=DOUBLE)||LA117_0==ENUM||(LA117_0>=FALSE && LA117_0<=FINAL)||(LA117_0>=FLOAT && LA117_0<=IF)||LA117_0==INTERFACE||(LA117_0>=INT && LA117_0<=NULL)||(LA117_0>=PRIVATE && LA117_0<=THROW)||(LA117_0>=TRANSIENT && LA117_0<=WHILE)||(LA117_0>=IDENT && LA117_0<=STRING_LITERAL)) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchCaseLabel11968);
            	    blockStatement372=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement372.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);



            // AST REWRITE
            // elements: expression, blockStatement, CASE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1976:47: -> ^( BRANCH CASE expression ( blockStatement )* )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1976:50: ^( BRANCH CASE expression ( blockStatement )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH, "BRANCH"), root_1);

                adaptor.addChild(root_1, stream_CASE.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1976:75: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, switchCaseLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchCaseLabel"

    public static class switchDefaultLabel_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchDefaultLabel"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1982:1: switchDefaultLabel : DEFAULT COLON ( blockStatement )* -> ^( BRANCH DEFAULT ( blockStatement )* ) ;
    public final SSQSA_JavaParser.switchDefaultLabel_return switchDefaultLabel() throws RecognitionException {
        SSQSA_JavaParser.switchDefaultLabel_return retval = new SSQSA_JavaParser.switchDefaultLabel_return();
        retval.start = input.LT(1);
        int switchDefaultLabel_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DEFAULT373=null;
        Token COLON374=null;
        SSQSA_JavaParser.blockStatement_return blockStatement375 = null;


        CommonTree DEFAULT373_tree=null;
        CommonTree COLON374_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1984:5: ( DEFAULT COLON ( blockStatement )* -> ^( BRANCH DEFAULT ( blockStatement )* ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1984:9: DEFAULT COLON ( blockStatement )*
            {
            DEFAULT373=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_switchDefaultLabel12009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFAULT.add(DEFAULT373);

            COLON374=(Token)match(input,COLON,FOLLOW_COLON_in_switchDefaultLabel12011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON374);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1984:23: ( blockStatement )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==AT||LA118_0==DEC||LA118_0==INC||LA118_0==LCURLY||LA118_0==LESS_THAN||LA118_0==LOGICAL_NOT||(LA118_0>=LPAREN && LA118_0<=MINUS)||LA118_0==NOT||LA118_0==PLUS||LA118_0==SEMI||(LA118_0>=ABSTRACT && LA118_0<=BYTE)||(LA118_0>=CHAR && LA118_0<=CONTINUE)||(LA118_0>=DO && LA118_0<=DOUBLE)||LA118_0==ENUM||(LA118_0>=FALSE && LA118_0<=FINAL)||(LA118_0>=FLOAT && LA118_0<=IF)||LA118_0==INTERFACE||(LA118_0>=INT && LA118_0<=NULL)||(LA118_0>=PRIVATE && LA118_0<=THROW)||(LA118_0>=TRANSIENT && LA118_0<=WHILE)||(LA118_0>=IDENT && LA118_0<=STRING_LITERAL)) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchDefaultLabel12013);
            	    blockStatement375=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement375.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);



            // AST REWRITE
            // elements: DEFAULT, blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1984:39: -> ^( BRANCH DEFAULT ( blockStatement )* )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1984:42: ^( BRANCH DEFAULT ( blockStatement )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH, "BRANCH"), root_1);

                adaptor.addChild(root_1, stream_DEFAULT.nextNode());
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1984:60: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, switchDefaultLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchDefaultLabel"

    public static class forInit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1990:1: forInit : ( localVariableDeclaration | expressionList | );
    public final SSQSA_JavaParser.forInit_return forInit() throws RecognitionException {
        SSQSA_JavaParser.forInit_return retval = new SSQSA_JavaParser.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.localVariableDeclaration_return localVariableDeclaration376 = null;

        SSQSA_JavaParser.expressionList_return expressionList377 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1992:5: ( localVariableDeclaration | expressionList | )
            int alt119=3;
            alt119 = dfa119.predict(input);
            switch (alt119) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1992:9: localVariableDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_forInit12053);
                    localVariableDeclaration376=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration376.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1994:9: expressionList
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expressionList_in_forInit12067);
                    expressionList377=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList377.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1998:5: 
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class forCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forCondition"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2002:1: forCondition : expression ;
    public final SSQSA_JavaParser.forCondition_return forCondition() throws RecognitionException {
        SSQSA_JavaParser.forCondition_return retval = new SSQSA_JavaParser.forCondition_return();
        retval.start = input.LT(1);
        int forCondition_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.expression_return expression378 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2004:5: ( expression )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2004:9: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_forCondition12142);
            expression378=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression378.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, forCondition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forCondition"

    public static class forUpdater_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forUpdater"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2010:1: forUpdater : expressionList ;
    public final SSQSA_JavaParser.forUpdater_return forUpdater() throws RecognitionException {
        SSQSA_JavaParser.forUpdater_return retval = new SSQSA_JavaParser.forUpdater_return();
        retval.start = input.LT(1);
        int forUpdater_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.expressionList_return expressionList379 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2012:5: ( expressionList )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2012:9: expressionList
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expressionList_in_forUpdater12169);
            expressionList379=expressionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList379.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, forUpdater_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forUpdater"

    public static class parenthesizedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parenthesizedExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2026:1: parenthesizedExpression : LPAREN expression RPAREN -> ^( SEPARATOR LPAREN ) expression ^( SEPARATOR RPAREN ) ;
    public final SSQSA_JavaParser.parenthesizedExpression_return parenthesizedExpression() throws RecognitionException {
        SSQSA_JavaParser.parenthesizedExpression_return retval = new SSQSA_JavaParser.parenthesizedExpression_return();
        retval.start = input.LT(1);
        int parenthesizedExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN380=null;
        Token RPAREN382=null;
        SSQSA_JavaParser.expression_return expression381 = null;


        CommonTree LPAREN380_tree=null;
        CommonTree RPAREN382_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2028:5: ( LPAREN expression RPAREN -> ^( SEPARATOR LPAREN ) expression ^( SEPARATOR RPAREN ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2028:9: LPAREN expression RPAREN
            {
            LPAREN380=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parenthesizedExpression12200); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN380);

            pushFollow(FOLLOW_expression_in_parenthesizedExpression12202);
            expression381=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression381.getTree());
            RPAREN382=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parenthesizedExpression12204); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN382);



            // AST REWRITE
            // elements: LPAREN, RPAREN, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2030:9: -> ^( SEPARATOR LPAREN ) expression ^( SEPARATOR RPAREN )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2030:12: ^( SEPARATOR LPAREN )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_1);

                adaptor.addChild(root_1, stream_LPAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }
                adaptor.addChild(root_0, stream_expression.nextTree());
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2030:43: ^( SEPARATOR RPAREN )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_1);

                adaptor.addChild(root_1, stream_RPAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, parenthesizedExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parenthesizedExpression"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2036:1: expressionList : expression ( COMMA expression )* ;
    public final SSQSA_JavaParser.expressionList_return expressionList() throws RecognitionException {
        SSQSA_JavaParser.expressionList_return retval = new SSQSA_JavaParser.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA384=null;
        SSQSA_JavaParser.expression_return expression383 = null;

        SSQSA_JavaParser.expression_return expression385 = null;


        CommonTree COMMA384_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2038:5: ( expression ( COMMA expression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2038:9: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList12261);
            expression383=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression383.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2038:20: ( COMMA expression )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==COMMA) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2038:21: COMMA expression
            	    {
            	    COMMA384=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList12264); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA384_tree = (CommonTree)adaptor.create(COMMA384);
            	    adaptor.addChild(root_0, COMMA384_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_expressionList12266);
            	    expression385=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression385.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2048:1: expression : assignmentExpression ;
    public final SSQSA_JavaParser.expression_return expression() throws RecognitionException {
        SSQSA_JavaParser.expression_return retval = new SSQSA_JavaParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.assignmentExpression_return assignmentExpression386 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2050:5: ( assignmentExpression )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2050:9: assignmentExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_assignmentExpression_in_expression12295);
            assignmentExpression386=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression386.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class assignOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2094:1: assignOp : ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN );
    public final SSQSA_JavaParser.assignOp_return assignOp() throws RecognitionException {
        SSQSA_JavaParser.assignOp_return retval = new SSQSA_JavaParser.assignOp_return();
        retval.start = input.LT(1);
        int assignOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set387=null;

        CommonTree set387_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2096:4: ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set387=(Token)input.LT(1);
            if ( (input.LA(1)>=AND_ASSIGN && input.LA(1)<=ASSIGN)||input.LA(1)==BIT_SHIFT_RIGHT_ASSIGN||input.LA(1)==DIV_ASSIGN||input.LA(1)==MINUS_ASSIGN||input.LA(1)==MOD_ASSIGN||input.LA(1)==OR_ASSIGN||input.LA(1)==PLUS_ASSIGN||input.LA(1)==SHIFT_LEFT_ASSIGN||input.LA(1)==SHIFT_RIGHT_ASSIGN||input.LA(1)==STAR_ASSIGN||input.LA(1)==XOR_ASSIGN ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set387));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, assignOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignOp"

    public static class assignStat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignStat"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2124:1: assignStat : assignOp -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp ) ) ;
    public final SSQSA_JavaParser.assignStat_return assignStat() throws RecognitionException {
        SSQSA_JavaParser.assignStat_return retval = new SSQSA_JavaParser.assignStat_return();
        retval.start = input.LT(1);
        int assignStat_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.assignOp_return assignOp388 = null;


        RewriteRuleSubtreeStream stream_assignOp=new RewriteRuleSubtreeStream(adaptor,"rule assignOp");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2126:5: ( assignOp -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp ) ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2126:7: assignOp
            {
            pushFollow(FOLLOW_assignOp_in_assignStat12494);
            assignOp388=assignOp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_assignOp.add(assignOp388.getTree());


            // AST REWRITE
            // elements: assignOp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2128:6: -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp ) )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2128:10: ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGNMENT_STATEMENT, "ASSIGNMENT_STATEMENT"), root_1);

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2128:34: ^( ASSIGN_OPERATOR assignOp )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGN_OPERATOR, "ASSIGN_OPERATOR"), root_2);

                adaptor.addChild(root_2, stream_assignOp.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, assignStat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignStat"

    public static class assignmentExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2134:1: assignmentExpression : conditionalExpression ( -> conditionalExpression | assignOp assignmentExpression -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp conditionalExpression ^( VALUE assignmentExpression ) ) ) ) ;
    public final SSQSA_JavaParser.assignmentExpression_return assignmentExpression() throws RecognitionException {
        SSQSA_JavaParser.assignmentExpression_return retval = new SSQSA_JavaParser.assignmentExpression_return();
        retval.start = input.LT(1);
        int assignmentExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.conditionalExpression_return conditionalExpression389 = null;

        SSQSA_JavaParser.assignOp_return assignOp390 = null;

        SSQSA_JavaParser.assignmentExpression_return assignmentExpression391 = null;


        RewriteRuleSubtreeStream stream_assignOp=new RewriteRuleSubtreeStream(adaptor,"rule assignOp");
        RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2136:5: ( conditionalExpression ( -> conditionalExpression | assignOp assignmentExpression -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp conditionalExpression ^( VALUE assignmentExpression ) ) ) ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2136:9: conditionalExpression ( -> conditionalExpression | assignOp assignmentExpression -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp conditionalExpression ^( VALUE assignmentExpression ) ) ) )
            {
            pushFollow(FOLLOW_conditionalExpression_in_assignmentExpression12537);
            conditionalExpression389=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalExpression.add(conditionalExpression389.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2136:31: ( -> conditionalExpression | assignOp assignmentExpression -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp conditionalExpression ^( VALUE assignmentExpression ) ) ) )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==EOF||(LA121_0>=COLON && LA121_0<=COMMA)||(LA121_0>=RBRACK && LA121_0<=SEMI)) ) {
                alt121=1;
            }
            else if ( ((LA121_0>=AND_ASSIGN && LA121_0<=ASSIGN)||LA121_0==BIT_SHIFT_RIGHT_ASSIGN||LA121_0==DIV_ASSIGN||LA121_0==MINUS_ASSIGN||LA121_0==MOD_ASSIGN||LA121_0==OR_ASSIGN||LA121_0==PLUS_ASSIGN||LA121_0==SHIFT_LEFT_ASSIGN||LA121_0==SHIFT_RIGHT_ASSIGN||LA121_0==STAR_ASSIGN||LA121_0==XOR_ASSIGN) ) {
                alt121=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2137:9: 
                    {

                    // AST REWRITE
                    // elements: conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2137:9: -> conditionalExpression
                    {
                        adaptor.addChild(root_0, stream_conditionalExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2138:11: assignOp assignmentExpression
                    {
                    pushFollow(FOLLOW_assignOp_in_assignmentExpression12563);
                    assignOp390=assignOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignOp.add(assignOp390.getTree());
                    pushFollow(FOLLOW_assignmentExpression_in_assignmentExpression12565);
                    assignmentExpression391=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignmentExpression.add(assignmentExpression391.getTree());


                    // AST REWRITE
                    // elements: assignOp, conditionalExpression, assignmentExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2138:41: -> ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp conditionalExpression ^( VALUE assignmentExpression ) ) )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2138:44: ^( ASSIGNMENT_STATEMENT ^( ASSIGN_OPERATOR assignOp conditionalExpression ^( VALUE assignmentExpression ) ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGNMENT_STATEMENT, "ASSIGNMENT_STATEMENT"), root_1);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2138:67: ^( ASSIGN_OPERATOR assignOp conditionalExpression ^( VALUE assignmentExpression ) )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGN_OPERATOR, "ASSIGN_OPERATOR"), root_2);

                        adaptor.addChild(root_2, stream_assignOp.nextTree());
                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2138:116: ^( VALUE assignmentExpression )
                        {
                        CommonTree root_3 = (CommonTree)adaptor.nil();
                        root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VALUE, "VALUE"), root_3);

                        adaptor.addChild(root_3, stream_assignmentExpression.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, assignmentExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignmentExpression"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2145:1: conditionalExpression : logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )? -> logicalOrExpression ( ^( BRANCH_STATEMENT ^( QUESTION ^( BRANCH assignmentExpression ) COLON ^( BRANCH conditionalExpression ) ) ) )? ;
    public final SSQSA_JavaParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        SSQSA_JavaParser.conditionalExpression_return retval = new SSQSA_JavaParser.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION393=null;
        Token COLON395=null;
        SSQSA_JavaParser.logicalOrExpression_return logicalOrExpression392 = null;

        SSQSA_JavaParser.assignmentExpression_return assignmentExpression394 = null;

        SSQSA_JavaParser.conditionalExpression_return conditionalExpression396 = null;


        CommonTree QUESTION393_tree=null;
        CommonTree COLON395_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleSubtreeStream stream_logicalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule logicalOrExpression");
        RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2147:5: ( logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )? -> logicalOrExpression ( ^( BRANCH_STATEMENT ^( QUESTION ^( BRANCH assignmentExpression ) COLON ^( BRANCH conditionalExpression ) ) ) )? )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2147:9: logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )?
            {
            pushFollow(FOLLOW_logicalOrExpression_in_conditionalExpression12619);
            logicalOrExpression392=logicalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_logicalOrExpression.add(logicalOrExpression392.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2147:29: ( QUESTION assignmentExpression COLON conditionalExpression )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==QUESTION) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2147:30: QUESTION assignmentExpression COLON conditionalExpression
                    {
                    QUESTION393=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_conditionalExpression12622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(QUESTION393);

                    pushFollow(FOLLOW_assignmentExpression_in_conditionalExpression12624);
                    assignmentExpression394=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignmentExpression.add(assignmentExpression394.getTree());
                    COLON395=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalExpression12626); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON395);

                    pushFollow(FOLLOW_conditionalExpression_in_conditionalExpression12628);
                    conditionalExpression396=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditionalExpression.add(conditionalExpression396.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: QUESTION, logicalOrExpression, conditionalExpression, COLON, assignmentExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2149:5: -> logicalOrExpression ( ^( BRANCH_STATEMENT ^( QUESTION ^( BRANCH assignmentExpression ) COLON ^( BRANCH conditionalExpression ) ) ) )?
            {
                adaptor.addChild(root_0, stream_logicalOrExpression.nextTree());
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2149:29: ( ^( BRANCH_STATEMENT ^( QUESTION ^( BRANCH assignmentExpression ) COLON ^( BRANCH conditionalExpression ) ) ) )?
                if ( stream_QUESTION.hasNext()||stream_conditionalExpression.hasNext()||stream_COLON.hasNext()||stream_assignmentExpression.hasNext() ) {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2149:29: ^( BRANCH_STATEMENT ^( QUESTION ^( BRANCH assignmentExpression ) COLON ^( BRANCH conditionalExpression ) ) )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH_STATEMENT, "BRANCH_STATEMENT"), root_1);

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2149:48: ^( QUESTION ^( BRANCH assignmentExpression ) COLON ^( BRANCH conditionalExpression ) )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot(stream_QUESTION.nextNode(), root_2);

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2149:59: ^( BRANCH assignmentExpression )
                    {
                    CommonTree root_3 = (CommonTree)adaptor.nil();
                    root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH, "BRANCH"), root_3);

                    adaptor.addChild(root_3, stream_assignmentExpression.nextTree());

                    adaptor.addChild(root_2, root_3);
                    }
                    adaptor.addChild(root_2, stream_COLON.nextNode());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2149:96: ^( BRANCH conditionalExpression )
                    {
                    CommonTree root_3 = (CommonTree)adaptor.nil();
                    root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH, "BRANCH"), root_3);

                    adaptor.addChild(root_3, stream_conditionalExpression.nextTree());

                    adaptor.addChild(root_2, root_3);
                    }

                    adaptor.addChild(root_1, root_2);
                    }

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_QUESTION.reset();
                stream_conditionalExpression.reset();
                stream_COLON.reset();
                stream_assignmentExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class logicalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalOrExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2155:1: logicalOrExpression : logicalAndExpression ( logicalOrOp logicalAndExpression )* ;
    public final SSQSA_JavaParser.logicalOrExpression_return logicalOrExpression() throws RecognitionException {
        SSQSA_JavaParser.logicalOrExpression_return retval = new SSQSA_JavaParser.logicalOrExpression_return();
        retval.start = input.LT(1);
        int logicalOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.logicalAndExpression_return logicalAndExpression397 = null;

        SSQSA_JavaParser.logicalOrOp_return logicalOrOp398 = null;

        SSQSA_JavaParser.logicalAndExpression_return logicalAndExpression399 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2157:5: ( logicalAndExpression ( logicalOrOp logicalAndExpression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2157:9: logicalAndExpression ( logicalOrOp logicalAndExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression12686);
            logicalAndExpression397=logicalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalAndExpression397.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2157:30: ( logicalOrOp logicalAndExpression )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==LOGICAL_OR) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2157:31: logicalOrOp logicalAndExpression
            	    {
            	    pushFollow(FOLLOW_logicalOrOp_in_logicalOrExpression12689);
            	    logicalOrOp398=logicalOrOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(logicalOrOp398.getTree(), root_0);
            	    pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression12692);
            	    logicalAndExpression399=logicalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalAndExpression399.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, logicalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logicalOrExpression"

    public static class logicalOrOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalOrOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2161:1: logicalOrOp : LOGICAL_OR -> ^( LOGICAL_OPERATOR LOGICAL_OR ) ;
    public final SSQSA_JavaParser.logicalOrOp_return logicalOrOp() throws RecognitionException {
        SSQSA_JavaParser.logicalOrOp_return retval = new SSQSA_JavaParser.logicalOrOp_return();
        retval.start = input.LT(1);
        int logicalOrOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOGICAL_OR400=null;

        CommonTree LOGICAL_OR400_tree=null;
        RewriteRuleTokenStream stream_LOGICAL_OR=new RewriteRuleTokenStream(adaptor,"token LOGICAL_OR");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2162:2: ( LOGICAL_OR -> ^( LOGICAL_OPERATOR LOGICAL_OR ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2162:4: LOGICAL_OR
            {
            LOGICAL_OR400=(Token)match(input,LOGICAL_OR,FOLLOW_LOGICAL_OR_in_logicalOrOp12710); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LOGICAL_OR.add(LOGICAL_OR400);



            // AST REWRITE
            // elements: LOGICAL_OR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2162:15: -> ^( LOGICAL_OPERATOR LOGICAL_OR )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2162:18: ^( LOGICAL_OPERATOR LOGICAL_OR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOGICAL_OPERATOR, "LOGICAL_OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_LOGICAL_OR.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, logicalOrOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logicalOrOp"

    public static class logicalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalAndExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2164:1: logicalAndExpression : inclusiveOrExpression ( logicalAndOp inclusiveOrExpression )* ;
    public final SSQSA_JavaParser.logicalAndExpression_return logicalAndExpression() throws RecognitionException {
        SSQSA_JavaParser.logicalAndExpression_return retval = new SSQSA_JavaParser.logicalAndExpression_return();
        retval.start = input.LT(1);
        int logicalAndExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.inclusiveOrExpression_return inclusiveOrExpression401 = null;

        SSQSA_JavaParser.logicalAndOp_return logicalAndOp402 = null;

        SSQSA_JavaParser.inclusiveOrExpression_return inclusiveOrExpression403 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2166:5: ( inclusiveOrExpression ( logicalAndOp inclusiveOrExpression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2166:9: inclusiveOrExpression ( logicalAndOp inclusiveOrExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_inclusiveOrExpression_in_logicalAndExpression12733);
            inclusiveOrExpression401=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression401.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2166:31: ( logicalAndOp inclusiveOrExpression )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==LOGICAL_AND) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2166:32: logicalAndOp inclusiveOrExpression
            	    {
            	    pushFollow(FOLLOW_logicalAndOp_in_logicalAndExpression12736);
            	    logicalAndOp402=logicalAndOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(logicalAndOp402.getTree(), root_0);
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_logicalAndExpression12739);
            	    inclusiveOrExpression403=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression403.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, logicalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logicalAndExpression"

    public static class logicalAndOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalAndOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2170:1: logicalAndOp : LOGICAL_AND -> ^( LOGICAL_OPERATOR LOGICAL_AND ) ;
    public final SSQSA_JavaParser.logicalAndOp_return logicalAndOp() throws RecognitionException {
        SSQSA_JavaParser.logicalAndOp_return retval = new SSQSA_JavaParser.logicalAndOp_return();
        retval.start = input.LT(1);
        int logicalAndOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOGICAL_AND404=null;

        CommonTree LOGICAL_AND404_tree=null;
        RewriteRuleTokenStream stream_LOGICAL_AND=new RewriteRuleTokenStream(adaptor,"token LOGICAL_AND");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2171:2: ( LOGICAL_AND -> ^( LOGICAL_OPERATOR LOGICAL_AND ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2171:4: LOGICAL_AND
            {
            LOGICAL_AND404=(Token)match(input,LOGICAL_AND,FOLLOW_LOGICAL_AND_in_logicalAndOp12757); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LOGICAL_AND.add(LOGICAL_AND404);



            // AST REWRITE
            // elements: LOGICAL_AND
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2171:16: -> ^( LOGICAL_OPERATOR LOGICAL_AND )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2171:19: ^( LOGICAL_OPERATOR LOGICAL_AND )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOGICAL_OPERATOR, "LOGICAL_OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_LOGICAL_AND.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, logicalAndOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logicalAndOp"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2178:1: inclusiveOrExpression : exclusiveOrExpression ( bitwiseOrOp exclusiveOrExpression )* ;
    public final SSQSA_JavaParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        SSQSA_JavaParser.inclusiveOrExpression_return retval = new SSQSA_JavaParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.exclusiveOrExpression_return exclusiveOrExpression405 = null;

        SSQSA_JavaParser.bitwiseOrOp_return bitwiseOrOp406 = null;

        SSQSA_JavaParser.exclusiveOrExpression_return exclusiveOrExpression407 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2180:5: ( exclusiveOrExpression ( bitwiseOrOp exclusiveOrExpression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2180:9: exclusiveOrExpression ( bitwiseOrOp exclusiveOrExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression12789);
            exclusiveOrExpression405=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression405.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2180:31: ( bitwiseOrOp exclusiveOrExpression )*
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==OR) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2180:32: bitwiseOrOp exclusiveOrExpression
            	    {
            	    pushFollow(FOLLOW_bitwiseOrOp_in_inclusiveOrExpression12792);
            	    bitwiseOrOp406=bitwiseOrOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(bitwiseOrOp406.getTree(), root_0);
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression12795);
            	    exclusiveOrExpression407=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression407.getTree());

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class bitwiseOrOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitwiseOrOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2183:1: bitwiseOrOp : OR -> ^( LOGICAL_OPERATOR OR ) ;
    public final SSQSA_JavaParser.bitwiseOrOp_return bitwiseOrOp() throws RecognitionException {
        SSQSA_JavaParser.bitwiseOrOp_return retval = new SSQSA_JavaParser.bitwiseOrOp_return();
        retval.start = input.LT(1);
        int bitwiseOrOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OR408=null;

        CommonTree OR408_tree=null;
        RewriteRuleTokenStream stream_OR=new RewriteRuleTokenStream(adaptor,"token OR");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2184:2: ( OR -> ^( LOGICAL_OPERATOR OR ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2184:4: OR
            {
            OR408=(Token)match(input,OR,FOLLOW_OR_in_bitwiseOrOp12812); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OR.add(OR408);



            // AST REWRITE
            // elements: OR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2184:7: -> ^( LOGICAL_OPERATOR OR )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2184:10: ^( LOGICAL_OPERATOR OR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOGICAL_OPERATOR, "LOGICAL_OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_OR.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, bitwiseOrOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bitwiseOrOp"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2187:1: exclusiveOrExpression : andExpression ( bitwiseXorOp andExpression )* ;
    public final SSQSA_JavaParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        SSQSA_JavaParser.exclusiveOrExpression_return retval = new SSQSA_JavaParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.andExpression_return andExpression409 = null;

        SSQSA_JavaParser.bitwiseXorOp_return bitwiseXorOp410 = null;

        SSQSA_JavaParser.andExpression_return andExpression411 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2189:5: ( andExpression ( bitwiseXorOp andExpression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2189:9: andExpression ( bitwiseXorOp andExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression12837);
            andExpression409=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression409.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2189:23: ( bitwiseXorOp andExpression )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==XOR) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2189:24: bitwiseXorOp andExpression
            	    {
            	    pushFollow(FOLLOW_bitwiseXorOp_in_exclusiveOrExpression12840);
            	    bitwiseXorOp410=bitwiseXorOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(bitwiseXorOp410.getTree(), root_0);
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression12843);
            	    andExpression411=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression411.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class bitwiseXorOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitwiseXorOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2193:1: bitwiseXorOp : XOR -> ^( LOGICAL_OPERATOR XOR ) ;
    public final SSQSA_JavaParser.bitwiseXorOp_return bitwiseXorOp() throws RecognitionException {
        SSQSA_JavaParser.bitwiseXorOp_return retval = new SSQSA_JavaParser.bitwiseXorOp_return();
        retval.start = input.LT(1);
        int bitwiseXorOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token XOR412=null;

        CommonTree XOR412_tree=null;
        RewriteRuleTokenStream stream_XOR=new RewriteRuleTokenStream(adaptor,"token XOR");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2194:2: ( XOR -> ^( LOGICAL_OPERATOR XOR ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2194:4: XOR
            {
            XOR412=(Token)match(input,XOR,FOLLOW_XOR_in_bitwiseXorOp12861); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_XOR.add(XOR412);



            // AST REWRITE
            // elements: XOR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2194:8: -> ^( LOGICAL_OPERATOR XOR )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2194:11: ^( LOGICAL_OPERATOR XOR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOGICAL_OPERATOR, "LOGICAL_OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_XOR.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, bitwiseXorOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bitwiseXorOp"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2197:1: andExpression : equalityExpression ( bitwiseAndOp equalityExpression )* ;
    public final SSQSA_JavaParser.andExpression_return andExpression() throws RecognitionException {
        SSQSA_JavaParser.andExpression_return retval = new SSQSA_JavaParser.andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.equalityExpression_return equalityExpression413 = null;

        SSQSA_JavaParser.bitwiseAndOp_return bitwiseAndOp414 = null;

        SSQSA_JavaParser.equalityExpression_return equalityExpression415 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2199:5: ( equalityExpression ( bitwiseAndOp equalityExpression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2199:9: equalityExpression ( bitwiseAndOp equalityExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_andExpression12885);
            equalityExpression413=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression413.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2199:28: ( bitwiseAndOp equalityExpression )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==AND) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2199:29: bitwiseAndOp equalityExpression
            	    {
            	    pushFollow(FOLLOW_bitwiseAndOp_in_andExpression12888);
            	    bitwiseAndOp414=bitwiseAndOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(bitwiseAndOp414.getTree(), root_0);
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression12891);
            	    equalityExpression415=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression415.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class bitwiseAndOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitwiseAndOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2202:1: bitwiseAndOp : AND -> ^( LOGICAL_OPERATOR AND ) ;
    public final SSQSA_JavaParser.bitwiseAndOp_return bitwiseAndOp() throws RecognitionException {
        SSQSA_JavaParser.bitwiseAndOp_return retval = new SSQSA_JavaParser.bitwiseAndOp_return();
        retval.start = input.LT(1);
        int bitwiseAndOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AND416=null;

        CommonTree AND416_tree=null;
        RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2203:2: ( AND -> ^( LOGICAL_OPERATOR AND ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2203:4: AND
            {
            AND416=(Token)match(input,AND,FOLLOW_AND_in_bitwiseAndOp12912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AND.add(AND416);



            // AST REWRITE
            // elements: AND
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2203:8: -> ^( LOGICAL_OPERATOR AND )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2203:11: ^( LOGICAL_OPERATOR AND )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOGICAL_OPERATOR, "LOGICAL_OPERATOR"), root_1);

                adaptor.addChild(root_1, stream_AND.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, bitwiseAndOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bitwiseAndOp"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2207:1: equalityExpression : instanceOfExpression ( equalityOp instanceOfExpression )* ;
    public final SSQSA_JavaParser.equalityExpression_return equalityExpression() throws RecognitionException {
        SSQSA_JavaParser.equalityExpression_return retval = new SSQSA_JavaParser.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.instanceOfExpression_return instanceOfExpression417 = null;

        SSQSA_JavaParser.equalityOp_return equalityOp418 = null;

        SSQSA_JavaParser.instanceOfExpression_return instanceOfExpression419 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2209:5: ( instanceOfExpression ( equalityOp instanceOfExpression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2209:9: instanceOfExpression ( equalityOp instanceOfExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression12937);
            instanceOfExpression417=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression417.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2211:9: ( equalityOp instanceOfExpression )*
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==EQUAL||LA128_0==NOT_EQUAL) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2212:6: equalityOp instanceOfExpression
            	    {
            	    pushFollow(FOLLOW_equalityOp_in_equalityExpression12960);
            	    equalityOp418=equalityOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(equalityOp418.getTree(), root_0);
            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression12975);
            	    instanceOfExpression419=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression419.getTree());

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class equalityOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2219:1: equalityOp : ( EQUAL -> ^( COMPARISON_OPERATOR EQUAL ) | NOT_EQUAL -> ^( COMPARISON_OPERATOR NOT_EQUAL ) ) ;
    public final SSQSA_JavaParser.equalityOp_return equalityOp() throws RecognitionException {
        SSQSA_JavaParser.equalityOp_return retval = new SSQSA_JavaParser.equalityOp_return();
        retval.start = input.LT(1);
        int equalityOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EQUAL420=null;
        Token NOT_EQUAL421=null;

        CommonTree EQUAL420_tree=null;
        CommonTree NOT_EQUAL421_tree=null;
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2220:2: ( ( EQUAL -> ^( COMPARISON_OPERATOR EQUAL ) | NOT_EQUAL -> ^( COMPARISON_OPERATOR NOT_EQUAL ) ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2220:6: ( EQUAL -> ^( COMPARISON_OPERATOR EQUAL ) | NOT_EQUAL -> ^( COMPARISON_OPERATOR NOT_EQUAL ) )
            {
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2220:6: ( EQUAL -> ^( COMPARISON_OPERATOR EQUAL ) | NOT_EQUAL -> ^( COMPARISON_OPERATOR NOT_EQUAL ) )
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==EQUAL) ) {
                alt129=1;
            }
            else if ( (LA129_0==NOT_EQUAL) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }
            switch (alt129) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2220:10: EQUAL
                    {
                    EQUAL420=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_equalityOp13009); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL420);



                    // AST REWRITE
                    // elements: EQUAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2220:16: -> ^( COMPARISON_OPERATOR EQUAL )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2220:19: ^( COMPARISON_OPERATOR EQUAL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARISON_OPERATOR, "COMPARISON_OPERATOR"), root_1);

                        adaptor.addChild(root_1, stream_EQUAL.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2221:17: NOT_EQUAL
                    {
                    NOT_EQUAL421=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_equalityOp13035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NOT_EQUAL.add(NOT_EQUAL421);



                    // AST REWRITE
                    // elements: NOT_EQUAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2221:27: -> ^( COMPARISON_OPERATOR NOT_EQUAL )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2221:30: ^( COMPARISON_OPERATOR NOT_EQUAL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARISON_OPERATOR, "COMPARISON_OPERATOR"), root_1);

                        adaptor.addChild(root_1, stream_NOT_EQUAL.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, equalityOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityOp"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2225:1: instanceOfExpression : relationalExpression ( INSTANCEOF type )? ;
    public final SSQSA_JavaParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        SSQSA_JavaParser.instanceOfExpression_return retval = new SSQSA_JavaParser.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INSTANCEOF423=null;
        SSQSA_JavaParser.relationalExpression_return relationalExpression422 = null;

        SSQSA_JavaParser.type_return type424 = null;


        CommonTree INSTANCEOF423_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2227:5: ( relationalExpression ( INSTANCEOF type )? )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2227:9: relationalExpression ( INSTANCEOF type )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression13081);
            relationalExpression422=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression422.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2227:30: ( INSTANCEOF type )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==INSTANCEOF) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2227:31: INSTANCEOF type
                    {
                    INSTANCEOF423=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_instanceOfExpression13084); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF423_tree = (CommonTree)adaptor.create(INSTANCEOF423);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF423_tree, root_0);
                    }
                    pushFollow(FOLLOW_type_in_instanceOfExpression13087);
                    type424=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type424.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2233:1: relationalExpression : shiftExpression ( compareOp shiftExpression )* ;
    public final SSQSA_JavaParser.relationalExpression_return relationalExpression() throws RecognitionException {
        SSQSA_JavaParser.relationalExpression_return retval = new SSQSA_JavaParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.shiftExpression_return shiftExpression425 = null;

        SSQSA_JavaParser.compareOp_return compareOp426 = null;

        SSQSA_JavaParser.shiftExpression_return shiftExpression427 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2235:5: ( shiftExpression ( compareOp shiftExpression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2235:9: shiftExpression ( compareOp shiftExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression13112);
            shiftExpression425=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression425.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2237:9: ( compareOp shiftExpression )*
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);

                if ( ((LA131_0>=GREATER_OR_EQUAL && LA131_0<=GREATER_THAN)||(LA131_0>=LESS_OR_EQUAL && LA131_0<=LESS_THAN)) ) {
                    alt131=1;
                }


                switch (alt131) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2237:13: compareOp shiftExpression
            	    {
            	    pushFollow(FOLLOW_compareOp_in_relationalExpression13128);
            	    compareOp426=compareOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(compareOp426.getTree(), root_0);
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression13144);
            	    shiftExpression427=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression427.getTree());

            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class compareOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compareOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2245:1: compareOp : ( LESS_OR_EQUAL -> ^( COMPARISON_OPERATOR LESS_OR_EQUAL ) | GREATER_OR_EQUAL -> ^( COMPARISON_OPERATOR GREATER_OR_EQUAL ) | LESS_THAN -> ^( COMPARISON_OPERATOR LESS_THAN ) | GREATER_THAN -> ^( COMPARISON_OPERATOR GREATER_THAN ) );
    public final SSQSA_JavaParser.compareOp_return compareOp() throws RecognitionException {
        SSQSA_JavaParser.compareOp_return retval = new SSQSA_JavaParser.compareOp_return();
        retval.start = input.LT(1);
        int compareOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_OR_EQUAL428=null;
        Token GREATER_OR_EQUAL429=null;
        Token LESS_THAN430=null;
        Token GREATER_THAN431=null;

        CommonTree LESS_OR_EQUAL428_tree=null;
        CommonTree GREATER_OR_EQUAL429_tree=null;
        CommonTree LESS_THAN430_tree=null;
        CommonTree GREATER_THAN431_tree=null;
        RewriteRuleTokenStream stream_GREATER_THAN=new RewriteRuleTokenStream(adaptor,"token GREATER_THAN");
        RewriteRuleTokenStream stream_LESS_OR_EQUAL=new RewriteRuleTokenStream(adaptor,"token LESS_OR_EQUAL");
        RewriteRuleTokenStream stream_GREATER_OR_EQUAL=new RewriteRuleTokenStream(adaptor,"token GREATER_OR_EQUAL");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2246:2: ( LESS_OR_EQUAL -> ^( COMPARISON_OPERATOR LESS_OR_EQUAL ) | GREATER_OR_EQUAL -> ^( COMPARISON_OPERATOR GREATER_OR_EQUAL ) | LESS_THAN -> ^( COMPARISON_OPERATOR LESS_THAN ) | GREATER_THAN -> ^( COMPARISON_OPERATOR GREATER_THAN ) )
            int alt132=4;
            switch ( input.LA(1) ) {
            case LESS_OR_EQUAL:
                {
                alt132=1;
                }
                break;
            case GREATER_OR_EQUAL:
                {
                alt132=2;
                }
                break;
            case LESS_THAN:
                {
                alt132=3;
                }
                break;
            case GREATER_THAN:
                {
                alt132=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;
            }

            switch (alt132) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2246:4: LESS_OR_EQUAL
                    {
                    LESS_OR_EQUAL428=(Token)match(input,LESS_OR_EQUAL,FOLLOW_LESS_OR_EQUAL_in_compareOp13171); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LESS_OR_EQUAL.add(LESS_OR_EQUAL428);



                    // AST REWRITE
                    // elements: LESS_OR_EQUAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2246:18: -> ^( COMPARISON_OPERATOR LESS_OR_EQUAL )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2246:21: ^( COMPARISON_OPERATOR LESS_OR_EQUAL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARISON_OPERATOR, "COMPARISON_OPERATOR"), root_1);

                        adaptor.addChild(root_1, stream_LESS_OR_EQUAL.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2247:17: GREATER_OR_EQUAL
                    {
                    GREATER_OR_EQUAL429=(Token)match(input,GREATER_OR_EQUAL,FOLLOW_GREATER_OR_EQUAL_in_compareOp13197); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GREATER_OR_EQUAL.add(GREATER_OR_EQUAL429);



                    // AST REWRITE
                    // elements: GREATER_OR_EQUAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2247:34: -> ^( COMPARISON_OPERATOR GREATER_OR_EQUAL )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2247:37: ^( COMPARISON_OPERATOR GREATER_OR_EQUAL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARISON_OPERATOR, "COMPARISON_OPERATOR"), root_1);

                        adaptor.addChild(root_1, stream_GREATER_OR_EQUAL.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2248:17: LESS_THAN
                    {
                    LESS_THAN430=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_compareOp13223); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN430);



                    // AST REWRITE
                    // elements: LESS_THAN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2248:27: -> ^( COMPARISON_OPERATOR LESS_THAN )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2248:30: ^( COMPARISON_OPERATOR LESS_THAN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARISON_OPERATOR, "COMPARISON_OPERATOR"), root_1);

                        adaptor.addChild(root_1, stream_LESS_THAN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2249:17: GREATER_THAN
                    {
                    GREATER_THAN431=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_compareOp13249); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GREATER_THAN.add(GREATER_THAN431);



                    // AST REWRITE
                    // elements: GREATER_THAN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2249:30: -> ^( COMPARISON_OPERATOR GREATER_THAN )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2249:33: ^( COMPARISON_OPERATOR GREATER_THAN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARISON_OPERATOR, "COMPARISON_OPERATOR"), root_1);

                        adaptor.addChild(root_1, stream_GREATER_THAN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, compareOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compareOp"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2252:1: shiftExpression : additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )* ;
    public final SSQSA_JavaParser.shiftExpression_return shiftExpression() throws RecognitionException {
        SSQSA_JavaParser.shiftExpression_return retval = new SSQSA_JavaParser.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BIT_SHIFT_RIGHT433=null;
        Token SHIFT_RIGHT434=null;
        Token SHIFT_LEFT435=null;
        SSQSA_JavaParser.additiveExpression_return additiveExpression432 = null;

        SSQSA_JavaParser.additiveExpression_return additiveExpression436 = null;


        CommonTree BIT_SHIFT_RIGHT433_tree=null;
        CommonTree SHIFT_RIGHT434_tree=null;
        CommonTree SHIFT_LEFT435_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2254:5: ( additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2254:9: additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression13274);
            additiveExpression432=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression432.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2256:9: ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )*
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==BIT_SHIFT_RIGHT||LA134_0==SHIFT_LEFT||LA134_0==SHIFT_RIGHT) ) {
                    alt134=1;
                }


                switch (alt134) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2256:13: ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression
            	    {
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2256:13: ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT )
            	    int alt133=3;
            	    switch ( input.LA(1) ) {
            	    case BIT_SHIFT_RIGHT:
            	        {
            	        alt133=1;
            	        }
            	        break;
            	    case SHIFT_RIGHT:
            	        {
            	        alt133=2;
            	        }
            	        break;
            	    case SHIFT_LEFT:
            	        {
            	        alt133=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 133, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt133) {
            	        case 1 :
            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2256:17: BIT_SHIFT_RIGHT
            	            {
            	            BIT_SHIFT_RIGHT433=(Token)match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_shiftExpression13293); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BIT_SHIFT_RIGHT433_tree = (CommonTree)adaptor.create(BIT_SHIFT_RIGHT433);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BIT_SHIFT_RIGHT433_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2258:17: SHIFT_RIGHT
            	            {
            	            SHIFT_RIGHT434=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_shiftExpression13313); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            SHIFT_RIGHT434_tree = (CommonTree)adaptor.create(SHIFT_RIGHT434);
            	            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_RIGHT434_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2260:17: SHIFT_LEFT
            	            {
            	            SHIFT_LEFT435=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_shiftExpression13333); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            SHIFT_LEFT435_tree = (CommonTree)adaptor.create(SHIFT_LEFT435);
            	            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_LEFT435_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression13364);
            	    additiveExpression436=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression436.getTree());

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2272:1: additiveExpression : multiplicativeExpression ( additiveOp multiplicativeExpression )* ;
    public final SSQSA_JavaParser.additiveExpression_return additiveExpression() throws RecognitionException {
        SSQSA_JavaParser.additiveExpression_return retval = new SSQSA_JavaParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.multiplicativeExpression_return multiplicativeExpression437 = null;

        SSQSA_JavaParser.additiveOp_return additiveOp438 = null;

        SSQSA_JavaParser.multiplicativeExpression_return multiplicativeExpression439 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2274:5: ( multiplicativeExpression ( additiveOp multiplicativeExpression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2274:9: multiplicativeExpression ( additiveOp multiplicativeExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression13399);
            multiplicativeExpression437=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression437.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2276:9: ( additiveOp multiplicativeExpression )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==MINUS||LA135_0==PLUS) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2276:13: additiveOp multiplicativeExpression
            	    {
            	    pushFollow(FOLLOW_additiveOp_in_additiveExpression13414);
            	    additiveOp438=additiveOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(additiveOp438.getTree(), root_0);
            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression13430);
            	    multiplicativeExpression439=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression439.getTree());

            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class additiveOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2284:1: additiveOp : ( PLUS -> ^( OPERATOR PLUS ) | MINUS -> ^( OPERATOR MINUS ) ) ;
    public final SSQSA_JavaParser.additiveOp_return additiveOp() throws RecognitionException {
        SSQSA_JavaParser.additiveOp_return retval = new SSQSA_JavaParser.additiveOp_return();
        retval.start = input.LT(1);
        int additiveOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PLUS440=null;
        Token MINUS441=null;

        CommonTree PLUS440_tree=null;
        CommonTree MINUS441_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2285:2: ( ( PLUS -> ^( OPERATOR PLUS ) | MINUS -> ^( OPERATOR MINUS ) ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2285:3: ( PLUS -> ^( OPERATOR PLUS ) | MINUS -> ^( OPERATOR MINUS ) )
            {
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2285:3: ( PLUS -> ^( OPERATOR PLUS ) | MINUS -> ^( OPERATOR MINUS ) )
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==PLUS) ) {
                alt136=1;
            }
            else if ( (LA136_0==MINUS) ) {
                alt136=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;
            }
            switch (alt136) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2285:7: PLUS
                    {
                    PLUS440=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveOp13460); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS440);



                    // AST REWRITE
                    // elements: PLUS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2285:12: -> ^( OPERATOR PLUS )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2285:15: ^( OPERATOR PLUS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                        adaptor.addChild(root_1, stream_PLUS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2287:17: MINUS
                    {
                    MINUS441=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveOp13487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS441);



                    // AST REWRITE
                    // elements: MINUS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2287:23: -> ^( OPERATOR MINUS )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2287:26: ^( OPERATOR MINUS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                        adaptor.addChild(root_1, stream_MINUS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, additiveOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveOp"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2294:1: multiplicativeExpression : unaryExpression ( mulOp unaryExpression )* ;
    public final SSQSA_JavaParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        SSQSA_JavaParser.multiplicativeExpression_return retval = new SSQSA_JavaParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.unaryExpression_return unaryExpression442 = null;

        SSQSA_JavaParser.mulOp_return mulOp443 = null;

        SSQSA_JavaParser.unaryExpression_return unaryExpression444 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2296:5: ( unaryExpression ( mulOp unaryExpression )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2296:9: unaryExpression ( mulOp unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression13529);
            unaryExpression442=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression442.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2298:9: ( mulOp unaryExpression )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==DIV||LA137_0==MOD||LA137_0==STAR) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2298:10: mulOp unaryExpression
            	    {
            	    pushFollow(FOLLOW_mulOp_in_multiplicativeExpression13542);
            	    mulOp443=mulOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(mulOp443.getTree(), root_0);
            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression13558);
            	    unaryExpression444=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression444.getTree());

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class mulOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mulOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2310:1: mulOp : ( STAR -> ^( OPERATOR STAR ) | DIV -> ^( OPERATOR DIV ) | MOD -> ^( OPERATOR MOD ) ) ;
    public final SSQSA_JavaParser.mulOp_return mulOp() throws RecognitionException {
        SSQSA_JavaParser.mulOp_return retval = new SSQSA_JavaParser.mulOp_return();
        retval.start = input.LT(1);
        int mulOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token STAR445=null;
        Token DIV446=null;
        Token MOD447=null;

        CommonTree STAR445_tree=null;
        CommonTree DIV446_tree=null;
        CommonTree MOD447_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleTokenStream stream_MOD=new RewriteRuleTokenStream(adaptor,"token MOD");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2310:7: ( ( STAR -> ^( OPERATOR STAR ) | DIV -> ^( OPERATOR DIV ) | MOD -> ^( OPERATOR MOD ) ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2310:8: ( STAR -> ^( OPERATOR STAR ) | DIV -> ^( OPERATOR DIV ) | MOD -> ^( OPERATOR MOD ) )
            {
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2310:8: ( STAR -> ^( OPERATOR STAR ) | DIV -> ^( OPERATOR DIV ) | MOD -> ^( OPERATOR MOD ) )
            int alt138=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt138=1;
                }
                break;
            case DIV:
                {
                alt138=2;
                }
                break;
            case MOD:
                {
                alt138=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }

            switch (alt138) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2310:12: STAR
                    {
                    STAR445=(Token)match(input,STAR,FOLLOW_STAR_in_mulOp13595); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(STAR445);



                    // AST REWRITE
                    // elements: STAR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2310:17: -> ^( OPERATOR STAR )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2310:20: ^( OPERATOR STAR )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                        adaptor.addChild(root_1, stream_STAR.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2312:17: DIV
                    {
                    DIV446=(Token)match(input,DIV,FOLLOW_DIV_in_mulOp13622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DIV.add(DIV446);



                    // AST REWRITE
                    // elements: DIV
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2312:21: -> ^( OPERATOR DIV )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2312:24: ^( OPERATOR DIV )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                        adaptor.addChild(root_1, stream_DIV.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2314:17: MOD
                    {
                    MOD447=(Token)match(input,MOD,FOLLOW_MOD_in_mulOp13649); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MOD.add(MOD447);



                    // AST REWRITE
                    // elements: MOD
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2314:21: -> ^( OPERATOR MOD )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2314:24: ^( OPERATOR MOD )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                        adaptor.addChild(root_1, stream_MOD.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, mulOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mulOp"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2319:1: unaryExpression : ( additiveOp unaryExpression | incDecOp postfixedExpression -> ^( ASSIGNMENT_STATEMENT incDecOp postfixedExpression ) | unaryExpressionNotPlusMinus );
    public final SSQSA_JavaParser.unaryExpression_return unaryExpression() throws RecognitionException {
        SSQSA_JavaParser.unaryExpression_return retval = new SSQSA_JavaParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        SSQSA_JavaParser.additiveOp_return additiveOp448 = null;

        SSQSA_JavaParser.unaryExpression_return unaryExpression449 = null;

        SSQSA_JavaParser.incDecOp_return incDecOp450 = null;

        SSQSA_JavaParser.postfixedExpression_return postfixedExpression451 = null;

        SSQSA_JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus452 = null;


        RewriteRuleSubtreeStream stream_postfixedExpression=new RewriteRuleSubtreeStream(adaptor,"rule postfixedExpression");
        RewriteRuleSubtreeStream stream_incDecOp=new RewriteRuleSubtreeStream(adaptor,"rule incDecOp");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2321:5: ( additiveOp unaryExpression | incDecOp postfixedExpression -> ^( ASSIGNMENT_STATEMENT incDecOp postfixedExpression ) | unaryExpressionNotPlusMinus )
            int alt139=3;
            switch ( input.LA(1) ) {
            case MINUS:
            case PLUS:
                {
                alt139=1;
                }
                break;
            case DEC:
            case INC:
                {
                alt139=2;
                }
                break;
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case NOT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case IDENT:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt139=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;
            }

            switch (alt139) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2321:9: additiveOp unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_additiveOp_in_unaryExpression13689);
                    additiveOp448=additiveOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveOp448.getTree());
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression13691);
                    unaryExpression449=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression449.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2323:9: incDecOp postfixedExpression
                    {
                    pushFollow(FOLLOW_incDecOp_in_unaryExpression13702);
                    incDecOp450=incDecOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_incDecOp.add(incDecOp450.getTree());
                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpression13704);
                    postfixedExpression451=postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_postfixedExpression.add(postfixedExpression451.getTree());


                    // AST REWRITE
                    // elements: incDecOp, postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2323:38: -> ^( ASSIGNMENT_STATEMENT incDecOp postfixedExpression )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2323:41: ^( ASSIGNMENT_STATEMENT incDecOp postfixedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGNMENT_STATEMENT, "ASSIGNMENT_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_incDecOp.nextTree());
                        adaptor.addChild(root_1, stream_postfixedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2325:9: unaryExpressionNotPlusMinus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression13725);
                    unaryExpressionNotPlusMinus452=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus452.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class incDecOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "incDecOp"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2329:1: incDecOp : ( INC -> ^( OPERATOR INC ) | DEC -> ^( OPERATOR DEC ) );
    public final SSQSA_JavaParser.incDecOp_return incDecOp() throws RecognitionException {
        SSQSA_JavaParser.incDecOp_return retval = new SSQSA_JavaParser.incDecOp_return();
        retval.start = input.LT(1);
        int incDecOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INC453=null;
        Token DEC454=null;

        CommonTree INC453_tree=null;
        CommonTree DEC454_tree=null;
        RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2330:2: ( INC -> ^( OPERATOR INC ) | DEC -> ^( OPERATOR DEC ) )
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==INC) ) {
                alt140=1;
            }
            else if ( (LA140_0==DEC) ) {
                alt140=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;
            }
            switch (alt140) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2330:4: INC
                    {
                    INC453=(Token)match(input,INC,FOLLOW_INC_in_incDecOp13741); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INC.add(INC453);



                    // AST REWRITE
                    // elements: INC
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2330:8: -> ^( OPERATOR INC )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2330:11: ^( OPERATOR INC )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                        adaptor.addChild(root_1, stream_INC.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2331:4: DEC
                    {
                    DEC454=(Token)match(input,DEC,FOLLOW_DEC_in_incDecOp13754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEC.add(DEC454);



                    // AST REWRITE
                    // elements: DEC
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2331:8: -> ^( OPERATOR DEC )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2331:11: ^( OPERATOR DEC )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_1);

                        adaptor.addChild(root_1, stream_DEC.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, incDecOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "incDecOp"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2335:1: unaryExpressionNotPlusMinus : ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( EDITABLE_TOKEN[\"CAST_EXPRESSION\"] type unaryExpression ) | postfixedExpression );
    public final SSQSA_JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        SSQSA_JavaParser.unaryExpressionNotPlusMinus_return retval = new SSQSA_JavaParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOT455=null;
        Token LOGICAL_NOT457=null;
        Token LPAREN459=null;
        Token RPAREN461=null;
        SSQSA_JavaParser.unaryExpression_return unaryExpression456 = null;

        SSQSA_JavaParser.unaryExpression_return unaryExpression458 = null;

        SSQSA_JavaParser.type_return type460 = null;

        SSQSA_JavaParser.unaryExpression_return unaryExpression462 = null;

        SSQSA_JavaParser.postfixedExpression_return postfixedExpression463 = null;


        CommonTree NOT455_tree=null;
        CommonTree LOGICAL_NOT457_tree=null;
        CommonTree LPAREN459_tree=null;
        CommonTree RPAREN461_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LOGICAL_NOT=new RewriteRuleTokenStream(adaptor,"token LOGICAL_NOT");
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2337:5: ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( EDITABLE_TOKEN[\"CAST_EXPRESSION\"] type unaryExpression ) | postfixedExpression )
            int alt141=4;
            alt141 = dfa141.predict(input);
            switch (alt141) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2337:9: NOT unaryExpression
                    {
                    NOT455=(Token)match(input,NOT,FOLLOW_NOT_in_unaryExpressionNotPlusMinus13779); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NOT.add(NOT455);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus13781);
                    unaryExpression456=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression456.getTree());


                    // AST REWRITE
                    // elements: NOT, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2337:57: -> ^( NOT unaryExpression )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2337:61: ^( NOT unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2339:9: LOGICAL_NOT unaryExpression
                    {
                    LOGICAL_NOT457=(Token)match(input,LOGICAL_NOT,FOLLOW_LOGICAL_NOT_in_unaryExpressionNotPlusMinus13829); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOGICAL_NOT.add(LOGICAL_NOT457);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus13831);
                    unaryExpression458=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression458.getTree());


                    // AST REWRITE
                    // elements: LOGICAL_NOT, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2339:57: -> ^( LOGICAL_NOT unaryExpression )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2339:61: ^( LOGICAL_NOT unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_LOGICAL_NOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2341:9: LPAREN type RPAREN unaryExpression
                    {
                    LPAREN459=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpressionNotPlusMinus13871); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN459);

                    pushFollow(FOLLOW_type_in_unaryExpressionNotPlusMinus13873);
                    type460=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type460.getTree());
                    RPAREN461=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpressionNotPlusMinus13875); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN461);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus13877);
                    unaryExpression462=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression462.getTree());


                    // AST REWRITE
                    // elements: type, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2341:57: -> ^( EDITABLE_TOKEN[\"CAST_EXPRESSION\"] type unaryExpression )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2341:61: ^( EDITABLE_TOKEN[\"CAST_EXPRESSION\"] type unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EDITABLE_TOKEN, "CAST_EXPRESSION"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2343:9: postfixedExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpressionNotPlusMinus13913);
                    postfixedExpression463=postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, postfixedExpression463.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class postfixedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postfixedExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2351:1: postfixedExpression : ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> $postfixedExpression DOT IDENT ) ( arguments -> ^( FUNCTION_CALL ^( NAME $postfixedExpression) ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> $postfixedExpression | Super= SUPER arguments -> ^( CONSTRUCTOR_CALL[$Super, \"CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] $postfixedExpression SUPER ) ^( NAME IDENT ) ) ) ( arguments -> ^( FUNCTION_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> $postfixedExpression ^( SEPARATOR LBRACK ) expression ^( SEPARATOR RBRACK ) )* ( INC -> ^( ASSIGNMENT_STATEMENT $postfixedExpression ^( OPERATOR INC ) ) | DEC -> ^( ASSIGNMENT_STATEMENT $postfixedExpression ^( OPERATOR DEC ) ) )? ;
    public final SSQSA_JavaParser.postfixedExpression_return postfixedExpression() throws RecognitionException {
        SSQSA_JavaParser.postfixedExpression_return retval = new SSQSA_JavaParser.postfixedExpression_return();
        retval.start = input.LT(1);
        int postfixedExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token outerDot=null;
        Token Super=null;
        Token innerDot=null;
        Token IDENT466=null;
        Token THIS468=null;
        Token SUPER470=null;
        Token IDENT471=null;
        Token LBRACK474=null;
        Token RBRACK476=null;
        Token INC477=null;
        Token DEC478=null;
        SSQSA_JavaParser.primaryExpression_return primaryExpression464 = null;

        SSQSA_JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified465 = null;

        SSQSA_JavaParser.arguments_return arguments467 = null;

        SSQSA_JavaParser.arguments_return arguments469 = null;

        SSQSA_JavaParser.arguments_return arguments472 = null;

        SSQSA_JavaParser.innerNewExpression_return innerNewExpression473 = null;

        SSQSA_JavaParser.expression_return expression475 = null;


        CommonTree outerDot_tree=null;
        CommonTree Super_tree=null;
        CommonTree innerDot_tree=null;
        CommonTree IDENT466_tree=null;
        CommonTree THIS468_tree=null;
        CommonTree SUPER470_tree=null;
        CommonTree IDENT471_tree=null;
        CommonTree LBRACK474_tree=null;
        CommonTree RBRACK476_tree=null;
        CommonTree INC477_tree=null;
        CommonTree DEC478_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");
        RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2355:5: ( ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> $postfixedExpression DOT IDENT ) ( arguments -> ^( FUNCTION_CALL ^( NAME $postfixedExpression) ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> $postfixedExpression | Super= SUPER arguments -> ^( CONSTRUCTOR_CALL[$Super, \"CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] $postfixedExpression SUPER ) ^( NAME IDENT ) ) ) ( arguments -> ^( FUNCTION_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> $postfixedExpression ^( SEPARATOR LBRACK ) expression ^( SEPARATOR RBRACK ) )* ( INC -> ^( ASSIGNMENT_STATEMENT $postfixedExpression ^( OPERATOR INC ) ) | DEC -> ^( ASSIGNMENT_STATEMENT $postfixedExpression ^( OPERATOR DEC ) ) )? )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2355:9: ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> $postfixedExpression DOT IDENT ) ( arguments -> ^( FUNCTION_CALL ^( NAME $postfixedExpression) ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> $postfixedExpression | Super= SUPER arguments -> ^( CONSTRUCTOR_CALL[$Super, \"CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] $postfixedExpression SUPER ) ^( NAME IDENT ) ) ) ( arguments -> ^( FUNCTION_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> $postfixedExpression ^( SEPARATOR LBRACK ) expression ^( SEPARATOR RBRACK ) )* ( INC -> ^( ASSIGNMENT_STATEMENT $postfixedExpression ^( OPERATOR INC ) ) | DEC -> ^( ASSIGNMENT_STATEMENT $postfixedExpression ^( OPERATOR DEC ) ) )?
            {
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2355:9: ( primaryExpression -> primaryExpression )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2355:13: primaryExpression
            {
            pushFollow(FOLLOW_primaryExpression_in_postfixedExpression13989);
            primaryExpression464=primaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primaryExpression.add(primaryExpression464.getTree());


            // AST REWRITE
            // elements: primaryExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2355:53: -> primaryExpression
            {
                adaptor.addChild(root_0, stream_primaryExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2361:9: (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> $postfixedExpression DOT IDENT ) ( arguments -> ^( FUNCTION_CALL ^( NAME $postfixedExpression) ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> $postfixedExpression | Super= SUPER arguments -> ^( CONSTRUCTOR_CALL[$Super, \"CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] $postfixedExpression SUPER ) ^( NAME IDENT ) ) ) ( arguments -> ^( FUNCTION_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> $postfixedExpression ^( SEPARATOR LBRACK ) expression ^( SEPARATOR RBRACK ) )*
            loop146:
            do {
                int alt146=3;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==DOT) ) {
                    alt146=1;
                }
                else if ( (LA146_0==LBRACK) ) {
                    alt146=2;
                }


                switch (alt146) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2361:13: outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> $postfixedExpression DOT IDENT ) ( arguments -> ^( FUNCTION_CALL ^( NAME $postfixedExpression) ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> $postfixedExpression | Super= SUPER arguments -> ^( CONSTRUCTOR_CALL[$Super, \"CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] $postfixedExpression SUPER ) ^( NAME IDENT ) ) ) ( arguments -> ^( FUNCTION_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
            	    {
            	    outerDot=(Token)match(input,DOT,FOLLOW_DOT_in_postfixedExpression14056); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(outerDot);

            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2363:13: ( ( ( genericTypeArgumentListSimplified )? IDENT -> $postfixedExpression DOT IDENT ) ( arguments -> ^( FUNCTION_CALL ^( NAME $postfixedExpression) ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> $postfixedExpression | Super= SUPER arguments -> ^( CONSTRUCTOR_CALL[$Super, \"CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] $postfixedExpression SUPER ) ^( NAME IDENT ) ) ) ( arguments -> ^( FUNCTION_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
            	    int alt145=5;
            	    switch ( input.LA(1) ) {
            	    case LESS_THAN:
            	    case IDENT:
            	        {
            	        alt145=1;
            	        }
            	        break;
            	    case THIS:
            	        {
            	        alt145=2;
            	        }
            	        break;
            	    case SUPER:
            	        {
            	        int LA145_3 = input.LA(2);

            	        if ( (LA145_3==DOT) ) {
            	            alt145=4;
            	        }
            	        else if ( (LA145_3==LPAREN) ) {
            	            alt145=3;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 145, 3, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case NEW:
            	        {
            	        alt145=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 145, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt145) {
            	        case 1 :
            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2363:17: ( ( genericTypeArgumentListSimplified )? IDENT -> $postfixedExpression DOT IDENT ) ( arguments -> ^( FUNCTION_CALL ^( NAME $postfixedExpression) ( genericTypeArgumentListSimplified )? arguments ) )?
            	            {
            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2363:17: ( ( genericTypeArgumentListSimplified )? IDENT -> $postfixedExpression DOT IDENT )
            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2363:21: ( genericTypeArgumentListSimplified )? IDENT
            	            {
            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2363:21: ( genericTypeArgumentListSimplified )?
            	            int alt142=2;
            	            int LA142_0 = input.LA(1);

            	            if ( (LA142_0==LESS_THAN) ) {
            	                alt142=1;
            	            }
            	            switch (alt142) {
            	                case 1 :
            	                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: genericTypeArgumentListSimplified
            	                    {
            	                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_postfixedExpression14107);
            	                    genericTypeArgumentListSimplified465=genericTypeArgumentListSimplified();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified465.getTree());

            	                    }
            	                    break;

            	            }

            	            IDENT466=(Token)match(input,IDENT,FOLLOW_IDENT_in_postfixedExpression14191); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IDENT.add(IDENT466);



            	            // AST REWRITE
            	            // elements: DOT, postfixedExpression, IDENT
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 2367:53: -> $postfixedExpression DOT IDENT
            	            {
            	                adaptor.addChild(root_0, stream_retval.nextTree());
            	                adaptor.addChild(root_0, stream_DOT.nextNode());
            	                adaptor.addChild(root_0, stream_IDENT.nextNode());

            	            }

            	            retval.tree = root_0;}
            	            }

            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2373:17: ( arguments -> ^( FUNCTION_CALL ^( NAME $postfixedExpression) ( genericTypeArgumentListSimplified )? arguments ) )?
            	            int alt143=2;
            	            int LA143_0 = input.LA(1);

            	            if ( (LA143_0==LPAREN) ) {
            	                alt143=1;
            	            }
            	            switch (alt143) {
            	                case 1 :
            	                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2373:21: arguments
            	                    {
            	                    pushFollow(FOLLOW_arguments_in_postfixedExpression14297);
            	                    arguments467=arguments();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_arguments.add(arguments467.getTree());


            	                    // AST REWRITE
            	                    // elements: postfixedExpression, genericTypeArgumentListSimplified, arguments
            	                    // token labels: 
            	                    // rule labels: retval
            	                    // token list labels: 
            	                    // rule list labels: 
            	                    // wildcard labels: 
            	                    if ( state.backtracking==0 ) {
            	                    retval.tree = root_0;
            	                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	                    root_0 = (CommonTree)adaptor.nil();
            	                    // 2373:53: -> ^( FUNCTION_CALL ^( NAME $postfixedExpression) ( genericTypeArgumentListSimplified )? arguments )
            	                    {
            	                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2373:57: ^( FUNCTION_CALL ^( NAME $postfixedExpression) ( genericTypeArgumentListSimplified )? arguments )
            	                        {
            	                        CommonTree root_1 = (CommonTree)adaptor.nil();
            	                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

            	                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2373:73: ^( NAME $postfixedExpression)
            	                        {
            	                        CommonTree root_2 = (CommonTree)adaptor.nil();
            	                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

            	                        adaptor.addChild(root_2, stream_retval.nextTree());

            	                        adaptor.addChild(root_1, root_2);
            	                        }
            	                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2373:102: ( genericTypeArgumentListSimplified )?
            	                        if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
            	                            adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

            	                        }
            	                        stream_genericTypeArgumentListSimplified.reset();
            	                        adaptor.addChild(root_1, stream_arguments.nextTree());

            	                        adaptor.addChild(root_0, root_1);
            	                        }

            	                    }

            	                    retval.tree = root_0;}
            	                    }
            	                    break;

            	            }


            	            }
            	            break;
            	        case 2 :
            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2377:17: THIS
            	            {
            	            THIS468=(Token)match(input,THIS,FOLLOW_THIS_in_postfixedExpression14377); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_THIS.add(THIS468);



            	            // AST REWRITE
            	            // elements: postfixedExpression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 2377:53: -> $postfixedExpression
            	            {
            	                adaptor.addChild(root_0, stream_retval.nextTree());

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 3 :
            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2379:17: Super= SUPER arguments
            	            {
            	            Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_postfixedExpression14436); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SUPER.add(Super);

            	            pushFollow(FOLLOW_arguments_in_postfixedExpression14438);
            	            arguments469=arguments();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_arguments.add(arguments469.getTree());


            	            // AST REWRITE
            	            // elements: postfixedExpression, arguments
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 2379:53: -> ^( CONSTRUCTOR_CALL[$Super, \"CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
            	            {
            	                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2379:57: ^( CONSTRUCTOR_CALL[$Super, \"CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCTOR_CALL, Super, "CONSTRUCTOR_CALL"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_arguments.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 4 :
            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2381:17: ( SUPER innerDot= DOT IDENT -> ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] $postfixedExpression SUPER ) ^( NAME IDENT ) ) ) ( arguments -> ^( FUNCTION_CALL $postfixedExpression arguments ) )?
            	            {
            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2381:17: ( SUPER innerDot= DOT IDENT -> ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] $postfixedExpression SUPER ) ^( NAME IDENT ) ) )
            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2381:21: SUPER innerDot= DOT IDENT
            	            {
            	            SUPER470=(Token)match(input,SUPER,FOLLOW_SUPER_in_postfixedExpression14488); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SUPER.add(SUPER470);

            	            innerDot=(Token)match(input,DOT,FOLLOW_DOT_in_postfixedExpression14492); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_DOT.add(innerDot);

            	            IDENT471=(Token)match(input,IDENT,FOLLOW_IDENT_in_postfixedExpression14494); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IDENT.add(IDENT471);



            	            // AST REWRITE
            	            // elements: postfixedExpression, IDENT, SUPER
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 2381:53: -> ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] $postfixedExpression SUPER ) ^( NAME IDENT ) )
            	            {
            	                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2381:57: ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] $postfixedExpression SUPER ) ^( NAME IDENT ) )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EDITABLE_TOKEN, "."), root_1);

            	                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2381:79: ^( EDITABLE_TOKEN[\".\"] $postfixedExpression SUPER )
            	                {
            	                CommonTree root_2 = (CommonTree)adaptor.nil();
            	                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EDITABLE_TOKEN, "."), root_2);

            	                adaptor.addChild(root_2, stream_retval.nextTree());
            	                adaptor.addChild(root_2, stream_SUPER.nextNode());

            	                adaptor.addChild(root_1, root_2);
            	                }
            	                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2381:129: ^( NAME IDENT )
            	                {
            	                CommonTree root_2 = (CommonTree)adaptor.nil();
            	                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

            	                adaptor.addChild(root_2, stream_IDENT.nextNode());

            	                adaptor.addChild(root_1, root_2);
            	                }

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }

            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2385:17: ( arguments -> ^( FUNCTION_CALL $postfixedExpression arguments ) )?
            	            int alt144=2;
            	            int LA144_0 = input.LA(1);

            	            if ( (LA144_0==LPAREN) ) {
            	                alt144=1;
            	            }
            	            switch (alt144) {
            	                case 1 :
            	                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2385:21: arguments
            	                    {
            	                    pushFollow(FOLLOW_arguments_in_postfixedExpression14567);
            	                    arguments472=arguments();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_arguments.add(arguments472.getTree());


            	                    // AST REWRITE
            	                    // elements: postfixedExpression, arguments
            	                    // token labels: 
            	                    // rule labels: retval
            	                    // token list labels: 
            	                    // rule list labels: 
            	                    // wildcard labels: 
            	                    if ( state.backtracking==0 ) {
            	                    retval.tree = root_0;
            	                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	                    root_0 = (CommonTree)adaptor.nil();
            	                    // 2385:53: -> ^( FUNCTION_CALL $postfixedExpression arguments )
            	                    {
            	                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2385:57: ^( FUNCTION_CALL $postfixedExpression arguments )
            	                        {
            	                        CommonTree root_1 = (CommonTree)adaptor.nil();
            	                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

            	                        adaptor.addChild(root_1, stream_retval.nextTree());
            	                        adaptor.addChild(root_1, stream_arguments.nextTree());

            	                        adaptor.addChild(root_0, root_1);
            	                        }

            	                    }

            	                    retval.tree = root_0;}
            	                    }
            	                    break;

            	            }


            	            }
            	            break;
            	        case 5 :
            	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2389:17: innerNewExpression
            	            {
            	            pushFollow(FOLLOW_innerNewExpression_in_postfixedExpression14640);
            	            innerNewExpression473=innerNewExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_innerNewExpression.add(innerNewExpression473.getTree());


            	            // AST REWRITE
            	            // elements: innerNewExpression, postfixedExpression, DOT
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 2389:53: -> ^( DOT $postfixedExpression innerNewExpression )
            	            {
            	                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2389:57: ^( DOT $postfixedExpression innerNewExpression )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_innerNewExpression.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 2 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2393:13: LBRACK expression RBRACK
            	    {
            	    LBRACK474=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_postfixedExpression14699); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK474);

            	    pushFollow(FOLLOW_expression_in_postfixedExpression14701);
            	    expression475=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression475.getTree());
            	    RBRACK476=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_postfixedExpression14703); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK476);



            	    // AST REWRITE
            	    // elements: expression, RBRACK, postfixedExpression, LBRACK
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2395:17: -> $postfixedExpression ^( SEPARATOR LBRACK ) expression ^( SEPARATOR RBRACK )
            	    {
            	        adaptor.addChild(root_0, stream_retval.nextTree());
            	        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2395:53: ^( SEPARATOR LBRACK )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_1);

            	        adaptor.addChild(root_1, stream_LBRACK.nextNode());

            	        adaptor.addChild(root_0, root_1);
            	        }
            	        adaptor.addChild(root_0, stream_expression.nextTree());
            	        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2395:84: ^( SEPARATOR RBRACK )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_1);

            	        adaptor.addChild(root_1, stream_RBRACK.nextNode());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2401:9: ( INC -> ^( ASSIGNMENT_STATEMENT $postfixedExpression ^( OPERATOR INC ) ) | DEC -> ^( ASSIGNMENT_STATEMENT $postfixedExpression ^( OPERATOR DEC ) ) )?
            int alt147=3;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==INC) ) {
                alt147=1;
            }
            else if ( (LA147_0==DEC) ) {
                alt147=2;
            }
            switch (alt147) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2401:13: INC
                    {
                    INC477=(Token)match(input,INC,FOLLOW_INC_in_postfixedExpression14797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INC.add(INC477);



                    // AST REWRITE
                    // elements: postfixedExpression, INC
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2401:17: -> ^( ASSIGNMENT_STATEMENT $postfixedExpression ^( OPERATOR INC ) )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2401:20: ^( ASSIGNMENT_STATEMENT $postfixedExpression ^( OPERATOR INC ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGNMENT_STATEMENT, "ASSIGNMENT_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2401:65: ^( OPERATOR INC )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_2);

                        adaptor.addChild(root_2, stream_INC.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2403:13: DEC
                    {
                    DEC478=(Token)match(input,DEC,FOLLOW_DEC_in_postfixedExpression14828); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEC.add(DEC478);



                    // AST REWRITE
                    // elements: DEC, postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2403:17: -> ^( ASSIGNMENT_STATEMENT $postfixedExpression ^( OPERATOR DEC ) )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2403:20: ^( ASSIGNMENT_STATEMENT $postfixedExpression ^( OPERATOR DEC ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGNMENT_STATEMENT, "ASSIGNMENT_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2403:65: ^( OPERATOR DEC )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR, "OPERATOR"), root_2);

                        adaptor.addChild(root_2, stream_DEC.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, postfixedExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "postfixedExpression"

    public static class primaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primaryExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2413:1: primaryExpression : ( parenthesizedExpression | literal -> ^( CONST literal ) | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( CONSTRUCTOR_CALL[$SUPER, \"CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( FUNCTION_CALL ^( NAME IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( FUNCTION_CALL ^( NAME IDENT ) genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( CONSTRUCTOR_CALL[$THIS, \"CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> ^( IGNORE THIS ) ) ( arguments -> ^( CONSTRUCTOR_CALL[$THIS, \"CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( CONSTRUCTOR_CALL[$SUPER, \"CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( FUNCTION_CALL ^( NAME IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> $primaryExpression | VOID DOT CLASS );
    public final SSQSA_JavaParser.primaryExpression_return primaryExpression() throws RecognitionException {
        SSQSA_JavaParser.primaryExpression_return retval = new SSQSA_JavaParser.primaryExpression_return();
        retval.start = input.LT(1);
        int primaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SUPER484=null;
        Token DOT486=null;
        Token IDENT487=null;
        Token IDENT489=null;
        Token THIS491=null;
        Token THIS493=null;
        Token SUPER495=null;
        Token SUPER497=null;
        Token DOT498=null;
        Token IDENT499=null;
        Token DOT503=null;
        Token CLASS504=null;
        Token VOID505=null;
        Token DOT506=null;
        Token CLASS507=null;
        SSQSA_JavaParser.parenthesizedExpression_return parenthesizedExpression479 = null;

        SSQSA_JavaParser.literal_return literal480 = null;

        SSQSA_JavaParser.newExpression_return newExpression481 = null;

        SSQSA_JavaParser.qualifiedIdentExpression_return qualifiedIdentExpression482 = null;

        SSQSA_JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified483 = null;

        SSQSA_JavaParser.arguments_return arguments485 = null;

        SSQSA_JavaParser.arguments_return arguments488 = null;

        SSQSA_JavaParser.arguments_return arguments490 = null;

        SSQSA_JavaParser.arguments_return arguments492 = null;

        SSQSA_JavaParser.arguments_return arguments494 = null;

        SSQSA_JavaParser.arguments_return arguments496 = null;

        SSQSA_JavaParser.arguments_return arguments500 = null;

        SSQSA_JavaParser.primitiveType_return primitiveType501 = null;

        SSQSA_JavaParser.arrayDeclarator_return arrayDeclarator502 = null;


        CommonTree SUPER484_tree=null;
        CommonTree DOT486_tree=null;
        CommonTree IDENT487_tree=null;
        CommonTree IDENT489_tree=null;
        CommonTree THIS491_tree=null;
        CommonTree THIS493_tree=null;
        CommonTree SUPER495_tree=null;
        CommonTree SUPER497_tree=null;
        CommonTree DOT498_tree=null;
        CommonTree IDENT499_tree=null;
        CommonTree DOT503_tree=null;
        CommonTree CLASS504_tree=null;
        CommonTree VOID505_tree=null;
        CommonTree DOT506_tree=null;
        CommonTree CLASS507_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2415:5: ( parenthesizedExpression | literal -> ^( CONST literal ) | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( CONSTRUCTOR_CALL[$SUPER, \"CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( FUNCTION_CALL ^( NAME IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( FUNCTION_CALL ^( NAME IDENT ) genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( CONSTRUCTOR_CALL[$THIS, \"CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> ^( IGNORE THIS ) ) ( arguments -> ^( CONSTRUCTOR_CALL[$THIS, \"CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( CONSTRUCTOR_CALL[$SUPER, \"CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( FUNCTION_CALL ^( NAME IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> $primaryExpression | VOID DOT CLASS )
            int alt153=10;
            alt153 = dfa153.predict(input);
            switch (alt153) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2415:9: parenthesizedExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedExpression_in_primaryExpression14887);
                    parenthesizedExpression479=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedExpression479.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2417:9: literal
                    {
                    pushFollow(FOLLOW_literal_in_primaryExpression14899);
                    literal480=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_literal.add(literal480.getTree());


                    // AST REWRITE
                    // elements: literal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2417:22: -> ^( CONST literal )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2417:38: ^( CONST literal )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONST, "CONST"), root_1);

                        adaptor.addChild(root_1, stream_literal.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2419:9: newExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_newExpression_in_primaryExpression14926);
                    newExpression481=newExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, newExpression481.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2421:9: qualifiedIdentExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_qualifiedIdentExpression_in_primaryExpression14938);
                    qualifiedIdentExpression482=qualifiedIdentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentExpression482.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2423:9: genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( CONSTRUCTOR_CALL[$SUPER, \"CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( FUNCTION_CALL ^( NAME IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( FUNCTION_CALL ^( NAME IDENT ) genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( CONSTRUCTOR_CALL[$THIS, \"CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_primaryExpression14950);
                    genericTypeArgumentListSimplified483=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified483.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2425:9: ( SUPER ( arguments -> ^( CONSTRUCTOR_CALL[$SUPER, \"CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( FUNCTION_CALL ^( NAME IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( FUNCTION_CALL ^( NAME IDENT ) genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( CONSTRUCTOR_CALL[$THIS, \"CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
                    int alt149=3;
                    switch ( input.LA(1) ) {
                    case SUPER:
                        {
                        alt149=1;
                        }
                        break;
                    case IDENT:
                        {
                        alt149=2;
                        }
                        break;
                    case THIS:
                        {
                        alt149=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 149, 0, input);

                        throw nvae;
                    }

                    switch (alt149) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2425:13: SUPER ( arguments -> ^( CONSTRUCTOR_CALL[$SUPER, \"CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( FUNCTION_CALL ^( NAME IDENT ) genericTypeArgumentListSimplified arguments ) )
                            {
                            SUPER484=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression14966); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUPER.add(SUPER484);

                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2427:13: ( arguments -> ^( CONSTRUCTOR_CALL[$SUPER, \"CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( FUNCTION_CALL ^( NAME IDENT ) genericTypeArgumentListSimplified arguments ) )
                            int alt148=2;
                            int LA148_0 = input.LA(1);

                            if ( (LA148_0==LPAREN) ) {
                                alt148=1;
                            }
                            else if ( (LA148_0==DOT) ) {
                                alt148=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 148, 0, input);

                                throw nvae;
                            }
                            switch (alt148) {
                                case 1 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2427:17: arguments
                                    {
                                    pushFollow(FOLLOW_arguments_in_primaryExpression14985);
                                    arguments485=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments485.getTree());


                                    // AST REWRITE
                                    // elements: genericTypeArgumentListSimplified, arguments
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 2427:57: -> ^( CONSTRUCTOR_CALL[$SUPER, \"CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                    {
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2427:61: ^( CONSTRUCTOR_CALL[$SUPER, \"CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCTOR_CALL, SUPER484, "CONSTRUCTOR_CALL"), root_1);

                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2429:17: DOT IDENT arguments
                                    {
                                    DOT486=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression15046); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DOT.add(DOT486);

                                    IDENT487=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression15048); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT487);

                                    pushFollow(FOLLOW_arguments_in_primaryExpression15050);
                                    arguments488=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments488.getTree());


                                    // AST REWRITE
                                    // elements: arguments, IDENT, genericTypeArgumentListSimplified
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 2431:57: -> ^( FUNCTION_CALL ^( NAME IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2431:61: ^( FUNCTION_CALL ^( NAME IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2431:77: ^( NAME IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2435:13: IDENT arguments
                            {
                            IDENT489=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression15175); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT489);

                            pushFollow(FOLLOW_arguments_in_primaryExpression15177);
                            arguments490=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments490.getTree());


                            // AST REWRITE
                            // elements: IDENT, genericTypeArgumentListSimplified, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 2435:57: -> ^( FUNCTION_CALL ^( NAME IDENT ) genericTypeArgumentListSimplified arguments )
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2435:61: ^( FUNCTION_CALL ^( NAME IDENT ) genericTypeArgumentListSimplified arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2435:77: ^( NAME IDENT )
                                {
                                CommonTree root_2 = (CommonTree)adaptor.nil();
                                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

                                adaptor.addChild(root_2, stream_IDENT.nextNode());

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2437:13: THIS arguments
                            {
                            THIS491=(Token)match(input,THIS,FOLLOW_THIS_in_primaryExpression15237); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THIS.add(THIS491);

                            pushFollow(FOLLOW_arguments_in_primaryExpression15239);
                            arguments492=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments492.getTree());


                            // AST REWRITE
                            // elements: genericTypeArgumentListSimplified, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 2437:57: -> ^( CONSTRUCTOR_CALL[$THIS, \"CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2437:61: ^( CONSTRUCTOR_CALL[$THIS, \"CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCTOR_CALL, THIS491, "CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2441:9: ( THIS -> ^( IGNORE THIS ) ) ( arguments -> ^( CONSTRUCTOR_CALL[$THIS, \"CONSTRUCTOR_CALL\"] arguments ) )?
                    {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2441:9: ( THIS -> ^( IGNORE THIS ) )
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2441:13: THIS
                    {
                    THIS493=(Token)match(input,THIS,FOLLOW_THIS_in_primaryExpression15306); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THIS.add(THIS493);



                    // AST REWRITE
                    // elements: THIS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2441:57: -> ^( IGNORE THIS )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2441:61: ^( IGNORE THIS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IGNORE, "IGNORE"), root_1);

                        adaptor.addChild(root_1, stream_THIS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2445:9: ( arguments -> ^( CONSTRUCTOR_CALL[$THIS, \"CONSTRUCTOR_CALL\"] arguments ) )?
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==LPAREN) ) {
                        alt150=1;
                    }
                    switch (alt150) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2445:13: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primaryExpression15380);
                            arguments494=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments494.getTree());


                            // AST REWRITE
                            // elements: arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 2445:57: -> ^( CONSTRUCTOR_CALL[$THIS, \"CONSTRUCTOR_CALL\"] arguments )
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2445:61: ^( CONSTRUCTOR_CALL[$THIS, \"CONSTRUCTOR_CALL\"] arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCTOR_CALL, THIS493, "CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2449:9: SUPER arguments
                    {
                    SUPER495=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression15447); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER495);

                    pushFollow(FOLLOW_arguments_in_primaryExpression15449);
                    arguments496=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments496.getTree());


                    // AST REWRITE
                    // elements: arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2449:57: -> ^( CONSTRUCTOR_CALL[$SUPER, \"CONSTRUCTOR_CALL\"] arguments )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2449:61: ^( CONSTRUCTOR_CALL[$SUPER, \"CONSTRUCTOR_CALL\"] arguments )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCTOR_CALL, SUPER495, "CONSTRUCTOR_CALL"), root_1);

                        adaptor.addChild(root_1, stream_arguments.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2451:9: ( SUPER DOT IDENT ) ( arguments -> ^( FUNCTION_CALL ^( NAME IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
                    {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2451:9: ( SUPER DOT IDENT )
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2451:13: SUPER DOT IDENT
                    {
                    SUPER497=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression15506); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER497);

                    DOT498=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression15508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT498);

                    IDENT499=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression15510); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT499);


                    }

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2455:9: ( arguments -> ^( FUNCTION_CALL ^( NAME IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
                    int alt151=2;
                    int LA151_0 = input.LA(1);

                    if ( (LA151_0==LPAREN) ) {
                        alt151=1;
                    }
                    else if ( (LA151_0==EOF||(LA151_0>=AND && LA151_0<=ASSIGN)||(LA151_0>=BIT_SHIFT_RIGHT && LA151_0<=DOT)||(LA151_0>=EQUAL && LA151_0<=LBRACK)||(LA151_0>=LESS_OR_EQUAL && LA151_0<=LOGICAL_AND)||LA151_0==LOGICAL_OR||(LA151_0>=MINUS && LA151_0<=MOD_ASSIGN)||(LA151_0>=NOT_EQUAL && LA151_0<=XOR_ASSIGN)||LA151_0==INSTANCEOF) ) {
                        alt151=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 151, 0, input);

                        throw nvae;
                    }
                    switch (alt151) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2455:13: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primaryExpression15536);
                            arguments500=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments500.getTree());


                            // AST REWRITE
                            // elements: arguments, IDENT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 2457:57: -> ^( FUNCTION_CALL ^( NAME IDENT ) arguments )
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2457:60: ^( FUNCTION_CALL ^( NAME IDENT ) arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2457:76: ^( NAME IDENT )
                                {
                                CommonTree root_2 = (CommonTree)adaptor.nil();
                                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

                                adaptor.addChild(root_2, stream_IDENT.nextNode());

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2459:57: 
                            {

                            // AST REWRITE
                            // elements: DOT, IDENT, SUPER
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 2459:57: -> ^( DOT SUPER IDENT )
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2459:61: ^( DOT SUPER IDENT )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_SUPER.nextNode());
                                adaptor.addChild(root_1, stream_IDENT.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2465:9: ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS
                    {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2465:9: ( primitiveType -> primitiveType )
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2465:13: primitiveType
                    {
                    pushFollow(FOLLOW_primitiveType_in_primaryExpression15794);
                    primitiveType501=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType501.getTree());


                    // AST REWRITE
                    // elements: primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2465:57: -> primitiveType
                    {
                        adaptor.addChild(root_0, stream_primitiveType.nextTree());

                    }

                    retval.tree = root_0;}
                    }

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2469:9: ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )*
                    loop152:
                    do {
                        int alt152=2;
                        int LA152_0 = input.LA(1);

                        if ( (LA152_0==LBRACK) ) {
                            alt152=1;
                        }


                        switch (alt152) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2469:13: arrayDeclarator
                    	    {
                    	    pushFollow(FOLLOW_arrayDeclarator_in_primaryExpression15855);
                    	    arrayDeclarator502=arrayDeclarator();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator502.getTree());


                    	    // AST REWRITE
                    	    // elements: arrayDeclarator, primaryExpression
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (CommonTree)adaptor.nil();
                    	    // 2469:57: -> ^( arrayDeclarator $primaryExpression)
                    	    {
                    	        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2469:61: ^( arrayDeclarator $primaryExpression)
                    	        {
                    	        CommonTree root_1 = (CommonTree)adaptor.nil();
                    	        root_1 = (CommonTree)adaptor.becomeRoot(stream_arrayDeclarator.nextNode(), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    break loop152;
                        }
                    } while (true);

                    DOT503=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression15920); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT503);

                    CLASS504=(Token)match(input,CLASS,FOLLOW_CLASS_in_primaryExpression15922); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(CLASS504);



                    // AST REWRITE
                    // elements: primaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2473:57: -> $primaryExpression
                    {
                        adaptor.addChild(root_0, stream_retval.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2475:9: VOID DOT CLASS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VOID505=(Token)match(input,VOID,FOLLOW_VOID_in_primaryExpression15977); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VOID505_tree = (CommonTree)adaptor.create(VOID505);
                    adaptor.addChild(root_0, VOID505_tree);
                    }
                    DOT506=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression15979); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT506_tree = (CommonTree)adaptor.create(DOT506);
                    adaptor.addChild(root_0, DOT506_tree);
                    }
                    CLASS507=(Token)match(input,CLASS,FOLLOW_CLASS_in_primaryExpression15981); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CLASS507_tree = (CommonTree)adaptor.create(CLASS507);
                    adaptor.addChild(root_0, CLASS507_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, primaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primaryExpression"

    public static class qualifiedIdentExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedIdentExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2483:1: qualifiedIdentExpression : ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( TYPE qualifiedIdentifier ) ) | arguments -> ^( FUNCTION_CALL qualifiedIdentifier arguments ) | DOT ( CLASS -> ^( TYPE qualifiedIdentifier ) | genericTypeArgumentListSimplified ( SUPER arguments -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] ^( NAME qualifiedIdentifier ) genericTypeArgumentListSimplified arguments ) | SUPER DOT IDENT arguments -> ^( FUNCTION_CALL ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( FUNCTION_CALL ^( DOT ^( NAME qualifiedIdentifier IDENT ) ) genericTypeArgumentListSimplified arguments ) ) | THIS -> qualifiedIdentifier | SUPER arguments -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? ;
    public final SSQSA_JavaParser.qualifiedIdentExpression_return qualifiedIdentExpression() throws RecognitionException {
        SSQSA_JavaParser.qualifiedIdentExpression_return retval = new SSQSA_JavaParser.qualifiedIdentExpression_return();
        retval.start = input.LT(1);
        int qualifiedIdentExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DOT510=null;
        Token CLASS511=null;
        Token DOT513=null;
        Token CLASS514=null;
        Token SUPER516=null;
        Token SUPER518=null;
        Token DOT519=null;
        Token IDENT520=null;
        Token IDENT522=null;
        Token THIS524=null;
        Token SUPER525=null;
        SSQSA_JavaParser.qualifiedIdentifier_return qualifiedIdentifier508 = null;

        SSQSA_JavaParser.arrayDeclarator_return arrayDeclarator509 = null;

        SSQSA_JavaParser.arguments_return arguments512 = null;

        SSQSA_JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified515 = null;

        SSQSA_JavaParser.arguments_return arguments517 = null;

        SSQSA_JavaParser.arguments_return arguments521 = null;

        SSQSA_JavaParser.arguments_return arguments523 = null;

        SSQSA_JavaParser.arguments_return arguments526 = null;

        SSQSA_JavaParser.innerNewExpression_return innerNewExpression527 = null;


        CommonTree DOT510_tree=null;
        CommonTree CLASS511_tree=null;
        CommonTree DOT513_tree=null;
        CommonTree CLASS514_tree=null;
        CommonTree SUPER516_tree=null;
        CommonTree SUPER518_tree=null;
        CommonTree DOT519_tree=null;
        CommonTree IDENT520_tree=null;
        CommonTree IDENT522_tree=null;
        CommonTree THIS524_tree=null;
        CommonTree SUPER525_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_qualifiedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentifier");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2487:5: ( ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( TYPE qualifiedIdentifier ) ) | arguments -> ^( FUNCTION_CALL qualifiedIdentifier arguments ) | DOT ( CLASS -> ^( TYPE qualifiedIdentifier ) | genericTypeArgumentListSimplified ( SUPER arguments -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] ^( NAME qualifiedIdentifier ) genericTypeArgumentListSimplified arguments ) | SUPER DOT IDENT arguments -> ^( FUNCTION_CALL ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( FUNCTION_CALL ^( DOT ^( NAME qualifiedIdentifier IDENT ) ) genericTypeArgumentListSimplified arguments ) ) | THIS -> qualifiedIdentifier | SUPER arguments -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2487:9: ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( TYPE qualifiedIdentifier ) ) | arguments -> ^( FUNCTION_CALL qualifiedIdentifier arguments ) | DOT ( CLASS -> ^( TYPE qualifiedIdentifier ) | genericTypeArgumentListSimplified ( SUPER arguments -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] ^( NAME qualifiedIdentifier ) genericTypeArgumentListSimplified arguments ) | SUPER DOT IDENT arguments -> ^( FUNCTION_CALL ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( FUNCTION_CALL ^( DOT ^( NAME qualifiedIdentifier IDENT ) ) genericTypeArgumentListSimplified arguments ) ) | THIS -> qualifiedIdentifier | SUPER arguments -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
            {
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2487:9: ( qualifiedIdentifier -> qualifiedIdentifier )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2487:13: qualifiedIdentifier
            {
            pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentExpression16058);
            qualifiedIdentifier508=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedIdentifier.add(qualifiedIdentifier508.getTree());


            // AST REWRITE
            // elements: qualifiedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2487:57: -> qualifiedIdentifier
            {
                adaptor.addChild(root_0, stream_qualifiedIdentifier.nextTree());

            }

            retval.tree = root_0;}
            }

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2493:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( TYPE qualifiedIdentifier ) ) | arguments -> ^( FUNCTION_CALL qualifiedIdentifier arguments ) | DOT ( CLASS -> ^( TYPE qualifiedIdentifier ) | genericTypeArgumentListSimplified ( SUPER arguments -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] ^( NAME qualifiedIdentifier ) genericTypeArgumentListSimplified arguments ) | SUPER DOT IDENT arguments -> ^( FUNCTION_CALL ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( FUNCTION_CALL ^( DOT ^( NAME qualifiedIdentifier IDENT ) ) genericTypeArgumentListSimplified arguments ) ) | THIS -> qualifiedIdentifier | SUPER arguments -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
            int alt157=4;
            alt157 = dfa157.predict(input);
            switch (alt157) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2493:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( TYPE qualifiedIdentifier ) )
                    {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2493:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+
                    int cnt154=0;
                    loop154:
                    do {
                        int alt154=2;
                        int LA154_0 = input.LA(1);

                        if ( (LA154_0==LBRACK) ) {
                            alt154=1;
                        }


                        switch (alt154) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2493:17: arrayDeclarator
                    	    {
                    	    pushFollow(FOLLOW_arrayDeclarator_in_qualifiedIdentExpression16127);
                    	    arrayDeclarator509=arrayDeclarator();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator509.getTree());


                    	    // AST REWRITE
                    	    // elements: arrayDeclarator, qualifiedIdentExpression
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (CommonTree)adaptor.nil();
                    	    // 2493:57: -> ^( arrayDeclarator $qualifiedIdentExpression)
                    	    {
                    	        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2493:61: ^( arrayDeclarator $qualifiedIdentExpression)
                    	        {
                    	        CommonTree root_1 = (CommonTree)adaptor.nil();
                    	        root_1 = (CommonTree)adaptor.becomeRoot(stream_arrayDeclarator.nextNode(), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt154 >= 1 ) break loop154;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(154, input);
                                throw eee;
                        }
                        cnt154++;
                    } while (true);

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2497:13: ( DOT CLASS -> ^( TYPE qualifiedIdentifier ) )
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2497:17: DOT CLASS
                    {
                    DOT510=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression16197); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT510);

                    CLASS511=(Token)match(input,CLASS,FOLLOW_CLASS_in_qualifiedIdentExpression16199); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(CLASS511);



                    // AST REWRITE
                    // elements: qualifiedIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2497:57: -> ^( TYPE qualifiedIdentifier )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2497:61: ^( TYPE qualifiedIdentifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2501:13: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression16269);
                    arguments512=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments512.getTree());


                    // AST REWRITE
                    // elements: qualifiedIdentifier, arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2501:57: -> ^( FUNCTION_CALL qualifiedIdentifier arguments )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2501:61: ^( FUNCTION_CALL qualifiedIdentifier arguments )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

                        adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                        adaptor.addChild(root_1, stream_arguments.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2503:13: DOT ( CLASS -> ^( TYPE qualifiedIdentifier ) | genericTypeArgumentListSimplified ( SUPER arguments -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] ^( NAME qualifiedIdentifier ) genericTypeArgumentListSimplified arguments ) | SUPER DOT IDENT arguments -> ^( FUNCTION_CALL ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( FUNCTION_CALL ^( DOT ^( NAME qualifiedIdentifier IDENT ) ) genericTypeArgumentListSimplified arguments ) ) | THIS -> qualifiedIdentifier | SUPER arguments -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
                    {
                    DOT513=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression16329); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT513);

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2505:13: ( CLASS -> ^( TYPE qualifiedIdentifier ) | genericTypeArgumentListSimplified ( SUPER arguments -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] ^( NAME qualifiedIdentifier ) genericTypeArgumentListSimplified arguments ) | SUPER DOT IDENT arguments -> ^( FUNCTION_CALL ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( FUNCTION_CALL ^( DOT ^( NAME qualifiedIdentifier IDENT ) ) genericTypeArgumentListSimplified arguments ) ) | THIS -> qualifiedIdentifier | SUPER arguments -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
                    int alt156=5;
                    switch ( input.LA(1) ) {
                    case CLASS:
                        {
                        alt156=1;
                        }
                        break;
                    case LESS_THAN:
                        {
                        alt156=2;
                        }
                        break;
                    case THIS:
                        {
                        alt156=3;
                        }
                        break;
                    case SUPER:
                        {
                        alt156=4;
                        }
                        break;
                    case NEW:
                        {
                        alt156=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 156, 0, input);

                        throw nvae;
                    }

                    switch (alt156) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2505:17: CLASS
                            {
                            CLASS514=(Token)match(input,CLASS,FOLLOW_CLASS_in_qualifiedIdentExpression16348); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_CLASS.add(CLASS514);



                            // AST REWRITE
                            // elements: qualifiedIdentifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 2505:57: -> ^( TYPE qualifiedIdentifier )
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2505:61: ^( TYPE qualifiedIdentifier )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2507:17: genericTypeArgumentListSimplified ( SUPER arguments -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] ^( NAME qualifiedIdentifier ) genericTypeArgumentListSimplified arguments ) | SUPER DOT IDENT arguments -> ^( FUNCTION_CALL ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( FUNCTION_CALL ^( DOT ^( NAME qualifiedIdentifier IDENT ) ) genericTypeArgumentListSimplified arguments ) )
                            {
                            pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_qualifiedIdentExpression16411);
                            genericTypeArgumentListSimplified515=genericTypeArgumentListSimplified();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified515.getTree());
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2509:17: ( SUPER arguments -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] ^( NAME qualifiedIdentifier ) genericTypeArgumentListSimplified arguments ) | SUPER DOT IDENT arguments -> ^( FUNCTION_CALL ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( FUNCTION_CALL ^( DOT ^( NAME qualifiedIdentifier IDENT ) ) genericTypeArgumentListSimplified arguments ) )
                            int alt155=3;
                            int LA155_0 = input.LA(1);

                            if ( (LA155_0==SUPER) ) {
                                int LA155_1 = input.LA(2);

                                if ( (LA155_1==DOT) ) {
                                    alt155=2;
                                }
                                else if ( (LA155_1==LPAREN) ) {
                                    alt155=1;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 155, 1, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA155_0==IDENT) ) {
                                alt155=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 155, 0, input);

                                throw nvae;
                            }
                            switch (alt155) {
                                case 1 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2509:21: SUPER arguments
                                    {
                                    SUPER516=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression16435); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER516);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression16437);
                                    arguments517=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments517.getTree());


                                    // AST REWRITE
                                    // elements: genericTypeArgumentListSimplified, arguments, qualifiedIdentifier
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 2509:57: -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] ^( NAME qualifiedIdentifier ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2509:61: ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] ^( NAME qualifiedIdentifier ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCTOR_CALL, "CONSTRUCTOR_CALL"), root_1);

                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2509:100: ^( NAME qualifiedIdentifier )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

                                        adaptor.addChild(root_2, stream_qualifiedIdentifier.nextTree());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2511:21: SUPER DOT IDENT arguments
                                    {
                                    SUPER518=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression16498); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER518);

                                    DOT519=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression16500); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DOT.add(DOT519);

                                    IDENT520=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentExpression16502); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT520);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression16504);
                                    arguments521=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments521.getTree());


                                    // AST REWRITE
                                    // elements: qualifiedIdentifier, SUPER, IDENT, genericTypeArgumentListSimplified, arguments
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 2511:57: -> ^( FUNCTION_CALL ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2511:61: ^( FUNCTION_CALL ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2511:77: ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] qualifiedIdentifier SUPER ) IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EDITABLE_TOKEN, "."), root_2);

                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2511:99: ^( EDITABLE_TOKEN[\".\"] qualifiedIdentifier SUPER )
                                        {
                                        CommonTree root_3 = (CommonTree)adaptor.nil();
                                        root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EDITABLE_TOKEN, "."), root_3);

                                        adaptor.addChild(root_3, stream_qualifiedIdentifier.nextTree());
                                        adaptor.addChild(root_3, stream_SUPER.nextNode());

                                        adaptor.addChild(root_2, root_3);
                                        }
                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 3 :
                                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2513:21: IDENT arguments
                                    {
                                    IDENT522=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentExpression16564); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT522);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression16566);
                                    arguments523=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments523.getTree());


                                    // AST REWRITE
                                    // elements: qualifiedIdentifier, genericTypeArgumentListSimplified, IDENT, DOT, arguments
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 2513:57: -> ^( FUNCTION_CALL ^( DOT ^( NAME qualifiedIdentifier IDENT ) ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2513:61: ^( FUNCTION_CALL ^( DOT ^( NAME qualifiedIdentifier IDENT ) ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2513:77: ^( DOT ^( NAME qualifiedIdentifier IDENT ) )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_2);

                                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2513:83: ^( NAME qualifiedIdentifier IDENT )
                                        {
                                        CommonTree root_3 = (CommonTree)adaptor.nil();
                                        root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_3);

                                        adaptor.addChild(root_3, stream_qualifiedIdentifier.nextTree());
                                        adaptor.addChild(root_3, stream_IDENT.nextNode());

                                        adaptor.addChild(root_2, root_3);
                                        }

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 3 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2517:17: THIS
                            {
                            THIS524=(Token)match(input,THIS,FOLLOW_THIS_in_qualifiedIdentExpression16647); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THIS.add(THIS524);



                            // AST REWRITE
                            // elements: qualifiedIdentifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 2517:57: -> qualifiedIdentifier
                            {
                                adaptor.addChild(root_0, stream_qualifiedIdentifier.nextTree());

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2519:17: SUPER arguments
                            {
                            SUPER525=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression16707); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUPER.add(SUPER525);

                            pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression16709);
                            arguments526=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments526.getTree());


                            // AST REWRITE
                            // elements: qualifiedIdentifier, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 2519:57: -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2519:61: ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCTOR_CALL, "CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2521:17: innerNewExpression
                            {
                            pushFollow(FOLLOW_innerNewExpression_in_qualifiedIdentExpression16764);
                            innerNewExpression527=innerNewExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_innerNewExpression.add(innerNewExpression527.getTree());


                            // AST REWRITE
                            // elements: innerNewExpression, DOT, qualifiedIdentifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 2521:57: -> ^( DOT qualifiedIdentifier innerNewExpression )
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2521:61: ^( DOT qualifiedIdentifier innerNewExpression )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_innerNewExpression.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, qualifiedIdentExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentExpression"

    public static class newExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "newExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2535:1: newExpression : NEW ( primitiveType newArrayConstruction -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments classBody -> ^( IGNORE ) | arguments -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] qualifiedTypeIdentSimplified ) ^( FUNCTION_CALL ^( NAME qualifiedTypeIdentSimplified ) arguments ) ) ) ;
    public final SSQSA_JavaParser.newExpression_return newExpression() throws RecognitionException {
        SSQSA_JavaParser.newExpression_return retval = new SSQSA_JavaParser.newExpression_return();
        retval.start = input.LT(1);
        int newExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NEW528=null;
        SSQSA_JavaParser.primitiveType_return primitiveType529 = null;

        SSQSA_JavaParser.newArrayConstruction_return newArrayConstruction530 = null;

        SSQSA_JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified531 = null;

        SSQSA_JavaParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified532 = null;

        SSQSA_JavaParser.newArrayConstruction_return newArrayConstruction533 = null;

        SSQSA_JavaParser.arguments_return arguments534 = null;

        SSQSA_JavaParser.classBody_return classBody535 = null;

        SSQSA_JavaParser.arguments_return arguments536 = null;


        CommonTree NEW528_tree=null;
        RewriteRuleTokenStream stream_NEW=new RewriteRuleTokenStream(adaptor,"token NEW");
        RewriteRuleSubtreeStream stream_newArrayConstruction=new RewriteRuleSubtreeStream(adaptor,"rule newArrayConstruction");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2537:5: ( NEW ( primitiveType newArrayConstruction -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments classBody -> ^( IGNORE ) | arguments -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] qualifiedTypeIdentSimplified ) ^( FUNCTION_CALL ^( NAME qualifiedTypeIdentSimplified ) arguments ) ) ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2537:9: NEW ( primitiveType newArrayConstruction -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments classBody -> ^( IGNORE ) | arguments -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] qualifiedTypeIdentSimplified ) ^( FUNCTION_CALL ^( NAME qualifiedTypeIdentSimplified ) arguments ) ) )
            {
            NEW528=(Token)match(input,NEW,FOLLOW_NEW_in_newExpression16850); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NEW.add(NEW528);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2539:9: ( primitiveType newArrayConstruction -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments classBody -> ^( IGNORE ) | arguments -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] qualifiedTypeIdentSimplified ) ^( FUNCTION_CALL ^( NAME qualifiedTypeIdentSimplified ) arguments ) ) )
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==BOOLEAN||LA160_0==BYTE||LA160_0==CHAR||LA160_0==DOUBLE||LA160_0==FLOAT||(LA160_0>=INT && LA160_0<=LONG)||LA160_0==SHORT) ) {
                alt160=1;
            }
            else if ( (LA160_0==LESS_THAN||LA160_0==IDENT) ) {
                alt160=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }
            switch (alt160) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2539:13: primitiveType newArrayConstruction
                    {
                    pushFollow(FOLLOW_primitiveType_in_newExpression16867);
                    primitiveType529=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType529.getTree());
                    pushFollow(FOLLOW_newArrayConstruction_in_newExpression16869);
                    newArrayConstruction530=newArrayConstruction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_newArrayConstruction.add(newArrayConstruction530.getTree());


                    // AST REWRITE
                    // elements: primitiveType, newArrayConstruction
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2541:13: -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] primitiveType newArrayConstruction )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2541:17: ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] primitiveType newArrayConstruction )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSTANTIATES, NEW528, "INSTANTIATES"), root_1);

                        adaptor.addChild(root_1, stream_primitiveType.nextTree());
                        adaptor.addChild(root_1, stream_newArrayConstruction.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2543:13: ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments classBody -> ^( IGNORE ) | arguments -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] qualifiedTypeIdentSimplified ) ^( FUNCTION_CALL ^( NAME qualifiedTypeIdentSimplified ) arguments ) )
                    {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2543:13: ( genericTypeArgumentListSimplified )?
                    int alt158=2;
                    int LA158_0 = input.LA(1);

                    if ( (LA158_0==LESS_THAN) ) {
                        alt158=1;
                    }
                    switch (alt158) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: genericTypeArgumentListSimplified
                            {
                            pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_newExpression16915);
                            genericTypeArgumentListSimplified531=genericTypeArgumentListSimplified();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified531.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_qualifiedTypeIdentSimplified_in_newExpression16918);
                    qualifiedTypeIdentSimplified532=qualifiedTypeIdentSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifiedTypeIdentSimplified.add(qualifiedTypeIdentSimplified532.getTree());
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2545:13: ( newArrayConstruction -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments classBody -> ^( IGNORE ) | arguments -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] qualifiedTypeIdentSimplified ) ^( FUNCTION_CALL ^( NAME qualifiedTypeIdentSimplified ) arguments ) )
                    int alt159=3;
                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==LBRACK) ) {
                        alt159=1;
                    }
                    else if ( (LA159_0==LPAREN) ) {
                        int LA159_2 = input.LA(2);

                        if ( (synpred243_SSQSA_Java()) ) {
                            alt159=2;
                        }
                        else if ( (true) ) {
                            alt159=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 159, 2, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 159, 0, input);

                        throw nvae;
                    }
                    switch (alt159) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2545:17: newArrayConstruction
                            {
                            pushFollow(FOLLOW_newArrayConstruction_in_newExpression16937);
                            newArrayConstruction533=newArrayConstruction();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_newArrayConstruction.add(newArrayConstruction533.getTree());


                            // AST REWRITE
                            // elements: genericTypeArgumentListSimplified, newArrayConstruction, qualifiedTypeIdentSimplified
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 2547:17: -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2547:21: ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSTANTIATES, NEW528, "INSTANTIATES"), root_1);

                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2547:59: ( genericTypeArgumentListSimplified )?
                                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                }
                                stream_genericTypeArgumentListSimplified.reset();
                                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());
                                adaptor.addChild(root_1, stream_newArrayConstruction.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2549:17: arguments classBody
                            {
                            pushFollow(FOLLOW_arguments_in_newExpression17007);
                            arguments534=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments534.getTree());
                            pushFollow(FOLLOW_classBody_in_newExpression17009);
                            classBody535=classBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classBody.add(classBody535.getTree());


                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 2551:17: -> ^( IGNORE )
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2551:21: ^( IGNORE )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IGNORE, "IGNORE"), root_1);

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2553:17: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_newExpression17066);
                            arguments536=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments536.getTree());


                            // AST REWRITE
                            // elements: qualifiedTypeIdentSimplified, qualifiedTypeIdentSimplified, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 2557:18: -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] qualifiedTypeIdentSimplified ) ^( FUNCTION_CALL ^( NAME qualifiedTypeIdentSimplified ) arguments )
                            {
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2557:21: ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] qualifiedTypeIdentSimplified )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSTANTIATES, NEW528, "INSTANTIATES"), root_1);

                                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2557:89: ^( FUNCTION_CALL ^( NAME qualifiedTypeIdentSimplified ) arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2557:105: ^( NAME qualifiedTypeIdentSimplified )
                                {
                                CommonTree root_2 = (CommonTree)adaptor.nil();
                                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAME, "NAME"), root_2);

                                adaptor.addChild(root_2, stream_qualifiedTypeIdentSimplified.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, newExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "newExpression"

    public static class innerNewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerNewExpression"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2569:1: innerNewExpression : NEW ( genericTypeArgumentListSimplified )? IDENT ( arguments classBody -> ^( IGNORE ) | arguments -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] ( genericTypeArgumentListSimplified )? ^( TYPE IDENT ) arguments ) ) ;
    public final SSQSA_JavaParser.innerNewExpression_return innerNewExpression() throws RecognitionException {
        SSQSA_JavaParser.innerNewExpression_return retval = new SSQSA_JavaParser.innerNewExpression_return();
        retval.start = input.LT(1);
        int innerNewExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NEW537=null;
        Token IDENT539=null;
        SSQSA_JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified538 = null;

        SSQSA_JavaParser.arguments_return arguments540 = null;

        SSQSA_JavaParser.classBody_return classBody541 = null;

        SSQSA_JavaParser.arguments_return arguments542 = null;


        CommonTree NEW537_tree=null;
        CommonTree IDENT539_tree=null;
        RewriteRuleTokenStream stream_NEW=new RewriteRuleTokenStream(adaptor,"token NEW");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2575:5: ( NEW ( genericTypeArgumentListSimplified )? IDENT ( arguments classBody -> ^( IGNORE ) | arguments -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] ( genericTypeArgumentListSimplified )? ^( TYPE IDENT ) arguments ) ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2575:7: NEW ( genericTypeArgumentListSimplified )? IDENT ( arguments classBody -> ^( IGNORE ) | arguments -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] ( genericTypeArgumentListSimplified )? ^( TYPE IDENT ) arguments ) )
            {
            NEW537=(Token)match(input,NEW,FOLLOW_NEW_in_innerNewExpression17182); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NEW.add(NEW537);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2575:11: ( genericTypeArgumentListSimplified )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==LESS_THAN) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: genericTypeArgumentListSimplified
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_innerNewExpression17184);
                    genericTypeArgumentListSimplified538=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified538.getTree());

                    }
                    break;

            }

            IDENT539=(Token)match(input,IDENT,FOLLOW_IDENT_in_innerNewExpression17187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT539);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2577:9: ( arguments classBody -> ^( IGNORE ) | arguments -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] ( genericTypeArgumentListSimplified )? ^( TYPE IDENT ) arguments ) )
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==LPAREN) ) {
                int LA162_1 = input.LA(2);

                if ( (synpred245_SSQSA_Java()) ) {
                    alt162=1;
                }
                else if ( (true) ) {
                    alt162=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 162, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }
            switch (alt162) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2577:11: arguments classBody
                    {
                    pushFollow(FOLLOW_arguments_in_innerNewExpression17200);
                    arguments540=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments540.getTree());
                    pushFollow(FOLLOW_classBody_in_innerNewExpression17202);
                    classBody541=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody541.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2579:11: -> ^( IGNORE )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2579:14: ^( IGNORE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IGNORE, "IGNORE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2581:11: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_innerNewExpression17232);
                    arguments542=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments542.getTree());


                    // AST REWRITE
                    // elements: IDENT, genericTypeArgumentListSimplified, arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2583:11: -> ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] ( genericTypeArgumentListSimplified )? ^( TYPE IDENT ) arguments )
                    {
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2583:14: ^( INSTANTIATES[$NEW, \"INSTANTIATES\"] ( genericTypeArgumentListSimplified )? ^( TYPE IDENT ) arguments )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSTANTIATES, NEW537, "INSTANTIATES"), root_1);

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2583:51: ( genericTypeArgumentListSimplified )?
                        if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                            adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                        }
                        stream_genericTypeArgumentListSimplified.reset();
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2583:86: ^( TYPE IDENT )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_2);

                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_arguments.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, innerNewExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "innerNewExpression"

    public static class newArrayConstruction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "newArrayConstruction"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2591:1: newArrayConstruction : ( arrayDeclaratorList arrayInitializer | LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )? );
    public final SSQSA_JavaParser.newArrayConstruction_return newArrayConstruction() throws RecognitionException {
        SSQSA_JavaParser.newArrayConstruction_return retval = new SSQSA_JavaParser.newArrayConstruction_return();
        retval.start = input.LT(1);
        int newArrayConstruction_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LBRACK545=null;
        Token RBRACK547=null;
        Token LBRACK548=null;
        Token RBRACK550=null;
        SSQSA_JavaParser.arrayDeclaratorList_return arrayDeclaratorList543 = null;

        SSQSA_JavaParser.arrayInitializer_return arrayInitializer544 = null;

        SSQSA_JavaParser.expression_return expression546 = null;

        SSQSA_JavaParser.expression_return expression549 = null;

        SSQSA_JavaParser.arrayDeclaratorList_return arrayDeclaratorList551 = null;


        CommonTree LBRACK545_tree=null;
        CommonTree RBRACK547_tree=null;
        CommonTree LBRACK548_tree=null;
        CommonTree RBRACK550_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2593:5: ( arrayDeclaratorList arrayInitializer | LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )? )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==LBRACK) ) {
                int LA165_1 = input.LA(2);

                if ( (LA165_1==RBRACK) ) {
                    alt165=1;
                }
                else if ( (LA165_1==DEC||LA165_1==INC||LA165_1==LESS_THAN||LA165_1==LOGICAL_NOT||(LA165_1>=LPAREN && LA165_1<=MINUS)||LA165_1==NOT||LA165_1==PLUS||LA165_1==BOOLEAN||LA165_1==BYTE||LA165_1==CHAR||LA165_1==DOUBLE||LA165_1==FALSE||LA165_1==FLOAT||(LA165_1>=INT && LA165_1<=LONG)||(LA165_1>=NEW && LA165_1<=NULL)||LA165_1==SHORT||LA165_1==SUPER||LA165_1==THIS||LA165_1==TRUE||LA165_1==VOID||(LA165_1>=IDENT && LA165_1<=STRING_LITERAL)) ) {
                    alt165=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 165, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }
            switch (alt165) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2593:9: arrayDeclaratorList arrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayDeclaratorList_in_newArrayConstruction17301);
                    arrayDeclaratorList543=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList543.getTree());
                    pushFollow(FOLLOW_arrayInitializer_in_newArrayConstruction17303);
                    arrayInitializer544=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer544.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2595:9: LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LBRACK545=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_newArrayConstruction17314); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACK545_tree = (CommonTree)adaptor.create(LBRACK545);
                    adaptor.addChild(root_0, LBRACK545_tree);
                    }
                    pushFollow(FOLLOW_expression_in_newArrayConstruction17316);
                    expression546=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression546.getTree());
                    RBRACK547=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_newArrayConstruction17318); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACK547_tree = (CommonTree)adaptor.create(RBRACK547);
                    adaptor.addChild(root_0, RBRACK547_tree);
                    }
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2595:34: ( LBRACK expression RBRACK )*
                    loop163:
                    do {
                        int alt163=2;
                        alt163 = dfa163.predict(input);
                        switch (alt163) {
                    	case 1 :
                    	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2595:35: LBRACK expression RBRACK
                    	    {
                    	    LBRACK548=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_newArrayConstruction17321); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LBRACK548_tree = (CommonTree)adaptor.create(LBRACK548);
                    	    adaptor.addChild(root_0, LBRACK548_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_newArrayConstruction17323);
                    	    expression549=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression549.getTree());
                    	    RBRACK550=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_newArrayConstruction17325); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RBRACK550_tree = (CommonTree)adaptor.create(RBRACK550);
                    	    adaptor.addChild(root_0, RBRACK550_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop163;
                        }
                    } while (true);

                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2595:62: ( arrayDeclaratorList )?
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==LBRACK) ) {
                        int LA164_1 = input.LA(2);

                        if ( (LA164_1==RBRACK) ) {
                            alt164=1;
                        }
                    }
                    switch (alt164) {
                        case 1 :
                            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: arrayDeclaratorList
                            {
                            pushFollow(FOLLOW_arrayDeclaratorList_in_newArrayConstruction17329);
                            arrayDeclaratorList551=arrayDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList551.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, newArrayConstruction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "newArrayConstruction"

    public static class arguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2601:1: arguments : LPAREN ( sepArgs )? RPAREN -> ^( ARGUMENT_LIST ^( SEPARATOR LPAREN ) ( sepArgs )? ^( SEPARATOR RPAREN ) ) ;
    public final SSQSA_JavaParser.arguments_return arguments() throws RecognitionException {
        SSQSA_JavaParser.arguments_return retval = new SSQSA_JavaParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN552=null;
        Token RPAREN554=null;
        SSQSA_JavaParser.sepArgs_return sepArgs553 = null;


        CommonTree LPAREN552_tree=null;
        CommonTree RPAREN554_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_sepArgs=new RewriteRuleSubtreeStream(adaptor,"rule sepArgs");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2603:5: ( LPAREN ( sepArgs )? RPAREN -> ^( ARGUMENT_LIST ^( SEPARATOR LPAREN ) ( sepArgs )? ^( SEPARATOR RPAREN ) ) )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2603:9: LPAREN ( sepArgs )? RPAREN
            {
            LPAREN552=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_arguments17353); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN552);

            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2603:16: ( sepArgs )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==DEC||LA166_0==INC||LA166_0==LESS_THAN||LA166_0==LOGICAL_NOT||(LA166_0>=LPAREN && LA166_0<=MINUS)||LA166_0==NOT||LA166_0==PLUS||LA166_0==BOOLEAN||LA166_0==BYTE||LA166_0==CHAR||LA166_0==DOUBLE||LA166_0==FALSE||LA166_0==FLOAT||(LA166_0>=INT && LA166_0<=LONG)||(LA166_0>=NEW && LA166_0<=NULL)||LA166_0==SHORT||LA166_0==SUPER||LA166_0==THIS||LA166_0==TRUE||LA166_0==VOID||(LA166_0>=IDENT && LA166_0<=STRING_LITERAL)) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: sepArgs
                    {
                    pushFollow(FOLLOW_sepArgs_in_arguments17355);
                    sepArgs553=sepArgs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sepArgs.add(sepArgs553.getTree());

                    }
                    break;

            }

            RPAREN554=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arguments17358); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN554);



            // AST REWRITE
            // elements: sepArgs, LPAREN, RPAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2605:9: -> ^( ARGUMENT_LIST ^( SEPARATOR LPAREN ) ( sepArgs )? ^( SEPARATOR RPAREN ) )
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2605:13: ^( ARGUMENT_LIST ^( SEPARATOR LPAREN ) ( sepArgs )? ^( SEPARATOR RPAREN ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARGUMENT_LIST, "ARGUMENT_LIST"), root_1);

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2605:29: ^( SEPARATOR LPAREN )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_2);

                adaptor.addChild(root_2, stream_LPAREN.nextNode());

                adaptor.addChild(root_1, root_2);
                }
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2605:49: ( sepArgs )?
                if ( stream_sepArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_sepArgs.nextTree());

                }
                stream_sepArgs.reset();
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2605:58: ^( SEPARATOR RPAREN )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEPARATOR, "SEPARATOR"), root_2);

                adaptor.addChild(root_2, stream_RPAREN.nextNode());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    public static class sepArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sepArgs"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2611:1: sepArgs : expression ( COMMA expression )* -> ( ^( ARGUMENT expression ) )* ;
    public final SSQSA_JavaParser.sepArgs_return sepArgs() throws RecognitionException {
        SSQSA_JavaParser.sepArgs_return retval = new SSQSA_JavaParser.sepArgs_return();
        retval.start = input.LT(1);
        int sepArgs_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA556=null;
        SSQSA_JavaParser.expression_return expression555 = null;

        SSQSA_JavaParser.expression_return expression557 = null;


        CommonTree COMMA556_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2613:5: ( expression ( COMMA expression )* -> ( ^( ARGUMENT expression ) )* )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2613:7: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_sepArgs17413);
            expression555=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression555.getTree());
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2613:18: ( COMMA expression )*
            loop167:
            do {
                int alt167=2;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==COMMA) ) {
                    alt167=1;
                }


                switch (alt167) {
            	case 1 :
            	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2613:19: COMMA expression
            	    {
            	    COMMA556=(Token)match(input,COMMA,FOLLOW_COMMA_in_sepArgs17416); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA556);

            	    pushFollow(FOLLOW_expression_in_sepArgs17418);
            	    expression557=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression557.getTree());

            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2615:5: -> ( ^( ARGUMENT expression ) )*
            {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2615:8: ( ^( ARGUMENT expression ) )*
                while ( stream_expression.hasNext() ) {
                    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2615:9: ^( ARGUMENT expression )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARGUMENT, "ARGUMENT"), root_1);

                    adaptor.addChild(root_1, stream_expression.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_expression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, sepArgs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sepArgs"

    public static class literal_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2623:1: literal : ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL );
    public final SSQSA_JavaParser.literal_return literal() throws RecognitionException {
        SSQSA_JavaParser.literal_return retval = new SSQSA_JavaParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set558=null;

        CommonTree set558_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2625:5: ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL )
            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set558=(Token)input.LT(1);
            if ( input.LA(1)==FALSE||input.LA(1)==NULL||input.LA(1)==TRUE||(input.LA(1)>=HEX_LITERAL && input.LA(1)<=STRING_LITERAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set558));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    // $ANTLR start synpred1_SSQSA_Java
    public final void synpred1_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:800:9: ( annotationList )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:800:9: annotationList
        {
        pushFollow(FOLLOW_annotationList_in_synpred1_SSQSA_Java5373);
        annotationList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_SSQSA_Java

    // $ANTLR start synpred17_SSQSA_Java
    public final void synpred17_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:940:9: ( GREATER_THAN )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:940:9: GREATER_THAN
        {
        match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_synpred17_SSQSA_Java6108); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_SSQSA_Java

    // $ANTLR start synpred18_SSQSA_Java
    public final void synpred18_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:942:9: ( SHIFT_RIGHT )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:942:9: SHIFT_RIGHT
        {
        match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_synpred18_SSQSA_Java6119); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_SSQSA_Java

    // $ANTLR start synpred19_SSQSA_Java
    public final void synpred19_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:944:9: ( BIT_SHIFT_RIGHT )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:944:9: BIT_SHIFT_RIGHT
        {
        match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_synpred19_SSQSA_Java6130); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_SSQSA_Java

    // $ANTLR start synpred20_SSQSA_Java
    public final void synpred20_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:954:15: ( bound )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:954:15: bound
        {
        pushFollow(FOLLOW_bound_in_synpred20_SSQSA_Java6165);
        bound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_SSQSA_Java

    // $ANTLR start synpred44_SSQSA_Java
    public final void synpred44_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1118:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block ) )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1118:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block )
        {
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1118:13: ( genericTypeParameterList )?
        int alt173=2;
        int LA173_0 = input.LA(1);

        if ( (LA173_0==LESS_THAN) ) {
            alt173=1;
        }
        switch (alt173) {
            case 1 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: genericTypeParameterList
                {
                pushFollow(FOLLOW_genericTypeParameterList_in_synpred44_SSQSA_Java6739);
                genericTypeParameterList();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block )
        int alt180=3;
        switch ( input.LA(1) ) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
            {
            alt180=1;
            }
            break;
        case IDENT:
            {
            int LA180_2 = input.LA(2);

            if ( (LA180_2==LPAREN) ) {
                alt180=3;
            }
            else if ( (LA180_2==DOT||LA180_2==LBRACK||LA180_2==LESS_THAN||LA180_2==IDENT) ) {
                alt180=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 2, input);

                throw nvae;
            }
            }
            break;
        case VOID:
            {
            alt180=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 180, 0, input);

            throw nvae;
        }

        switch (alt180) {
            case 1 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                {
                pushFollow(FOLLOW_type_in_synpred44_SSQSA_Java6759);
                type();

                state._fsp--;
                if (state.failed) return ;
                match(input,IDENT,FOLLOW_IDENT_in_synpred44_SSQSA_Java6761); if (state.failed) return ;
                pushFollow(FOLLOW_formalParameterList_in_synpred44_SSQSA_Java6763);
                formalParameterList();

                state._fsp--;
                if (state.failed) return ;
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:48: ( arrayDeclaratorList )?
                int alt174=2;
                int LA174_0 = input.LA(1);

                if ( (LA174_0==LBRACK) ) {
                    alt174=1;
                }
                switch (alt174) {
                    case 1 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: arrayDeclaratorList
                        {
                        pushFollow(FOLLOW_arrayDeclaratorList_in_synpred44_SSQSA_Java6765);
                        arrayDeclaratorList();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:69: ( throwsClause )?
                int alt175=2;
                int LA175_0 = input.LA(1);

                if ( (LA175_0==THROWS) ) {
                    alt175=1;
                }
                switch (alt175) {
                    case 1 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred44_SSQSA_Java6768);
                        throwsClause();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:83: ( block | SEMI )
                int alt176=2;
                int LA176_0 = input.LA(1);

                if ( (LA176_0==LCURLY) ) {
                    alt176=1;
                }
                else if ( (LA176_0==SEMI) ) {
                    alt176=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 176, 0, input);

                    throw nvae;
                }
                switch (alt176) {
                    case 1 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:84: block
                        {
                        pushFollow(FOLLOW_block_in_synpred44_SSQSA_Java6772);
                        block();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:92: SEMI
                        {
                        match(input,SEMI,FOLLOW_SEMI_in_synpred44_SSQSA_Java6776); if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1126:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                {
                match(input,VOID,FOLLOW_VOID_in_synpred44_SSQSA_Java6859); if (state.failed) return ;
                match(input,IDENT,FOLLOW_IDENT_in_synpred44_SSQSA_Java6861); if (state.failed) return ;
                pushFollow(FOLLOW_formalParameterList_in_synpred44_SSQSA_Java6863);
                formalParameterList();

                state._fsp--;
                if (state.failed) return ;
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1126:48: ( throwsClause )?
                int alt177=2;
                int LA177_0 = input.LA(1);

                if ( (LA177_0==THROWS) ) {
                    alt177=1;
                }
                switch (alt177) {
                    case 1 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred44_SSQSA_Java6865);
                        throwsClause();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1126:62: ( block | SEMI )
                int alt178=2;
                int LA178_0 = input.LA(1);

                if ( (LA178_0==LCURLY) ) {
                    alt178=1;
                }
                else if ( (LA178_0==SEMI) ) {
                    alt178=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 178, 0, input);

                    throw nvae;
                }
                switch (alt178) {
                    case 1 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1126:63: block
                        {
                        pushFollow(FOLLOW_block_in_synpred44_SSQSA_Java6869);
                        block();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1126:71: SEMI
                        {
                        match(input,SEMI,FOLLOW_SEMI_in_synpred44_SSQSA_Java6873); if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 3 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1132:17: IDENT formalParameterList ( throwsClause )? block
                {
                match(input,IDENT,FOLLOW_IDENT_in_synpred44_SSQSA_Java6956); if (state.failed) return ;
                pushFollow(FOLLOW_formalParameterList_in_synpred44_SSQSA_Java6958);
                formalParameterList();

                state._fsp--;
                if (state.failed) return ;
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1132:43: ( throwsClause )?
                int alt179=2;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==THROWS) ) {
                    alt179=1;
                }
                switch (alt179) {
                    case 1 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred44_SSQSA_Java6960);
                        throwsClause();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                pushFollow(FOLLOW_block_in_synpred44_SSQSA_Java6963);
                block();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred44_SSQSA_Java

    // $ANTLR start synpred48_SSQSA_Java
    public final void synpred48_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1116:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block ) | type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI ) )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1116:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block ) | type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI )
        {
        pushFollow(FOLLOW_modifierList_in_synpred48_SSQSA_Java6724);
        modifierList();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1118:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block ) | type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI )
        int alt193=2;
        switch ( input.LA(1) ) {
        case LESS_THAN:
        case VOID:
            {
            alt193=1;
            }
            break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
            {
            int LA193_2 = input.LA(2);

            if ( (synpred44_SSQSA_Java()) ) {
                alt193=1;
            }
            else if ( (true) ) {
                alt193=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 2, input);

                throw nvae;
            }
            }
            break;
        case IDENT:
            {
            int LA193_3 = input.LA(2);

            if ( (synpred44_SSQSA_Java()) ) {
                alt193=1;
            }
            else if ( (true) ) {
                alt193=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 3, input);

                throw nvae;
            }
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 193, 0, input);

            throw nvae;
        }

        switch (alt193) {
            case 1 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1118:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block )
                {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1118:13: ( genericTypeParameterList )?
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==LESS_THAN) ) {
                    alt182=1;
                }
                switch (alt182) {
                    case 1 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: genericTypeParameterList
                        {
                        pushFollow(FOLLOW_genericTypeParameterList_in_synpred48_SSQSA_Java6739);
                        genericTypeParameterList();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block )
                int alt189=3;
                switch ( input.LA(1) ) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FLOAT:
                case INT:
                case LONG:
                case SHORT:
                    {
                    alt189=1;
                    }
                    break;
                case IDENT:
                    {
                    int LA189_2 = input.LA(2);

                    if ( (LA189_2==LPAREN) ) {
                        alt189=3;
                    }
                    else if ( (LA189_2==DOT||LA189_2==LBRACK||LA189_2==LESS_THAN||LA189_2==IDENT) ) {
                        alt189=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 189, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case VOID:
                    {
                    alt189=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 189, 0, input);

                    throw nvae;
                }

                switch (alt189) {
                    case 1 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                        {
                        pushFollow(FOLLOW_type_in_synpred48_SSQSA_Java6759);
                        type();

                        state._fsp--;
                        if (state.failed) return ;
                        match(input,IDENT,FOLLOW_IDENT_in_synpred48_SSQSA_Java6761); if (state.failed) return ;
                        pushFollow(FOLLOW_formalParameterList_in_synpred48_SSQSA_Java6763);
                        formalParameterList();

                        state._fsp--;
                        if (state.failed) return ;
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:48: ( arrayDeclaratorList )?
                        int alt183=2;
                        int LA183_0 = input.LA(1);

                        if ( (LA183_0==LBRACK) ) {
                            alt183=1;
                        }
                        switch (alt183) {
                            case 1 :
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: arrayDeclaratorList
                                {
                                pushFollow(FOLLOW_arrayDeclaratorList_in_synpred48_SSQSA_Java6765);
                                arrayDeclaratorList();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:69: ( throwsClause )?
                        int alt184=2;
                        int LA184_0 = input.LA(1);

                        if ( (LA184_0==THROWS) ) {
                            alt184=1;
                        }
                        switch (alt184) {
                            case 1 :
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred48_SSQSA_Java6768);
                                throwsClause();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:83: ( block | SEMI )
                        int alt185=2;
                        int LA185_0 = input.LA(1);

                        if ( (LA185_0==LCURLY) ) {
                            alt185=1;
                        }
                        else if ( (LA185_0==SEMI) ) {
                            alt185=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 185, 0, input);

                            throw nvae;
                        }
                        switch (alt185) {
                            case 1 :
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:84: block
                                {
                                pushFollow(FOLLOW_block_in_synpred48_SSQSA_Java6772);
                                block();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;
                            case 2 :
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1120:92: SEMI
                                {
                                match(input,SEMI,FOLLOW_SEMI_in_synpred48_SSQSA_Java6776); if (state.failed) return ;

                                }
                                break;

                        }


                        }
                        break;
                    case 2 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1126:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                        {
                        match(input,VOID,FOLLOW_VOID_in_synpred48_SSQSA_Java6859); if (state.failed) return ;
                        match(input,IDENT,FOLLOW_IDENT_in_synpred48_SSQSA_Java6861); if (state.failed) return ;
                        pushFollow(FOLLOW_formalParameterList_in_synpred48_SSQSA_Java6863);
                        formalParameterList();

                        state._fsp--;
                        if (state.failed) return ;
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1126:48: ( throwsClause )?
                        int alt186=2;
                        int LA186_0 = input.LA(1);

                        if ( (LA186_0==THROWS) ) {
                            alt186=1;
                        }
                        switch (alt186) {
                            case 1 :
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred48_SSQSA_Java6865);
                                throwsClause();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1126:62: ( block | SEMI )
                        int alt187=2;
                        int LA187_0 = input.LA(1);

                        if ( (LA187_0==LCURLY) ) {
                            alt187=1;
                        }
                        else if ( (LA187_0==SEMI) ) {
                            alt187=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 187, 0, input);

                            throw nvae;
                        }
                        switch (alt187) {
                            case 1 :
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1126:63: block
                                {
                                pushFollow(FOLLOW_block_in_synpred48_SSQSA_Java6869);
                                block();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;
                            case 2 :
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1126:71: SEMI
                                {
                                match(input,SEMI,FOLLOW_SEMI_in_synpred48_SSQSA_Java6873); if (state.failed) return ;

                                }
                                break;

                        }


                        }
                        break;
                    case 3 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1132:17: IDENT formalParameterList ( throwsClause )? block
                        {
                        match(input,IDENT,FOLLOW_IDENT_in_synpred48_SSQSA_Java6956); if (state.failed) return ;
                        pushFollow(FOLLOW_formalParameterList_in_synpred48_SSQSA_Java6958);
                        formalParameterList();

                        state._fsp--;
                        if (state.failed) return ;
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1132:43: ( throwsClause )?
                        int alt188=2;
                        int LA188_0 = input.LA(1);

                        if ( (LA188_0==THROWS) ) {
                            alt188=1;
                        }
                        switch (alt188) {
                            case 1 :
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred48_SSQSA_Java6960);
                                throwsClause();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }

                        pushFollow(FOLLOW_block_in_synpred48_SSQSA_Java6963);
                        block();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1142:13: type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI
                {
                pushFollow(FOLLOW_type_in_synpred48_SSQSA_Java7070);
                type();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_variableDeclaratorId_in_synpred48_SSQSA_Java7072);
                variableDeclaratorId();

                state._fsp--;
                if (state.failed) return ;
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1142:39: ( ASSIGN variableInitializer )?
                int alt190=2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0==ASSIGN) ) {
                    alt190=1;
                }
                switch (alt190) {
                    case 1 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1142:40: ASSIGN variableInitializer
                        {
                        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred48_SSQSA_Java7075); if (state.failed) return ;
                        pushFollow(FOLLOW_variableInitializer_in_synpred48_SSQSA_Java7077);
                        variableInitializer();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1142:69: ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )*
                loop192:
                do {
                    int alt192=2;
                    int LA192_0 = input.LA(1);

                    if ( (LA192_0==COMMA) ) {
                        alt192=1;
                    }


                    switch (alt192) {
                	case 1 :
                	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1142:70: COMMA variableDeclaratorId ( ASSIGN variableInitializer )?
                	    {
                	    match(input,COMMA,FOLLOW_COMMA_in_synpred48_SSQSA_Java7082); if (state.failed) return ;
                	    pushFollow(FOLLOW_variableDeclaratorId_in_synpred48_SSQSA_Java7084);
                	    variableDeclaratorId();

                	    state._fsp--;
                	    if (state.failed) return ;
                	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1142:97: ( ASSIGN variableInitializer )?
                	    int alt191=2;
                	    int LA191_0 = input.LA(1);

                	    if ( (LA191_0==ASSIGN) ) {
                	        alt191=1;
                	    }
                	    switch (alt191) {
                	        case 1 :
                	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1142:98: ASSIGN variableInitializer
                	            {
                	            match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred48_SSQSA_Java7087); if (state.failed) return ;
                	            pushFollow(FOLLOW_variableInitializer_in_synpred48_SSQSA_Java7089);
                	            variableInitializer();

                	            state._fsp--;
                	            if (state.failed) return ;

                	            }
                	            break;

                	    }


                	    }
                	    break;

                	default :
                	    break loop192;
                    }
                } while (true);

                match(input,SEMI,FOLLOW_SEMI_in_synpred48_SSQSA_Java7096); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred48_SSQSA_Java

    // $ANTLR start synpred49_SSQSA_Java
    public final void synpred49_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1150:9: ( typeDeclaration )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1150:9: typeDeclaration
        {
        pushFollow(FOLLOW_typeDeclaration_in_synpred49_SSQSA_Java7155);
        typeDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred49_SSQSA_Java

    // $ANTLR start synpred50_SSQSA_Java
    public final void synpred50_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1152:9: ( STATIC block )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1152:9: STATIC block
        {
        match(input,STATIC,FOLLOW_STATIC_in_synpred50_SSQSA_Java7166); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred50_SSQSA_Java7168);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred50_SSQSA_Java

    // $ANTLR start synpred56_SSQSA_Java
    public final void synpred56_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1182:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1182:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
        {
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1182:13: ( genericTypeParameterList )?
        int alt196=2;
        int LA196_0 = input.LA(1);

        if ( (LA196_0==LESS_THAN) ) {
            alt196=1;
        }
        switch (alt196) {
            case 1 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: genericTypeParameterList
                {
                pushFollow(FOLLOW_genericTypeParameterList_in_synpred56_SSQSA_Java7251);
                genericTypeParameterList();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1184:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
        int alt200=2;
        int LA200_0 = input.LA(1);

        if ( (LA200_0==BOOLEAN||LA200_0==BYTE||LA200_0==CHAR||LA200_0==DOUBLE||LA200_0==FLOAT||(LA200_0>=INT && LA200_0<=LONG)||LA200_0==SHORT||LA200_0==IDENT) ) {
            alt200=1;
        }
        else if ( (LA200_0==VOID) ) {
            alt200=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 200, 0, input);

            throw nvae;
        }
        switch (alt200) {
            case 1 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1184:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                {
                pushFollow(FOLLOW_type_in_synpred56_SSQSA_Java7271);
                type();

                state._fsp--;
                if (state.failed) return ;
                match(input,IDENT,FOLLOW_IDENT_in_synpred56_SSQSA_Java7273); if (state.failed) return ;
                pushFollow(FOLLOW_formalParameterList_in_synpred56_SSQSA_Java7275);
                formalParameterList();

                state._fsp--;
                if (state.failed) return ;
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1184:48: ( arrayDeclaratorList )?
                int alt197=2;
                int LA197_0 = input.LA(1);

                if ( (LA197_0==LBRACK) ) {
                    alt197=1;
                }
                switch (alt197) {
                    case 1 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: arrayDeclaratorList
                        {
                        pushFollow(FOLLOW_arrayDeclaratorList_in_synpred56_SSQSA_Java7277);
                        arrayDeclaratorList();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1184:69: ( throwsClause )?
                int alt198=2;
                int LA198_0 = input.LA(1);

                if ( (LA198_0==THROWS) ) {
                    alt198=1;
                }
                switch (alt198) {
                    case 1 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred56_SSQSA_Java7280);
                        throwsClause();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                match(input,SEMI,FOLLOW_SEMI_in_synpred56_SSQSA_Java7283); if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1188:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                {
                match(input,VOID,FOLLOW_VOID_in_synpred56_SSQSA_Java7349); if (state.failed) return ;
                match(input,IDENT,FOLLOW_IDENT_in_synpred56_SSQSA_Java7351); if (state.failed) return ;
                pushFollow(FOLLOW_formalParameterList_in_synpred56_SSQSA_Java7353);
                formalParameterList();

                state._fsp--;
                if (state.failed) return ;
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1188:48: ( throwsClause )?
                int alt199=2;
                int LA199_0 = input.LA(1);

                if ( (LA199_0==THROWS) ) {
                    alt199=1;
                }
                switch (alt199) {
                    case 1 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred56_SSQSA_Java7355);
                        throwsClause();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                match(input,SEMI,FOLLOW_SEMI_in_synpred56_SSQSA_Java7358); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred56_SSQSA_Java

    // $ANTLR start synpred60_SSQSA_Java
    public final void synpred60_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1180:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI ) )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1180:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI )
        {
        pushFollow(FOLLOW_modifierList_in_synpred60_SSQSA_Java7236);
        modifierList();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1182:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI )
        int alt210=2;
        switch ( input.LA(1) ) {
        case LESS_THAN:
        case VOID:
            {
            alt210=1;
            }
            break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
            {
            int LA210_2 = input.LA(2);

            if ( (synpred56_SSQSA_Java()) ) {
                alt210=1;
            }
            else if ( (true) ) {
                alt210=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 2, input);

                throw nvae;
            }
            }
            break;
        case IDENT:
            {
            int LA210_3 = input.LA(2);

            if ( (synpred56_SSQSA_Java()) ) {
                alt210=1;
            }
            else if ( (true) ) {
                alt210=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 3, input);

                throw nvae;
            }
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 210, 0, input);

            throw nvae;
        }

        switch (alt210) {
            case 1 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1182:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
                {
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1182:13: ( genericTypeParameterList )?
                int alt202=2;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==LESS_THAN) ) {
                    alt202=1;
                }
                switch (alt202) {
                    case 1 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: genericTypeParameterList
                        {
                        pushFollow(FOLLOW_genericTypeParameterList_in_synpred60_SSQSA_Java7251);
                        genericTypeParameterList();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1184:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
                int alt206=2;
                int LA206_0 = input.LA(1);

                if ( (LA206_0==BOOLEAN||LA206_0==BYTE||LA206_0==CHAR||LA206_0==DOUBLE||LA206_0==FLOAT||(LA206_0>=INT && LA206_0<=LONG)||LA206_0==SHORT||LA206_0==IDENT) ) {
                    alt206=1;
                }
                else if ( (LA206_0==VOID) ) {
                    alt206=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 206, 0, input);

                    throw nvae;
                }
                switch (alt206) {
                    case 1 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1184:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                        {
                        pushFollow(FOLLOW_type_in_synpred60_SSQSA_Java7271);
                        type();

                        state._fsp--;
                        if (state.failed) return ;
                        match(input,IDENT,FOLLOW_IDENT_in_synpred60_SSQSA_Java7273); if (state.failed) return ;
                        pushFollow(FOLLOW_formalParameterList_in_synpred60_SSQSA_Java7275);
                        formalParameterList();

                        state._fsp--;
                        if (state.failed) return ;
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1184:48: ( arrayDeclaratorList )?
                        int alt203=2;
                        int LA203_0 = input.LA(1);

                        if ( (LA203_0==LBRACK) ) {
                            alt203=1;
                        }
                        switch (alt203) {
                            case 1 :
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: arrayDeclaratorList
                                {
                                pushFollow(FOLLOW_arrayDeclaratorList_in_synpred60_SSQSA_Java7277);
                                arrayDeclaratorList();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }

                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1184:69: ( throwsClause )?
                        int alt204=2;
                        int LA204_0 = input.LA(1);

                        if ( (LA204_0==THROWS) ) {
                            alt204=1;
                        }
                        switch (alt204) {
                            case 1 :
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred60_SSQSA_Java7280);
                                throwsClause();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }

                        match(input,SEMI,FOLLOW_SEMI_in_synpred60_SSQSA_Java7283); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1188:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                        {
                        match(input,VOID,FOLLOW_VOID_in_synpred60_SSQSA_Java7349); if (state.failed) return ;
                        match(input,IDENT,FOLLOW_IDENT_in_synpred60_SSQSA_Java7351); if (state.failed) return ;
                        pushFollow(FOLLOW_formalParameterList_in_synpred60_SSQSA_Java7353);
                        formalParameterList();

                        state._fsp--;
                        if (state.failed) return ;
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1188:48: ( throwsClause )?
                        int alt205=2;
                        int LA205_0 = input.LA(1);

                        if ( (LA205_0==THROWS) ) {
                            alt205=1;
                        }
                        switch (alt205) {
                            case 1 :
                                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred60_SSQSA_Java7355);
                                throwsClause();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }

                        match(input,SEMI,FOLLOW_SEMI_in_synpred60_SSQSA_Java7358); if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1198:13: type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI
                {
                pushFollow(FOLLOW_type_in_synpred60_SSQSA_Java7462);
                type();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_variableDeclaratorId_in_synpred60_SSQSA_Java7464);
                variableDeclaratorId();

                state._fsp--;
                if (state.failed) return ;
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1198:39: ( ASSIGN variableInitializer )?
                int alt207=2;
                int LA207_0 = input.LA(1);

                if ( (LA207_0==ASSIGN) ) {
                    alt207=1;
                }
                switch (alt207) {
                    case 1 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1198:40: ASSIGN variableInitializer
                        {
                        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred60_SSQSA_Java7467); if (state.failed) return ;
                        pushFollow(FOLLOW_variableInitializer_in_synpred60_SSQSA_Java7469);
                        variableInitializer();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1198:69: ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )*
                loop209:
                do {
                    int alt209=2;
                    int LA209_0 = input.LA(1);

                    if ( (LA209_0==COMMA) ) {
                        alt209=1;
                    }


                    switch (alt209) {
                	case 1 :
                	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1198:70: COMMA variableDeclaratorId ( ASSIGN variableInitializer )?
                	    {
                	    match(input,COMMA,FOLLOW_COMMA_in_synpred60_SSQSA_Java7474); if (state.failed) return ;
                	    pushFollow(FOLLOW_variableDeclaratorId_in_synpred60_SSQSA_Java7476);
                	    variableDeclaratorId();

                	    state._fsp--;
                	    if (state.failed) return ;
                	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1198:97: ( ASSIGN variableInitializer )?
                	    int alt208=2;
                	    int LA208_0 = input.LA(1);

                	    if ( (LA208_0==ASSIGN) ) {
                	        alt208=1;
                	    }
                	    switch (alt208) {
                	        case 1 :
                	            // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1198:98: ASSIGN variableInitializer
                	            {
                	            match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred60_SSQSA_Java7479); if (state.failed) return ;
                	            pushFollow(FOLLOW_variableInitializer_in_synpred60_SSQSA_Java7481);
                	            variableInitializer();

                	            state._fsp--;
                	            if (state.failed) return ;

                	            }
                	            break;

                	    }


                	    }
                	    break;

                	default :
                	    break loop209;
                    }
                } while (true);

                match(input,SEMI,FOLLOW_SEMI_in_synpred60_SSQSA_Java7488); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred60_SSQSA_Java

    // $ANTLR start synpred61_SSQSA_Java
    public final void synpred61_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1204:9: ( typeDeclaration )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1204:9: typeDeclaration
        {
        pushFollow(FOLLOW_typeDeclaration_in_synpred61_SSQSA_Java7545);
        typeDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred61_SSQSA_Java

    // $ANTLR start synpred66_SSQSA_Java
    public final void synpred66_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1300:9: ( arrayDeclarator )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1300:9: arrayDeclarator
        {
        pushFollow(FOLLOW_arrayDeclarator_in_synpred66_SSQSA_Java7812);
        arrayDeclarator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred66_SSQSA_Java

    // $ANTLR start synpred71_SSQSA_Java
    public final void synpred71_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1357:9: ( annotation )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1357:9: annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred71_SSQSA_Java7997);
        annotation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred71_SSQSA_Java

    // $ANTLR start synpred86_SSQSA_Java
    public final void synpred86_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1429:9: ( primitiveType arrayDeclaratorList )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1429:9: primitiveType arrayDeclaratorList
        {
        pushFollow(FOLLOW_primitiveType_in_synpred86_SSQSA_Java8298);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_arrayDeclaratorList_in_synpred86_SSQSA_Java8301);
        arrayDeclaratorList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred86_SSQSA_Java

    // $ANTLR start synpred87_SSQSA_Java
    public final void synpred87_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1443:9: ( qualifiedTypeIdent arrayDeclaratorList )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1443:9: qualifiedTypeIdent arrayDeclaratorList
        {
        pushFollow(FOLLOW_qualifiedTypeIdent_in_synpred87_SSQSA_Java8383);
        qualifiedTypeIdent();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_arrayDeclaratorList_in_synpred87_SSQSA_Java8386);
        arrayDeclaratorList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred87_SSQSA_Java

    // $ANTLR start synpred88_SSQSA_Java
    public final void synpred88_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1483:20: ( DOT typeIdent )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1483:20: DOT typeIdent
        {
        match(input,DOT,FOLLOW_DOT_in_synpred88_SSQSA_Java8494); if (state.failed) return ;
        pushFollow(FOLLOW_typeIdent_in_synpred88_SSQSA_Java8496);
        typeIdent();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred88_SSQSA_Java

    // $ANTLR start synpred99_SSQSA_Java
    public final void synpred99_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1549:40: ( COMMA genericTypeArgument )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1549:40: COMMA genericTypeArgument
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred99_SSQSA_Java8806); if (state.failed) return ;
        pushFollow(FOLLOW_genericTypeArgument_in_synpred99_SSQSA_Java8808);
        genericTypeArgument();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred99_SSQSA_Java

    // $ANTLR start synpred101_SSQSA_Java
    public final void synpred101_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1561:18: ( genericWildcardBoundType )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1561:18: genericWildcardBoundType
        {
        pushFollow(FOLLOW_genericWildcardBoundType_in_synpred101_SSQSA_Java8858);
        genericWildcardBoundType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_SSQSA_Java

    // $ANTLR start synpred105_SSQSA_Java
    public final void synpred105_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1605:42: ( COMMA formalParameterStandardDecl )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1605:42: COMMA formalParameterStandardDecl
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred105_SSQSA_Java9061); if (state.failed) return ;
        pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred105_SSQSA_Java9063);
        formalParameterStandardDecl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred105_SSQSA_Java

    // $ANTLR start synpred107_SSQSA_Java
    public final void synpred107_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1605:13: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1605:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
        {
        pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred107_SSQSA_Java9058);
        formalParameterStandardDecl();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1605:41: ( COMMA formalParameterStandardDecl )*
        loop213:
        do {
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==COMMA) ) {
                int LA213_1 = input.LA(2);

                if ( (synpred105_SSQSA_Java()) ) {
                    alt213=1;
                }


            }


            switch (alt213) {
        	case 1 :
        	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1605:42: COMMA formalParameterStandardDecl
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred107_SSQSA_Java9061); if (state.failed) return ;
        	    pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred107_SSQSA_Java9063);
        	    formalParameterStandardDecl();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop213;
            }
        } while (true);

        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1605:78: ( COMMA formalParameterVarArgDecl )?
        int alt214=2;
        int LA214_0 = input.LA(1);

        if ( (LA214_0==COMMA) ) {
            alt214=1;
        }
        switch (alt214) {
            case 1 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1605:79: COMMA formalParameterVarArgDecl
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred107_SSQSA_Java9068); if (state.failed) return ;
                pushFollow(FOLLOW_formalParameterVarArgDecl_in_synpred107_SSQSA_Java9070);
                formalParameterVarArgDecl();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred107_SSQSA_Java

    // $ANTLR start synpred108_SSQSA_Java
    public final void synpred108_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1611:13: ( formalParameterVarArgDecl )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1611:13: formalParameterVarArgDecl
        {
        pushFollow(FOLLOW_formalParameterVarArgDecl_in_synpred108_SSQSA_Java9130);
        formalParameterVarArgDecl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred108_SSQSA_Java

    // $ANTLR start synpred109_SSQSA_Java
    public final void synpred109_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1657:7: ( DOT IDENT )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1657:7: DOT IDENT
        {
        match(input,DOT,FOLLOW_DOT_in_synpred109_SSQSA_Java9395); if (state.failed) return ;
        match(input,IDENT,FOLLOW_IDENT_in_synpred109_SSQSA_Java9397); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_SSQSA_Java

    // $ANTLR start synpred110_SSQSA_Java
    public final void synpred110_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1670:9: ( annotation )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1670:9: annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred110_SSQSA_Java9454);
        annotation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred110_SSQSA_Java

    // $ANTLR start synpred122_SSQSA_Java
    public final void synpred122_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1776:9: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI ) )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1776:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
        {
        pushFollow(FOLLOW_modifierList_in_synpred122_SSQSA_Java9917);
        modifierList();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred122_SSQSA_Java9919);
        type();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1778:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
        int alt219=2;
        int LA219_0 = input.LA(1);

        if ( (LA219_0==IDENT) ) {
            int LA219_1 = input.LA(2);

            if ( (LA219_1==LPAREN) ) {
                alt219=1;
            }
            else if ( (LA219_1==ASSIGN||LA219_1==COMMA||LA219_1==LBRACK||LA219_1==SEMI) ) {
                alt219=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 219, 0, input);

            throw nvae;
        }
        switch (alt219) {
            case 1 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1778:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
                {
                match(input,IDENT,FOLLOW_IDENT_in_synpred122_SSQSA_Java9934); if (state.failed) return ;
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred122_SSQSA_Java9936); if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred122_SSQSA_Java9938); if (state.failed) return ;
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1778:33: ( annotationDefaultValue )?
                int alt218=2;
                int LA218_0 = input.LA(1);

                if ( (LA218_0==DEFAULT) ) {
                    alt218=1;
                }
                switch (alt218) {
                    case 1 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: annotationDefaultValue
                        {
                        pushFollow(FOLLOW_annotationDefaultValue_in_synpred122_SSQSA_Java9940);
                        annotationDefaultValue();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                match(input,SEMI,FOLLOW_SEMI_in_synpred122_SSQSA_Java9943); if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1782:13: classFieldDeclaratorList SEMI
                {
                pushFollow(FOLLOW_classFieldDeclaratorList_in_synpred122_SSQSA_Java9972);
                classFieldDeclaratorList();

                state._fsp--;
                if (state.failed) return ;
                match(input,SEMI,FOLLOW_SEMI_in_synpred122_SSQSA_Java9974); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred122_SSQSA_Java

    // $ANTLR start synpred124_SSQSA_Java
    public final void synpred124_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1820:9: ( localVariableDeclaration SEMI )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1820:9: localVariableDeclaration SEMI
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred124_SSQSA_Java10129);
        localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred124_SSQSA_Java10131); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_SSQSA_Java

    // $ANTLR start synpred125_SSQSA_Java
    public final void synpred125_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1822:9: ( typeDeclaration )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1822:9: typeDeclaration
        {
        pushFollow(FOLLOW_typeDeclaration_in_synpred125_SSQSA_Java10142);
        typeDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred125_SSQSA_Java

    // $ANTLR start synpred131_SSQSA_Java
    public final void synpred131_SSQSA_Java_fragment() throws RecognitionException {   
        SSQSA_JavaParser.statement_return elseStat = null;


        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1870:13: ( ELSE elseStat= statement )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1870:13: ELSE elseStat= statement
        {
        match(input,ELSE,FOLLOW_ELSE_in_synpred131_SSQSA_Java10504); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred131_SSQSA_Java10508);
        elseStat=statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred131_SSQSA_Java

    // $ANTLR start synpred133_SSQSA_Java
    public final void synpred133_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:13: ( forInit )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:13: forInit
        {
        pushFollow(FOLLOW_forInit_in_synpred133_SSQSA_Java10746);
        forInit();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred133_SSQSA_Java

    // $ANTLR start synpred136_SSQSA_Java
    public final void synpred136_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:13: ( ( forInit )? SEMI ( forCondition )? SEMI ( forUpdater )? RPAREN statement )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:13: ( forInit )? SEMI ( forCondition )? SEMI ( forUpdater )? RPAREN statement
        {
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:13: ( forInit )?
        int alt222=2;
        int LA222_0 = input.LA(1);

        if ( (LA222_0==AT||LA222_0==DEC||LA222_0==INC||LA222_0==LESS_THAN||LA222_0==LOGICAL_NOT||(LA222_0>=LPAREN && LA222_0<=MINUS)||LA222_0==NOT||LA222_0==PLUS||LA222_0==BOOLEAN||LA222_0==BYTE||LA222_0==CHAR||LA222_0==DOUBLE||(LA222_0>=FALSE && LA222_0<=FINAL)||LA222_0==FLOAT||(LA222_0>=INT && LA222_0<=LONG)||(LA222_0>=NEW && LA222_0<=NULL)||LA222_0==SHORT||LA222_0==SUPER||LA222_0==THIS||LA222_0==TRUE||LA222_0==VOID||(LA222_0>=IDENT && LA222_0<=STRING_LITERAL)) ) {
            alt222=1;
        }
        else if ( (LA222_0==SEMI) ) {
            int LA222_2 = input.LA(2);

            if ( (synpred133_SSQSA_Java()) ) {
                alt222=1;
            }
        }
        switch (alt222) {
            case 1 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: forInit
                {
                pushFollow(FOLLOW_forInit_in_synpred136_SSQSA_Java10746);
                forInit();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,SEMI,FOLLOW_SEMI_in_synpred136_SSQSA_Java10749); if (state.failed) return ;
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:27: ( forCondition )?
        int alt223=2;
        int LA223_0 = input.LA(1);

        if ( (LA223_0==DEC||LA223_0==INC||LA223_0==LESS_THAN||LA223_0==LOGICAL_NOT||(LA223_0>=LPAREN && LA223_0<=MINUS)||LA223_0==NOT||LA223_0==PLUS||LA223_0==BOOLEAN||LA223_0==BYTE||LA223_0==CHAR||LA223_0==DOUBLE||LA223_0==FALSE||LA223_0==FLOAT||(LA223_0>=INT && LA223_0<=LONG)||(LA223_0>=NEW && LA223_0<=NULL)||LA223_0==SHORT||LA223_0==SUPER||LA223_0==THIS||LA223_0==TRUE||LA223_0==VOID||(LA223_0>=IDENT && LA223_0<=STRING_LITERAL)) ) {
            alt223=1;
        }
        switch (alt223) {
            case 1 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: forCondition
                {
                pushFollow(FOLLOW_forCondition_in_synpred136_SSQSA_Java10751);
                forCondition();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,SEMI,FOLLOW_SEMI_in_synpred136_SSQSA_Java10754); if (state.failed) return ;
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1878:46: ( forUpdater )?
        int alt224=2;
        int LA224_0 = input.LA(1);

        if ( (LA224_0==DEC||LA224_0==INC||LA224_0==LESS_THAN||LA224_0==LOGICAL_NOT||(LA224_0>=LPAREN && LA224_0<=MINUS)||LA224_0==NOT||LA224_0==PLUS||LA224_0==BOOLEAN||LA224_0==BYTE||LA224_0==CHAR||LA224_0==DOUBLE||LA224_0==FALSE||LA224_0==FLOAT||(LA224_0>=INT && LA224_0<=LONG)||(LA224_0>=NEW && LA224_0<=NULL)||LA224_0==SHORT||LA224_0==SUPER||LA224_0==THIS||LA224_0==TRUE||LA224_0==VOID||(LA224_0>=IDENT && LA224_0<=STRING_LITERAL)) ) {
            alt224=1;
        }
        switch (alt224) {
            case 1 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:0:0: forUpdater
                {
                pushFollow(FOLLOW_forUpdater_in_synpred136_SSQSA_Java10756);
                forUpdater();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred136_SSQSA_Java10759); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred136_SSQSA_Java10761);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred136_SSQSA_Java

    // $ANTLR start synpred155_SSQSA_Java
    public final void synpred155_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1950:9: ( switchCaseLabels1 )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1950:9: switchCaseLabels1
        {
        pushFollow(FOLLOW_switchCaseLabels1_in_synpred155_SSQSA_Java11847);
        switchCaseLabels1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred155_SSQSA_Java

    // $ANTLR start synpred157_SSQSA_Java
    public final void synpred157_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1950:48: ( switchCaseLabels2 )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1950:48: switchCaseLabels2
        {
        pushFollow(FOLLOW_switchCaseLabels2_in_synpred157_SSQSA_Java11853);
        switchCaseLabels2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred157_SSQSA_Java

    // $ANTLR start synpred158_SSQSA_Java
    public final void synpred158_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1960:9: ( switchCaseLabel )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1960:9: switchCaseLabel
        {
        pushFollow(FOLLOW_switchCaseLabel_in_synpred158_SSQSA_Java11906);
        switchCaseLabel();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred158_SSQSA_Java

    // $ANTLR start synpred162_SSQSA_Java
    public final void synpred162_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1992:9: ( localVariableDeclaration )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1992:9: localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred162_SSQSA_Java12053);
        localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred162_SSQSA_Java

    // $ANTLR start synpred163_SSQSA_Java
    public final void synpred163_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1994:9: ( expressionList )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:1994:9: expressionList
        {
        pushFollow(FOLLOW_expressionList_in_synpred163_SSQSA_Java12067);
        expressionList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred163_SSQSA_Java

    // $ANTLR start synpred203_SSQSA_Java
    public final void synpred203_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2341:9: ( LPAREN type RPAREN unaryExpression )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2341:9: LPAREN type RPAREN unaryExpression
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred203_SSQSA_Java13871); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred203_SSQSA_Java13873);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred203_SSQSA_Java13875); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred203_SSQSA_Java13877);
        unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred203_SSQSA_Java

    // $ANTLR start synpred231_SSQSA_Java
    public final void synpred231_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2493:13: ( ( arrayDeclarator )+ ( DOT CLASS ) )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2493:13: ( arrayDeclarator )+ ( DOT CLASS )
        {
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2493:13: ( arrayDeclarator )+
        int cnt248=0;
        loop248:
        do {
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==LBRACK) ) {
                alt248=1;
            }


            switch (alt248) {
        	case 1 :
        	    // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2493:17: arrayDeclarator
        	    {
        	    pushFollow(FOLLOW_arrayDeclarator_in_synpred231_SSQSA_Java16127);
        	    arrayDeclarator();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt248 >= 1 ) break loop248;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(248, input);
                    throw eee;
            }
            cnt248++;
        } while (true);

        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2497:13: ( DOT CLASS )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2497:17: DOT CLASS
        {
        match(input,DOT,FOLLOW_DOT_in_synpred231_SSQSA_Java16197); if (state.failed) return ;
        match(input,CLASS,FOLLOW_CLASS_in_synpred231_SSQSA_Java16199); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred231_SSQSA_Java

    // $ANTLR start synpred239_SSQSA_Java
    public final void synpred239_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2503:13: ( DOT ( CLASS | genericTypeArgumentListSimplified ( SUPER arguments | SUPER DOT IDENT arguments | IDENT arguments ) | THIS | SUPER arguments | innerNewExpression ) )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2503:13: DOT ( CLASS | genericTypeArgumentListSimplified ( SUPER arguments | SUPER DOT IDENT arguments | IDENT arguments ) | THIS | SUPER arguments | innerNewExpression )
        {
        match(input,DOT,FOLLOW_DOT_in_synpred239_SSQSA_Java16329); if (state.failed) return ;
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2505:13: ( CLASS | genericTypeArgumentListSimplified ( SUPER arguments | SUPER DOT IDENT arguments | IDENT arguments ) | THIS | SUPER arguments | innerNewExpression )
        int alt251=5;
        switch ( input.LA(1) ) {
        case CLASS:
            {
            alt251=1;
            }
            break;
        case LESS_THAN:
            {
            alt251=2;
            }
            break;
        case THIS:
            {
            alt251=3;
            }
            break;
        case SUPER:
            {
            alt251=4;
            }
            break;
        case NEW:
            {
            alt251=5;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 251, 0, input);

            throw nvae;
        }

        switch (alt251) {
            case 1 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2505:17: CLASS
                {
                match(input,CLASS,FOLLOW_CLASS_in_synpred239_SSQSA_Java16348); if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2507:17: genericTypeArgumentListSimplified ( SUPER arguments | SUPER DOT IDENT arguments | IDENT arguments )
                {
                pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_synpred239_SSQSA_Java16411);
                genericTypeArgumentListSimplified();

                state._fsp--;
                if (state.failed) return ;
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2509:17: ( SUPER arguments | SUPER DOT IDENT arguments | IDENT arguments )
                int alt250=3;
                int LA250_0 = input.LA(1);

                if ( (LA250_0==SUPER) ) {
                    int LA250_1 = input.LA(2);

                    if ( (LA250_1==DOT) ) {
                        alt250=2;
                    }
                    else if ( (LA250_1==LPAREN) ) {
                        alt250=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 250, 1, input);

                        throw nvae;
                    }
                }
                else if ( (LA250_0==IDENT) ) {
                    alt250=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 0, input);

                    throw nvae;
                }
                switch (alt250) {
                    case 1 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2509:21: SUPER arguments
                        {
                        match(input,SUPER,FOLLOW_SUPER_in_synpred239_SSQSA_Java16435); if (state.failed) return ;
                        pushFollow(FOLLOW_arguments_in_synpred239_SSQSA_Java16437);
                        arguments();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2511:21: SUPER DOT IDENT arguments
                        {
                        match(input,SUPER,FOLLOW_SUPER_in_synpred239_SSQSA_Java16498); if (state.failed) return ;
                        match(input,DOT,FOLLOW_DOT_in_synpred239_SSQSA_Java16500); if (state.failed) return ;
                        match(input,IDENT,FOLLOW_IDENT_in_synpred239_SSQSA_Java16502); if (state.failed) return ;
                        pushFollow(FOLLOW_arguments_in_synpred239_SSQSA_Java16504);
                        arguments();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 3 :
                        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2513:21: IDENT arguments
                        {
                        match(input,IDENT,FOLLOW_IDENT_in_synpred239_SSQSA_Java16564); if (state.failed) return ;
                        pushFollow(FOLLOW_arguments_in_synpred239_SSQSA_Java16566);
                        arguments();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 3 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2517:17: THIS
                {
                match(input,THIS,FOLLOW_THIS_in_synpred239_SSQSA_Java16647); if (state.failed) return ;

                }
                break;
            case 4 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2519:17: SUPER arguments
                {
                match(input,SUPER,FOLLOW_SUPER_in_synpred239_SSQSA_Java16707); if (state.failed) return ;
                pushFollow(FOLLOW_arguments_in_synpred239_SSQSA_Java16709);
                arguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 5 :
                // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2521:17: innerNewExpression
                {
                pushFollow(FOLLOW_innerNewExpression_in_synpred239_SSQSA_Java16764);
                innerNewExpression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred239_SSQSA_Java

    // $ANTLR start synpred243_SSQSA_Java
    public final void synpred243_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2549:17: ( arguments classBody )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2549:17: arguments classBody
        {
        pushFollow(FOLLOW_arguments_in_synpred243_SSQSA_Java17007);
        arguments();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_classBody_in_synpred243_SSQSA_Java17009);
        classBody();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred243_SSQSA_Java

    // $ANTLR start synpred245_SSQSA_Java
    public final void synpred245_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2577:11: ( arguments classBody )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2577:11: arguments classBody
        {
        pushFollow(FOLLOW_arguments_in_synpred245_SSQSA_Java17200);
        arguments();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_classBody_in_synpred245_SSQSA_Java17202);
        classBody();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred245_SSQSA_Java

    // $ANTLR start synpred247_SSQSA_Java
    public final void synpred247_SSQSA_Java_fragment() throws RecognitionException {   
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2595:35: ( LBRACK expression RBRACK )
        // C:\\Users\\Tijana\\dev\\clone-detection\\ssqsa_2.0\\eCSTGenerator_v2.0\\src\\Languages\\java\\SSQSA_Java.g:2595:35: LBRACK expression RBRACK
        {
        match(input,LBRACK,FOLLOW_LBRACK_in_synpred247_SSQSA_Java17321); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred247_SSQSA_Java17323);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,RBRACK,FOLLOW_RBRACK_in_synpred247_SSQSA_Java17325); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred247_SSQSA_Java

    // Delegated rules

    public final boolean synpred101_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred162_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_SSQSA_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_SSQSA_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA163 dfa163 = new DFA163(this);
    static final String DFA1_eotS =
        "\26\uffff";
    static final String DFA1_eofS =
        "\1\23\25\uffff";
    static final String DFA1_minS =
        "\1\7\23\0\2\uffff";
    static final String DFA1_maxS =
        "\1\146\23\0\2\uffff";
    static final String DFA1_acceptS =
        "\24\uffff\1\1\1\2";
    static final String DFA1_specialS =
        "\1\uffff\1\20\1\7\1\0\1\12\1\6\1\1\1\15\1\21\1\2\1\10\1\17\1\22"+
        "\1\4\1\5\1\14\1\13\1\11\1\16\1\3\2\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\1\44\uffff\1\22\10\uffff\1\5\7\uffff\1\17\5\uffff\1\21\2"+
            "\uffff\1\16\6\uffff\1\20\1\3\2\uffff\1\6\2\uffff\1\2\1\15\1"+
            "\14\1\13\2\uffff\1\4\1\12\2\uffff\1\7\3\uffff\1\10\3\uffff\1"+
            "\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "800:9: ( annotationList )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA1_3 = input.LA(1);

                         
                        int index1_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA1_6 = input.LA(1);

                         
                        int index1_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA1_9 = input.LA(1);

                         
                        int index1_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA1_19 = input.LA(1);

                         
                        int index1_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA1_13 = input.LA(1);

                         
                        int index1_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA1_14 = input.LA(1);

                         
                        int index1_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA1_5 = input.LA(1);

                         
                        int index1_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_5);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA1_2 = input.LA(1);

                         
                        int index1_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_2);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA1_10 = input.LA(1);

                         
                        int index1_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA1_17 = input.LA(1);

                         
                        int index1_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_17);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA1_4 = input.LA(1);

                         
                        int index1_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_4);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA1_16 = input.LA(1);

                         
                        int index1_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_16);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA1_15 = input.LA(1);

                         
                        int index1_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_15);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA1_7 = input.LA(1);

                         
                        int index1_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_7);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA1_18 = input.LA(1);

                         
                        int index1_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_18);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA1_11 = input.LA(1);

                         
                        int index1_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_11);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA1_1 = input.LA(1);

                         
                        int index1_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_1);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA1_8 = input.LA(1);

                         
                        int index1_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_8);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA1_12 = input.LA(1);

                         
                        int index1_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_SSQSA_Java()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index1_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 1, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA42_eotS =
        "\27\uffff";
    static final String DFA42_eofS =
        "\27\uffff";
    static final String DFA42_minS =
        "\1\7\1\uffff\14\0\11\uffff";
    static final String DFA42_maxS =
        "\1\u0095\1\uffff\14\0\11\uffff";
    static final String DFA42_acceptS =
        "\1\uffff\1\1\14\uffff\1\2\3\uffff\1\3\2\uffff\1\5\1\4";
    static final String DFA42_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\11"+
        "\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\2\17\uffff\1\1\1\uffff\1\16\22\uffff\1\25\10\uffff\1\4\1"+
            "\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1\22\3\uffff\1\16\1\uffff"+
            "\1\22\2\uffff\1\15\1\uffff\1\16\4\uffff\1\22\1\uffff\2\16\1"+
            "\5\3\uffff\1\14\1\13\1\12\1\uffff\1\16\1\3\1\11\2\uffff\1\6"+
            "\3\uffff\1\7\2\uffff\1\16\1\10\56\uffff\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "1112:1: classScopeDeclarations : ( block | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? ( block )? ) | IDENT formalParameterList ( throwsClause )? block -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE EDITABLE_TOKEN[\"void\"] ) ^( NAME IDENT ) formalParameterList ( throwsClause )? block ) ) | type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI -> ( ^( ATTRIBUTE_DECL modifierList type variableDeclaratorId ^( VALUE ( variableInitializer )? ) ) )* ) | typeDeclaration | STATIC block | SEMI );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA42_2 = input.LA(1);

                         
                        int index42_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_SSQSA_Java()) ) {s = 14;}

                        else if ( (synpred49_SSQSA_Java()) ) {s = 18;}

                         
                        input.seek(index42_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA42_3 = input.LA(1);

                         
                        int index42_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_SSQSA_Java()) ) {s = 14;}

                        else if ( (synpred49_SSQSA_Java()) ) {s = 18;}

                        else if ( (synpred50_SSQSA_Java()) ) {s = 22;}

                         
                        input.seek(index42_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA42_4 = input.LA(1);

                         
                        int index42_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_SSQSA_Java()) ) {s = 14;}

                        else if ( (synpred49_SSQSA_Java()) ) {s = 18;}

                         
                        input.seek(index42_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA42_5 = input.LA(1);

                         
                        int index42_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_SSQSA_Java()) ) {s = 14;}

                        else if ( (synpred49_SSQSA_Java()) ) {s = 18;}

                         
                        input.seek(index42_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA42_6 = input.LA(1);

                         
                        int index42_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_SSQSA_Java()) ) {s = 14;}

                        else if ( (synpred49_SSQSA_Java()) ) {s = 18;}

                         
                        input.seek(index42_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA42_7 = input.LA(1);

                         
                        int index42_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_SSQSA_Java()) ) {s = 14;}

                        else if ( (synpred49_SSQSA_Java()) ) {s = 18;}

                         
                        input.seek(index42_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA42_8 = input.LA(1);

                         
                        int index42_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_SSQSA_Java()) ) {s = 14;}

                        else if ( (synpred49_SSQSA_Java()) ) {s = 18;}

                         
                        input.seek(index42_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA42_9 = input.LA(1);

                         
                        int index42_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_SSQSA_Java()) ) {s = 14;}

                        else if ( (synpred49_SSQSA_Java()) ) {s = 18;}

                         
                        input.seek(index42_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA42_10 = input.LA(1);

                         
                        int index42_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_SSQSA_Java()) ) {s = 14;}

                        else if ( (synpred49_SSQSA_Java()) ) {s = 18;}

                         
                        input.seek(index42_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA42_11 = input.LA(1);

                         
                        int index42_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_SSQSA_Java()) ) {s = 14;}

                        else if ( (synpred49_SSQSA_Java()) ) {s = 18;}

                         
                        input.seek(index42_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA42_12 = input.LA(1);

                         
                        int index42_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_SSQSA_Java()) ) {s = 14;}

                        else if ( (synpred49_SSQSA_Java()) ) {s = 18;}

                         
                        input.seek(index42_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA42_13 = input.LA(1);

                         
                        int index42_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_SSQSA_Java()) ) {s = 14;}

                        else if ( (synpred49_SSQSA_Java()) ) {s = 18;}

                         
                        input.seek(index42_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA52_eotS =
        "\25\uffff";
    static final String DFA52_eofS =
        "\25\uffff";
    static final String DFA52_minS =
        "\1\7\14\0\10\uffff";
    static final String DFA52_maxS =
        "\1\u0095\14\0\10\uffff";
    static final String DFA52_acceptS =
        "\15\uffff\1\1\3\uffff\1\2\2\uffff\1\3";
    static final String DFA52_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\10"+
        "\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\1\21\uffff\1\15\22\uffff\1\24\10\uffff\1\3\1\uffff\1\15"+
            "\1\uffff\1\15\2\uffff\1\15\1\21\3\uffff\1\15\1\uffff\1\21\2"+
            "\uffff\1\14\1\uffff\1\15\4\uffff\1\21\1\uffff\2\15\1\4\3\uffff"+
            "\1\13\1\12\1\11\1\uffff\1\15\1\2\1\10\2\uffff\1\5\3\uffff\1"+
            "\6\2\uffff\1\15\1\7\56\uffff\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "1178:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? type ^( NAME IDENT ) formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( FUNCTION_DECL modifierList ( genericTypeParameterList )? ^( TYPE VOID ) ^( NAME IDENT ) formalParameterList ( throwsClause )? ) ) | type variableDeclaratorId ( ASSIGN variableInitializer )? ( COMMA variableDeclaratorId ( ASSIGN variableInitializer )? )* SEMI -> ( ^( ATTRIBUTE_DECL modifierList type variableDeclaratorId ^( VALUE ( variableInitializer )? ) ) )* ) | typeDeclaration | SEMI );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA52_1 = input.LA(1);

                         
                        int index52_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_SSQSA_Java()) ) {s = 13;}

                        else if ( (synpred61_SSQSA_Java()) ) {s = 17;}

                         
                        input.seek(index52_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA52_2 = input.LA(1);

                         
                        int index52_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_SSQSA_Java()) ) {s = 13;}

                        else if ( (synpred61_SSQSA_Java()) ) {s = 17;}

                         
                        input.seek(index52_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA52_3 = input.LA(1);

                         
                        int index52_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_SSQSA_Java()) ) {s = 13;}

                        else if ( (synpred61_SSQSA_Java()) ) {s = 17;}

                         
                        input.seek(index52_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA52_4 = input.LA(1);

                         
                        int index52_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_SSQSA_Java()) ) {s = 13;}

                        else if ( (synpred61_SSQSA_Java()) ) {s = 17;}

                         
                        input.seek(index52_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA52_5 = input.LA(1);

                         
                        int index52_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_SSQSA_Java()) ) {s = 13;}

                        else if ( (synpred61_SSQSA_Java()) ) {s = 17;}

                         
                        input.seek(index52_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA52_6 = input.LA(1);

                         
                        int index52_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_SSQSA_Java()) ) {s = 13;}

                        else if ( (synpred61_SSQSA_Java()) ) {s = 17;}

                         
                        input.seek(index52_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA52_7 = input.LA(1);

                         
                        int index52_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_SSQSA_Java()) ) {s = 13;}

                        else if ( (synpred61_SSQSA_Java()) ) {s = 17;}

                         
                        input.seek(index52_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA52_8 = input.LA(1);

                         
                        int index52_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_SSQSA_Java()) ) {s = 13;}

                        else if ( (synpred61_SSQSA_Java()) ) {s = 17;}

                         
                        input.seek(index52_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA52_9 = input.LA(1);

                         
                        int index52_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_SSQSA_Java()) ) {s = 13;}

                        else if ( (synpred61_SSQSA_Java()) ) {s = 17;}

                         
                        input.seek(index52_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA52_10 = input.LA(1);

                         
                        int index52_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_SSQSA_Java()) ) {s = 13;}

                        else if ( (synpred61_SSQSA_Java()) ) {s = 17;}

                         
                        input.seek(index52_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA52_11 = input.LA(1);

                         
                        int index52_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_SSQSA_Java()) ) {s = 13;}

                        else if ( (synpred61_SSQSA_Java()) ) {s = 17;}

                         
                        input.seek(index52_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA52_12 = input.LA(1);

                         
                        int index52_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_SSQSA_Java()) ) {s = 13;}

                        else if ( (synpred61_SSQSA_Java()) ) {s = 17;}

                         
                        input.seek(index52_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA94_eotS =
        "\22\uffff";
    static final String DFA94_eofS =
        "\22\uffff";
    static final String DFA94_minS =
        "\1\7\14\0\5\uffff";
    static final String DFA94_maxS =
        "\1\u0095\14\0\5\uffff";
    static final String DFA94_acceptS =
        "\15\uffff\1\1\1\uffff\1\2\2\uffff";
    static final String DFA94_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\5"+
        "\uffff}>";
    static final String[] DFA94_transitionS = {
            "\1\1\55\uffff\1\3\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1"+
            "\17\3\uffff\1\15\1\uffff\1\17\2\uffff\1\14\1\uffff\1\15\4\uffff"+
            "\1\17\1\uffff\2\15\1\4\3\uffff\1\13\1\12\1\11\1\uffff\1\15\1"+
            "\2\1\10\2\uffff\1\5\3\uffff\1\6\3\uffff\1\7\56\uffff\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "1774:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI ) | typeDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA94_1 = input.LA(1);

                         
                        int index94_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_SSQSA_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index94_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA94_2 = input.LA(1);

                         
                        int index94_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_SSQSA_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index94_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA94_3 = input.LA(1);

                         
                        int index94_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_SSQSA_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index94_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA94_4 = input.LA(1);

                         
                        int index94_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_SSQSA_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index94_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA94_5 = input.LA(1);

                         
                        int index94_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_SSQSA_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index94_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA94_6 = input.LA(1);

                         
                        int index94_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_SSQSA_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index94_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA94_7 = input.LA(1);

                         
                        int index94_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_SSQSA_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index94_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA94_8 = input.LA(1);

                         
                        int index94_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_SSQSA_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index94_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA94_9 = input.LA(1);

                         
                        int index94_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_SSQSA_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index94_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA94_10 = input.LA(1);

                         
                        int index94_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_SSQSA_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index94_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA94_11 = input.LA(1);

                         
                        int index94_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_SSQSA_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index94_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA94_12 = input.LA(1);

                         
                        int index94_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_SSQSA_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index94_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 94, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA96_eotS =
        "\55\uffff";
    static final String DFA96_eofS =
        "\55\uffff";
    static final String DFA96_minS =
        "\1\7\4\0\3\uffff\1\0\44\uffff";
    static final String DFA96_maxS =
        "\1\u009b\4\0\3\uffff\1\0\44\uffff";
    static final String DFA96_acceptS =
        "\5\uffff\1\2\14\uffff\1\3\31\uffff\1\1";
    static final String DFA96_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\3\uffff\1\4\44\uffff}>";
    static final String[] DFA96_transitionS = {
            "\1\2\4\uffff\1\22\10\uffff\1\22\1\uffff\1\22\1\uffff\1\22\1"+
            "\uffff\1\22\1\uffff\2\22\3\uffff\1\22\3\uffff\1\22\5\uffff\1"+
            "\22\10\uffff\1\5\1\22\1\3\1\22\1\3\2\uffff\1\3\1\5\1\22\1\uffff"+
            "\1\22\1\3\1\uffff\1\5\1\uffff\1\22\1\1\1\uffff\1\3\2\22\2\uffff"+
            "\1\5\1\uffff\2\3\1\5\2\22\1\uffff\3\5\1\22\1\3\2\5\2\22\1\10"+
            "\2\22\1\uffff\1\5\3\22\1\5\1\22\55\uffff\1\4\6\22",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "1818:1: blockStatement : ( localVariableDeclaration SEMI | typeDeclaration | statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA96_1 = input.LA(1);

                         
                        int index96_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_SSQSA_Java()) ) {s = 44;}

                        else if ( (synpred125_SSQSA_Java()) ) {s = 5;}

                         
                        input.seek(index96_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA96_2 = input.LA(1);

                         
                        int index96_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_SSQSA_Java()) ) {s = 44;}

                        else if ( (synpred125_SSQSA_Java()) ) {s = 5;}

                         
                        input.seek(index96_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA96_3 = input.LA(1);

                         
                        int index96_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_SSQSA_Java()) ) {s = 44;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index96_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA96_4 = input.LA(1);

                         
                        int index96_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_SSQSA_Java()) ) {s = 44;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index96_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA96_8 = input.LA(1);

                         
                        int index96_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_SSQSA_Java()) ) {s = 5;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index96_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 96, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA110_eotS =
        "\22\uffff";
    static final String DFA110_eofS =
        "\22\uffff";
    static final String DFA110_minS =
        "\1\14\15\uffff\1\4\3\uffff";
    static final String DFA110_maxS =
        "\1\u009b\15\uffff\1\114\3\uffff";
    static final String DFA110_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\uffff\1\17\1\20\1\16";
    static final String DFA110_specialS =
        "\22\uffff}>";
    static final String[] DFA110_transitionS = {
            "\1\17\10\uffff\1\17\1\uffff\1\1\1\uffff\1\17\1\uffff\1\17\1"+
            "\uffff\2\17\3\uffff\1\17\3\uffff\1\17\5\uffff\1\20\11\uffff"+
            "\1\2\1\17\1\14\1\17\2\uffff\1\17\1\uffff\1\15\1\uffff\1\6\1"+
            "\17\3\uffff\1\17\2\uffff\1\17\1\4\1\3\4\uffff\2\17\1\uffff\2"+
            "\17\4\uffff\1\12\1\17\2\uffff\1\17\1\10\1\11\1\17\1\13\2\uffff"+
            "\1\17\1\7\1\17\1\uffff\1\5\55\uffff\1\16\6\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\3\17\1\uffff\2\17\1\21\1\uffff\4\17\2\uffff\5\17\1\uffff"+
            "\3\17\1\uffff\6\17\1\uffff\6\17\3\uffff\11\17\27\uffff\1\17",
            "",
            "",
            ""
    };

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "1856:1: statement : ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( BRANCH_STATEMENT ^( BRANCH ^( KEYWORD IF ) ^( CONDITION parenthesizedExpression ) ^( BLOCK_SCOPE $ifStat) ) ^( BRANCH ^( KEYWORD ELSE ) ^( BLOCK_SCOPE $elseStat) ) ) | -> ^( BRANCH_STATEMENT ^( BRANCH ^( KEYWORD IF ) ^( CONDITION parenthesizedExpression ) ^( BLOCK_SCOPE $ifStat) ) ) ) | FOR LPAREN ( ( forInit )? SEMI ( forCondition )? SEMI ( forUpdater )? RPAREN statement -> ^( LOOP_STATEMENT ^( KEYWORD FOR ) ( ^( INIT forInit ) )? ( ^( CONDITION forCondition ) )? ( ^( STEP forUpdater ) )? statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( LOOP_STATEMENT ^( KEYWORD FOR_EACH[$FOR, \"FOR_EACH\"] ) ^( CONDITION localModifierList type ^( NAME IDENT ) expression ) statement ) ) | WHILE parenthesizedExpression statement -> ^( LOOP_STATEMENT ^( KEYWORD WHILE ) ^( CONDITION parenthesizedExpression ) statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( LOOP_STATEMENT ^( KEYWORD DO ) statement ^( CONDITION parenthesizedExpression ) ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( BRANCH_STATEMENT TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( BRANCH_STATEMENT ^( KEYWORD SWITCH ) ^( CONDITION parenthesizedExpression ) LCURLY switchBlockLabels RCURLY ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( JUMP_STATEMENT ^( KEYWORD RETURN ) ( expression )? ) | THROW expression SEMI -> ^( JUMP_STATEMENT ^( KEYWORD THROW ) expression ) | BREAK ( IDENT )? SEMI -> ^( JUMP_STATEMENT ^( KEYWORD BREAK ) ( ^( NAME IDENT ) )? ) | CONTINUE ( IDENT )? SEMI -> ^( JUMP_STATEMENT ^( KEYWORD CONTINUE ) ( ^( NAME IDENT ) )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT ^( NAME IDENT ) statement ) | expression SEMI | SEMI );";
        }
    }
    static final String DFA104_eotS =
        "\24\uffff";
    static final String DFA104_eofS =
        "\24\uffff";
    static final String DFA104_minS =
        "\1\7\4\0\17\uffff";
    static final String DFA104_maxS =
        "\1\u009b\4\0\17\uffff";
    static final String DFA104_acceptS =
        "\5\uffff\1\1\15\uffff\1\2";
    static final String DFA104_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\17\uffff}>";
    static final String[] DFA104_transitionS = {
            "\1\2\4\uffff\1\5\10\uffff\1\5\3\uffff\1\5\1\uffff\1\5\1\uffff"+
            "\2\5\3\uffff\1\5\3\uffff\1\5\5\uffff\1\5\12\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\1\3\4\uffff\1\3\3\uffff\1\5\1\1\1\uffff\1\3\6\uffff"+
            "\2\3\1\uffff\2\5\5\uffff\1\3\2\uffff\1\5\2\uffff\1\5\3\uffff"+
            "\1\5\1\uffff\1\5\57\uffff\1\4\6\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "1878:9: ( ( forInit )? SEMI ( forCondition )? SEMI ( forUpdater )? RPAREN statement -> ^( LOOP_STATEMENT ^( KEYWORD FOR ) ( ^( INIT forInit ) )? ( ^( CONDITION forCondition ) )? ( ^( STEP forUpdater ) )? statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( LOOP_STATEMENT ^( KEYWORD FOR_EACH[$FOR, \"FOR_EACH\"] ) ^( CONDITION localModifierList type ^( NAME IDENT ) expression ) statement ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA104_1 = input.LA(1);

                         
                        int index104_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_SSQSA_Java()) ) {s = 5;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index104_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA104_2 = input.LA(1);

                         
                        int index104_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_SSQSA_Java()) ) {s = 5;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index104_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA104_3 = input.LA(1);

                         
                        int index104_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_SSQSA_Java()) ) {s = 5;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index104_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA104_4 = input.LA(1);

                         
                        int index104_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_SSQSA_Java()) ) {s = 5;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index104_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA119_eotS =
        "\24\uffff";
    static final String DFA119_eofS =
        "\1\22\23\uffff";
    static final String DFA119_minS =
        "\1\7\2\uffff\2\0\17\uffff";
    static final String DFA119_maxS =
        "\1\u009b\2\uffff\2\0\17\uffff";
    static final String DFA119_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\14\uffff\1\3\1\uffff";
    static final String DFA119_specialS =
        "\3\uffff\1\0\1\1\17\uffff}>";
    static final String[] DFA119_transitionS = {
            "\1\1\4\uffff\1\5\10\uffff\1\5\3\uffff\1\5\1\uffff\1\5\1\uffff"+
            "\2\5\3\uffff\1\5\3\uffff\1\5\5\uffff\1\22\12\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\1\3\4\uffff\1\3\3\uffff\1\5\1\1\1\uffff\1\3\6\uffff"+
            "\2\3\1\uffff\2\5\5\uffff\1\3\2\uffff\1\5\2\uffff\1\5\3\uffff"+
            "\1\5\1\uffff\1\5\57\uffff\1\4\6\5",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "1990:1: forInit : ( localVariableDeclaration | expressionList | );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA119_3 = input.LA(1);

                         
                        int index119_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred162_SSQSA_Java()) ) {s = 1;}

                        else if ( (synpred163_SSQSA_Java()) ) {s = 5;}

                         
                        input.seek(index119_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA119_4 = input.LA(1);

                         
                        int index119_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred162_SSQSA_Java()) ) {s = 1;}

                        else if ( (synpred163_SSQSA_Java()) ) {s = 5;}

                         
                        input.seek(index119_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 119, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA141_eotS =
        "\15\uffff";
    static final String DFA141_eofS =
        "\15\uffff";
    static final String DFA141_minS =
        "\1\31\2\uffff\1\0\11\uffff";
    static final String DFA141_maxS =
        "\1\u009b\2\uffff\1\0\11\uffff";
    static final String DFA141_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\7\uffff\1\3";
    static final String DFA141_specialS =
        "\3\uffff\1\0\11\uffff}>";
    static final String[] DFA141_transitionS = {
            "\1\4\1\uffff\1\2\1\uffff\1\3\4\uffff\1\1\24\uffff\1\4\1\uffff"+
            "\1\4\2\uffff\1\4\4\uffff\1\4\3\uffff\1\4\2\uffff\1\4\6\uffff"+
            "\2\4\1\uffff\2\4\5\uffff\1\4\2\uffff\1\4\2\uffff\1\4\3\uffff"+
            "\1\4\1\uffff\1\4\57\uffff\7\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "2335:1: unaryExpressionNotPlusMinus : ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( EDITABLE_TOKEN[\"CAST_EXPRESSION\"] type unaryExpression ) | postfixedExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA141_3 = input.LA(1);

                         
                        int index141_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_SSQSA_Java()) ) {s = 12;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index141_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA153_eotS =
        "\14\uffff";
    static final String DFA153_eofS =
        "\14\uffff";
    static final String DFA153_minS =
        "\1\31\6\uffff\1\17\4\uffff";
    static final String DFA153_maxS =
        "\1\u009b\6\uffff\1\35\4\uffff";
    static final String DFA153_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff\1\11\1\12\1\10\1\7";
    static final String DFA153_specialS =
        "\14\uffff}>";
    static final String[] DFA153_transitionS = {
            "\1\5\3\uffff\1\1\31\uffff\1\10\1\uffff\1\10\2\uffff\1\10\4"+
            "\uffff\1\10\3\uffff\1\2\2\uffff\1\10\6\uffff\2\10\1\uffff\1"+
            "\3\1\2\5\uffff\1\10\2\uffff\1\7\2\uffff\1\6\3\uffff\1\2\1\uffff"+
            "\1\11\57\uffff\1\4\6\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\15\uffff\1\13",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "2413:1: primaryExpression : ( parenthesizedExpression | literal -> ^( CONST literal ) | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( CONSTRUCTOR_CALL[$SUPER, \"CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( FUNCTION_CALL ^( NAME IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( FUNCTION_CALL ^( NAME IDENT ) genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( CONSTRUCTOR_CALL[$THIS, \"CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> ^( IGNORE THIS ) ) ( arguments -> ^( CONSTRUCTOR_CALL[$THIS, \"CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( CONSTRUCTOR_CALL[$SUPER, \"CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( FUNCTION_CALL ^( NAME IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> $primaryExpression | VOID DOT CLASS );";
        }
    }
    static final String DFA157_eotS =
        "\45\uffff";
    static final String DFA157_eofS =
        "\1\4\44\uffff";
    static final String DFA157_minS =
        "\1\4\1\0\1\uffff\1\0\41\uffff";
    static final String DFA157_maxS =
        "\1\114\1\0\1\uffff\1\0\41\uffff";
    static final String DFA157_acceptS =
        "\2\uffff\1\2\1\uffff\1\4\36\uffff\1\1\1\3";
    static final String DFA157_specialS =
        "\1\uffff\1\0\1\uffff\1\1\41\uffff}>";
    static final String[] DFA157_transitionS = {
            "\3\4\1\uffff\7\4\1\3\2\uffff\4\4\1\1\1\uffff\3\4\1\uffff\1"+
            "\4\1\2\4\4\1\uffff\22\4\27\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "2493:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( TYPE qualifiedIdentifier ) ) | arguments -> ^( FUNCTION_CALL qualifiedIdentifier arguments ) | DOT ( CLASS -> ^( TYPE qualifiedIdentifier ) | genericTypeArgumentListSimplified ( SUPER arguments -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] ^( NAME qualifiedIdentifier ) genericTypeArgumentListSimplified arguments ) | SUPER DOT IDENT arguments -> ^( FUNCTION_CALL ^( EDITABLE_TOKEN[\".\"] ^( EDITABLE_TOKEN[\".\"] qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( FUNCTION_CALL ^( DOT ^( NAME qualifiedIdentifier IDENT ) ) genericTypeArgumentListSimplified arguments ) ) | THIS -> qualifiedIdentifier | SUPER arguments -> ^( CONSTRUCTOR_CALL[\"CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_1 = input.LA(1);

                         
                        int index157_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_SSQSA_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA157_3 = input.LA(1);

                         
                        int index157_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_SSQSA_Java()) ) {s = 36;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA163_eotS =
        "\43\uffff";
    static final String DFA163_eofS =
        "\1\2\42\uffff";
    static final String DFA163_minS =
        "\1\4\1\0\41\uffff";
    static final String DFA163_maxS =
        "\1\114\1\0\41\uffff";
    static final String DFA163_acceptS =
        "\2\uffff\1\2\37\uffff\1\1";
    static final String DFA163_specialS =
        "\1\uffff\1\0\41\uffff}>";
    static final String[] DFA163_transitionS = {
            "\3\2\1\uffff\10\2\2\uffff\4\2\1\1\1\uffff\3\2\1\uffff\1\2\1"+
            "\uffff\4\2\1\uffff\22\2\27\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA163_eot = DFA.unpackEncodedString(DFA163_eotS);
    static final short[] DFA163_eof = DFA.unpackEncodedString(DFA163_eofS);
    static final char[] DFA163_min = DFA.unpackEncodedStringToUnsignedChars(DFA163_minS);
    static final char[] DFA163_max = DFA.unpackEncodedStringToUnsignedChars(DFA163_maxS);
    static final short[] DFA163_accept = DFA.unpackEncodedString(DFA163_acceptS);
    static final short[] DFA163_special = DFA.unpackEncodedString(DFA163_specialS);
    static final short[][] DFA163_transition;

    static {
        int numStates = DFA163_transitionS.length;
        DFA163_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA163_transition[i] = DFA.unpackEncodedString(DFA163_transitionS[i]);
        }
    }

    class DFA163 extends DFA {

        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = DFA163_eot;
            this.eof = DFA163_eof;
            this.min = DFA163_min;
            this.max = DFA163_max;
            this.accept = DFA163_accept;
            this.special = DFA163_special;
            this.transition = DFA163_transition;
        }
        public String getDescription() {
            return "()* loopback of 2595:34: ( LBRACK expression RBRACK )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA163_1 = input.LA(1);

                         
                        int index163_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_SSQSA_Java()) ) {s = 34;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index163_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 163, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_compilationUnit_in_startNonterminal5329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationList_in_compilationUnit5373 = new BitSet(new long[]{0x2020100000000082L,0x000000444CF26048L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit5376 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE26048L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit5379 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE26048L});
    public static final BitSet FOLLOW_typeDecls_in_compilationUnit5382 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE22048L});
    public static final BitSet FOLLOW_typeDeclaration_in_typeDecls5430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_typeDecls5441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_in_packageDeclaration5469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_packageDeclaration5471 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_packageDeclaration5473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_importDeclaration5520 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_STATIC_in_importDeclaration5522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_importDeclaration5525 = new BitSet(new long[]{0x0000100000010000L});
    public static final BitSet FOLLOW_DOTSTAR_in_importDeclaration5527 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_importDeclaration5530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_typeDeclaration5583 = new BitSet(new long[]{0x2020000000000080L,0x000000444CE22048L});
    public static final BitSet FOLLOW_classTypeDeclaration_in_typeDeclaration5599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceTypeDeclaration_in_typeDeclaration5615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumTypeDeclaration_in_typeDeclaration5631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_typeDeclaration5647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_classTypeDeclaration5684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_classTypeDeclaration5686 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_classTypeDeclaration5688 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_classExtendsClause_in_classTypeDeclaration5691 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_implementsClause_in_classTypeDeclaration5694 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_classTypeDeclaration5697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_classExtendsClause5761 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_classExtendsClause5763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_interfaceExtendsClause5825 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_interfaceExtendsClause5827 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_interfaceExtendsClause5830 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_interfaceExtendsClause5832 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_IMPLEMENTS_in_implementsClause5908 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_implementsClause5910 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_implementsClause5913 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_implementsClause5915 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeParameterList5971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_genericTypeParameter_in_genericTypeParameterList5973 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeParameterList5976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_genericTypeParameter_in_genericTypeParameterList5978 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeParameterList5982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_genericTypeListClosing6108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_genericTypeListClosing6119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_genericTypeListClosing6130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_genericTypeParameter6163 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_bound_in_genericTypeParameter6165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_bound6229 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_bound6231 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_AND_in_bound6234 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_bound6236 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_ENUM_in_enumTypeDeclaration6264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_enumTypeDeclaration6266 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000800L});
    public static final BitSet FOLLOW_implementsClause_in_enumTypeDeclaration6268 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000800L});
    public static final BitSet FOLLOW_enumBody_in_enumTypeDeclaration6271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_enumBody6331 = new BitSet(new long[]{0x0000000000000080L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_enumScopeDeclarations_in_enumBody6333 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_enumBody6335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstants_in_enumScopeDeclarations6361 = new BitSet(new long[]{0x0000100000000802L});
    public static final BitSet FOLLOW_COMMA_in_enumScopeDeclarations6364 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_enumClassScopeDeclarations_in_enumScopeDeclarations6368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_enumClassScopeDeclarations6396 = new BitSet(new long[]{0x32A0100002800082L,0x000000644EE3A14AL,0x0000000000200000L});
    public static final BitSet FOLLOW_classScopeDeclarations_in_enumClassScopeDeclarations6398 = new BitSet(new long[]{0x32A0100002800082L,0x000000644EE3A14AL,0x0000000000200000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants6424 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_enumConstants6427 = new BitSet(new long[]{0x0000000000000080L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants6429 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_annotationList_in_enumConstant6458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_enumConstant6460 = new BitSet(new long[]{0x0000000022800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_arguments_in_enumConstant6463 = new BitSet(new long[]{0x0000000002800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_enumConstant6466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_in_interfaceTypeDeclaration6497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceTypeDeclaration6499 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000010L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_interfaceTypeDeclaration6501 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000010L});
    public static final BitSet FOLLOW_interfaceExtendsClause_in_interfaceTypeDeclaration6504 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000010L});
    public static final BitSet FOLLOW_interfaceBody_in_interfaceTypeDeclaration6507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList6569 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_typeList6572 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_typeList6574 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_LCURLY_in_classBody6607 = new BitSet(new long[]{0x32A0140002800080L,0x000000644EE3A14AL,0x0000000000200000L});
    public static final BitSet FOLLOW_classScopeDeclarations_in_classBody6609 = new BitSet(new long[]{0x32A0140002800080L,0x000000644EE3A14AL,0x0000000000200000L});
    public static final BitSet FOLLOW_RCURLY_in_classBody6612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_interfaceBody6648 = new BitSet(new long[]{0x32A0140002000080L,0x000000644EE3A14AL,0x0000000000200000L});
    public static final BitSet FOLLOW_interfaceScopeDeclarations_in_interfaceBody6650 = new BitSet(new long[]{0x32A0140002000080L,0x000000644EE3A14AL,0x0000000000200000L});
    public static final BitSet FOLLOW_RCURLY_in_interfaceBody6653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations6702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_classScopeDeclarations6724 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_classScopeDeclarations6739 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_classScopeDeclarations6759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations6761 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations6763 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_classScopeDeclarations6765 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations6768 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations6772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations6776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_classScopeDeclarations6859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations6861 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations6863 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations6865 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations6869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations6873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations6956 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations6958 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations6960 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations6963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_classScopeDeclarations7070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_classScopeDeclarations7072 = new BitSet(new long[]{0x0000100000000840L});
    public static final BitSet FOLLOW_ASSIGN_in_classScopeDeclarations7075 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_variableInitializer_in_classScopeDeclarations7077 = new BitSet(new long[]{0x0000100000000800L});
    public static final BitSet FOLLOW_COMMA_in_classScopeDeclarations7082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_classScopeDeclarations7084 = new BitSet(new long[]{0x0000100000000840L});
    public static final BitSet FOLLOW_ASSIGN_in_classScopeDeclarations7087 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_variableInitializer_in_classScopeDeclarations7089 = new BitSet(new long[]{0x0000100000000800L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations7096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_classScopeDeclarations7155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_classScopeDeclarations7166 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations7168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations7183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_interfaceScopeDeclarations7236 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_interfaceScopeDeclarations7251 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_interfaceScopeDeclarations7271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceScopeDeclarations7273 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_interfaceScopeDeclarations7275 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_interfaceScopeDeclarations7277 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_interfaceScopeDeclarations7280 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations7283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_interfaceScopeDeclarations7349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceScopeDeclarations7351 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_interfaceScopeDeclarations7353 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_interfaceScopeDeclarations7355 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations7358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceScopeDeclarations7462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_interfaceScopeDeclarations7464 = new BitSet(new long[]{0x0000100000000840L});
    public static final BitSet FOLLOW_ASSIGN_in_interfaceScopeDeclarations7467 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_variableInitializer_in_interfaceScopeDeclarations7469 = new BitSet(new long[]{0x0000100000000800L});
    public static final BitSet FOLLOW_COMMA_in_interfaceScopeDeclarations7474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_interfaceScopeDeclarations7476 = new BitSet(new long[]{0x0000100000000840L});
    public static final BitSet FOLLOW_ASSIGN_in_interfaceScopeDeclarations7479 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_variableInitializer_in_interfaceScopeDeclarations7481 = new BitSet(new long[]{0x0000100000000800L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations7488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_interfaceScopeDeclarations7545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations7556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList7583 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_classFieldDeclaratorList7586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList7588 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_classFieldDeclarator7618 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASSIGN_in_classFieldDeclarator7621 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_variableInitializer_in_classFieldDeclarator7623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_variableDeclaratorId7703 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_variableDeclaratorId7705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer7745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer7756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_arrayDeclarator7783 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_arrayDeclarator7785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_arrayDeclaratorList7812 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayInitializer7847 = new BitSet(new long[]{0x128004446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer7850 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer7853 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer7855 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer7859 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayInitializer7864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROWS_in_throwsClause7890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_throwIdentList_in_throwsClause7892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_throwIdentList7936 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_throwIdentList7939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_throwIdentList7941 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_annotation_in_modifierList7997 = new BitSet(new long[]{0x0020000000000082L,0x000000444CE20040L});
    public static final BitSet FOLLOW_modifier_in_modifierList8001 = new BitSet(new long[]{0x0020000000000082L,0x000000444CE20040L});
    public static final BitSet FOLLOW_STATIC_in_modifier8051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_modifier8060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NATIVE_in_modifier8071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_modifier8082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRANSIENT_in_modifier8093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOLATILE_in_modifier8104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRICTFP_in_modifier8115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_modifier8126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_modifier8137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_modifier8148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifier_in_modifier8160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifier_in_localModifierList8183 = new BitSet(new long[]{0x0020000000000082L,0x000000444CE20040L});
    public static final BitSet FOLLOW_FINAL_in_localModifier8229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_localModifier8240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleType_in_type8263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectType_in_type8274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_simpleType8298 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_simpleType8301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_simpleType8338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedTypeIdent_in_objectType8383 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_objectType8386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedTypeIdent_in_objectType8427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeIdent_in_qualifiedTypeIdent8491 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedTypeIdent8494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_typeIdent_in_qualifiedTypeIdent8496 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified8551 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedTypeIdentSimplified8554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified8556 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_IDENT_in_typeIdent8611 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_genericTypeArgumentList_in_typeIdent8613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_typeIdentSimplified8651 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_typeIdentSimplified8653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_primitiveType0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeArgumentList8801 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_genericTypeArgumentList8803 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeArgumentList8806 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_genericTypeArgumentList8808 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeArgumentList8812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericTypeArgument8845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_genericTypeArgument8856 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000010L});
    public static final BitSet FOLLOW_genericWildcardBoundType_in_genericTypeArgument8858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_genericWildcardBoundType8904 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_genericWildcardBoundType8913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeArgumentListSimplified8936 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified8938 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeArgumentListSimplified8941 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified8943 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeArgumentListSimplified8947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericTypeArgumentSimplified8984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_genericTypeArgumentSimplified8995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_formalParameterList9028 = new BitSet(new long[]{0x12A0080000000080L,0x000000444EE38142L,0x0000000000200000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_formalParameterList9058 = new BitSet(new long[]{0x0000080000000800L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterList9061 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000000000200000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_formalParameterList9063 = new BitSet(new long[]{0x0000080000000800L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterList9068 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000000000200000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_formalParameterList9070 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_formalParameterList9130 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_formalParameterList9212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_formalParameterStandardDecl9242 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_formalParameterStandardDecl9244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterStandardDecl9246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_formalParameterVarArgDecl9299 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_formalParameterVarArgDecl9301 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_ELLIPSIS_in_formalParameterVarArgDecl9303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterVarArgDecl9305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentifier9364 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentifier9395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentifier9397 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_annotation_in_annotationList9454 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_AT_in_annotation9492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_annotation9494 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_annotationInit_in_annotation9496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_annotationInit9524 = new BitSet(new long[]{0x128000446AA01080L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_annotationInitializers_in_annotationInit9526 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationInit9528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationInitializer_in_annotationInitializers9585 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_annotationInitializers9588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_annotationInitializer_in_annotationInitializers9590 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationInitializers9613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_annotationInitializer9658 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGN_in_annotationInitializer9660 = new BitSet(new long[]{0x128000446AA01080L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationInitializer9662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationElementValueExpression_in_annotationElementValue9689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotationElementValue9700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationElementValueArrayInitializer_in_annotationElementValue9711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_annotationElementValueExpression9738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_annotationElementValueArrayInitializer9775 = new BitSet(new long[]{0x128004446AA01880L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer9778 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_annotationElementValueArrayInitializer9781 = new BitSet(new long[]{0x128000446AA01080L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer9783 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_annotationElementValueArrayInitializer9790 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_annotationElementValueArrayInitializer9794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_annotationTypeDeclaration9832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_INTERFACE_in_annotationTypeDeclaration9834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_annotationTypeDeclaration9836 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_annotationBody_in_annotationTypeDeclaration9838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_annotationBody9875 = new BitSet(new long[]{0x32A0040000000080L,0x000000444EE3A14AL,0x0000000000200000L});
    public static final BitSet FOLLOW_annotationScopeDeclarations_in_annotationBody9877 = new BitSet(new long[]{0x32A0040000000080L,0x000000444EE3A14AL,0x0000000000200000L});
    public static final BitSet FOLLOW_RCURLY_in_annotationBody9880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_annotationScopeDeclarations9917 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_annotationScopeDeclarations9919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_annotationScopeDeclarations9934 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationScopeDeclarations9936 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationScopeDeclarations9938 = new BitSet(new long[]{0x8000100000000000L});
    public static final BitSet FOLLOW_annotationDefaultValue_in_annotationScopeDeclarations9940 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_annotationScopeDeclarations9943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_annotationScopeDeclarations9972 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_annotationScopeDeclarations9974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_annotationScopeDeclarations10010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_annotationDefaultValue10041 = new BitSet(new long[]{0x128000446AA01080L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationDefaultValue10043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_block10070 = new BitSet(new long[]{0x73E014446AA01080L,0x000000FDFFEFA76BL,0x000000000FE00000L});
    public static final BitSet FOLLOW_blockStatement_in_block10072 = new BitSet(new long[]{0x73E014446AA01080L,0x000000FDFFEFA76BL,0x000000000FE00000L});
    public static final BitSet FOLLOW_RCURLY_in_block10075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_blockStatement10129 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_blockStatement10131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_blockStatement10142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement10153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_localVariableDeclaration10188 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration10190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_localVariableInitialisation_in_localVariableDeclaration10192 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_localVariableDeclaration10195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_localVariableInitialisation_in_localVariableDeclaration10197 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_localVariableInitialisation10230 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASSIGN_in_localVariableInitialisation10241 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_variableInitializer_in_localVariableInitialisation10243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement10290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_statement10301 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_expression_in_statement10305 = new BitSet(new long[]{0x0000100000000400L});
    public static final BitSet FOLLOW_COLON_in_statement10321 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_expression_in_statement10325 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement10327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_statement10391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_statement10482 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement10484 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000000000FE00000L});
    public static final BitSet FOLLOW_statement_in_statement10488 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_ELSE_in_statement10504 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000000000FE00000L});
    public static final BitSet FOLLOW_statement_in_statement10508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_statement10728 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_statement10730 = new BitSet(new long[]{0x12A010446AA01080L,0x0000006CDEEF8162L,0x000000000FE00000L});
    public static final BitSet FOLLOW_forInit_in_statement10746 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement10749 = new BitSet(new long[]{0x128010446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_forCondition_in_statement10751 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement10754 = new BitSet(new long[]{0x128008446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_forUpdater_in_statement10756 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_statement10759 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000000000FE00000L});
    public static final BitSet FOLLOW_statement_in_statement10761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_statement10815 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_statement10817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_statement10819 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_statement10821 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_expression_in_statement10823 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_statement10825 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000000000FE00000L});
    public static final BitSet FOLLOW_statement_in_statement10827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_statement10959 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement10961 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000000000FE00000L});
    public static final BitSet FOLLOW_statement_in_statement10963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_statement11023 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000000000FE00000L});
    public static final BitSet FOLLOW_statement_in_statement11025 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_WHILE_in_statement11027 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement11029 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement11031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_statement11083 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_statement11085 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_catches_in_statement11088 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_finallyClause_in_statement11090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_finallyClause_in_statement11095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_statement11142 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement11144 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_LCURLY_in_statement11146 = new BitSet(new long[]{0x8400000000000000L});
    public static final BitSet FOLLOW_switchBlockLabels_in_statement11148 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_statement11150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_statement11193 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement11195 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_statement11197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_statement11244 = new BitSet(new long[]{0x128010446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_expression_in_statement11246 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement11249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_statement11320 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_expression_in_statement11322 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement11324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_statement11396 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_statement11398 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement11401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_statement11482 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_statement11484 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement11487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_statement11565 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_statement11567 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000000000FE00000L});
    public static final BitSet FOLLOW_statement_in_statement11569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statement11641 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement11643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_statement11665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches11718 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_CATCH_in_catchClause11767 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_catchClause11770 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000000000200000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_catchClause11772 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_catchClause11774 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_catchClause11776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_finallyClause11799 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_finallyClause11801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabels1_in_switchBlockLabels11847 = new BitSet(new long[]{0x8400000000000000L});
    public static final BitSet FOLLOW_switchDefaultLabel_in_switchBlockLabels11850 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_switchCaseLabels2_in_switchBlockLabels11853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabel_in_switchCaseLabels111906 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_switchCaseLabel_in_switchCaseLabels211930 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_CASE_in_switchCaseLabel11962 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_expression_in_switchCaseLabel11964 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_switchCaseLabel11966 = new BitSet(new long[]{0x73E010446AA01082L,0x000000FDFFEFA76BL,0x000000000FE00000L});
    public static final BitSet FOLLOW_blockStatement_in_switchCaseLabel11968 = new BitSet(new long[]{0x73E010446AA01082L,0x000000FDFFEFA76BL,0x000000000FE00000L});
    public static final BitSet FOLLOW_DEFAULT_in_switchDefaultLabel12009 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_switchDefaultLabel12011 = new BitSet(new long[]{0x73E010446AA01082L,0x000000FDFFEFA76BL,0x000000000FE00000L});
    public static final BitSet FOLLOW_blockStatement_in_switchDefaultLabel12013 = new BitSet(new long[]{0x73E010446AA01082L,0x000000FDFFEFA76BL,0x000000000FE00000L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_forInit12053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit12067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_forCondition12142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdater12169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parenthesizedExpression12200 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_expression_in_parenthesizedExpression12202 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parenthesizedExpression12204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList12261 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_expressionList12264 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_expression_in_expressionList12266 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_assignmentExpression_in_expression12295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_assignOp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignOp_in_assignStat12494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_assignmentExpression12537 = new BitSet(new long[]{0x001540A280004262L});
    public static final BitSet FOLLOW_assignOp_in_assignmentExpression12563 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_assignmentExpression_in_assignmentExpression12565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalOrExpression_in_conditionalExpression12619 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_QUESTION_in_conditionalExpression12622 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_assignmentExpression_in_conditionalExpression12624 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_conditionalExpression12626 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_conditionalExpression_in_conditionalExpression12628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression12686 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_logicalOrOp_in_logicalOrExpression12689 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression12692 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_LOGICAL_OR_in_logicalOrOp12710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_logicalAndExpression12733 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_logicalAndOp_in_logicalAndExpression12736 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_logicalAndExpression12739 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_LOGICAL_AND_in_logicalAndOp12757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression12789 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_bitwiseOrOp_in_inclusiveOrExpression12792 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression12795 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_OR_in_bitwiseOrOp12812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression12837 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_bitwiseXorOp_in_exclusiveOrExpression12840 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression12843 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_XOR_in_bitwiseXorOp12861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression12885 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_bitwiseAndOp_in_andExpression12888 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression12891 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_AND_in_bitwiseAndOp12912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression12937 = new BitSet(new long[]{0x0000000800040002L});
    public static final BitSet FOLLOW_equalityOp_in_equalityExpression12960 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression12975 = new BitSet(new long[]{0x0000000800040002L});
    public static final BitSet FOLLOW_EQUAL_in_equalityOp13009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_equalityOp13035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression13081 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_INSTANCEOF_in_instanceOfExpression13084 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression13087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression13112 = new BitSet(new long[]{0x0000000003180002L});
    public static final BitSet FOLLOW_compareOp_in_relationalExpression13128 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression13144 = new BitSet(new long[]{0x0000000003180002L});
    public static final BitSet FOLLOW_LESS_OR_EQUAL_in_compareOp13171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_OR_EQUAL_in_compareOp13197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_compareOp13223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_compareOp13249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression13274 = new BitSet(new long[]{0x0000A00000000102L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_shiftExpression13293 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_shiftExpression13313 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_SHIFT_LEFT_in_shiftExpression13333 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression13364 = new BitSet(new long[]{0x0000A00000000102L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression13399 = new BitSet(new long[]{0x0000004040000002L});
    public static final BitSet FOLLOW_additiveOp_in_additiveExpression13414 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression13430 = new BitSet(new long[]{0x0000004040000002L});
    public static final BitSet FOLLOW_PLUS_in_additiveOp13460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_additiveOp13487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression13529 = new BitSet(new long[]{0x0002000100002002L});
    public static final BitSet FOLLOW_mulOp_in_multiplicativeExpression13542 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression13558 = new BitSet(new long[]{0x0002000100002002L});
    public static final BitSet FOLLOW_STAR_in_mulOp13595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_in_mulOp13622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOD_in_mulOp13649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveOp_in_unaryExpression13689 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression13691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_incDecOp_in_unaryExpression13702 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpression13704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression13725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INC_in_incDecOp13741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_in_incDecOp13754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_unaryExpressionNotPlusMinus13779 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus13781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOGICAL_NOT_in_unaryExpressionNotPlusMinus13829 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus13831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpressionNotPlusMinus13871 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_unaryExpressionNotPlusMinus13873 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpressionNotPlusMinus13875 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus13877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpressionNotPlusMinus13913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpression_in_postfixedExpression13989 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_DOT_in_postfixedExpression14056 = new BitSet(new long[]{0x0000000002000000L,0x0000000090040000L,0x0000000000200000L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_postfixedExpression14107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_postfixedExpression14191 = new BitSet(new long[]{0x0000000020609002L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression14297 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_THIS_in_postfixedExpression14377 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_SUPER_in_postfixedExpression14436 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression14438 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_SUPER_in_postfixedExpression14488 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_postfixedExpression14492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_postfixedExpression14494 = new BitSet(new long[]{0x0000000020609002L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression14567 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_innerNewExpression_in_postfixedExpression14640 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_LBRACK_in_postfixedExpression14699 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_expression_in_postfixedExpression14701 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_postfixedExpression14703 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_INC_in_postfixedExpression14797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_in_postfixedExpression14828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_primaryExpression14887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primaryExpression14899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_newExpression_in_primaryExpression14926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentExpression_in_primaryExpression14938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_primaryExpression14950 = new BitSet(new long[]{0x0000000000000000L,0x0000000090000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression14966 = new BitSet(new long[]{0x0000000020008000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression14985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression15046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression15048 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression15050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression15175 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression15177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_primaryExpression15237 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression15239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_primaryExpression15306 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression15380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression15447 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression15449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression15506 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression15508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression15510 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression15536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primaryExpression15794 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_arrayDeclarator_in_primaryExpression15855 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression15920 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_primaryExpression15922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_primaryExpression15977 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression15979 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_primaryExpression15981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentExpression16058 = new BitSet(new long[]{0x0000000020408002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_qualifiedIdentExpression16127 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression16197 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_qualifiedIdentExpression16199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression16269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression16329 = new BitSet(new long[]{0x2000000002000000L,0x0000000090040000L,0x0000000000200000L});
    public static final BitSet FOLLOW_CLASS_in_qualifiedIdentExpression16348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_qualifiedIdentExpression16411 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression16435 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression16437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression16498 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression16500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentExpression16502 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression16504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentExpression16564 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression16566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_qualifiedIdentExpression16647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression16707 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression16709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerNewExpression_in_qualifiedIdentExpression16764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_newExpression16850 = new BitSet(new long[]{0x1280000002000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_primitiveType_in_newExpression16867 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_newArrayConstruction_in_newExpression16869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_newExpression16915 = new BitSet(new long[]{0x1280000002000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_qualifiedTypeIdentSimplified_in_newExpression16918 = new BitSet(new long[]{0x0000000020400000L});
    public static final BitSet FOLLOW_newArrayConstruction_in_newExpression16937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_newExpression17007 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_newExpression17009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_newExpression17066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_innerNewExpression17182 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_innerNewExpression17184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_innerNewExpression17187 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_innerNewExpression17200 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_innerNewExpression17202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_innerNewExpression17232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_newArrayConstruction17301 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_arrayInitializer_in_newArrayConstruction17303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_newArrayConstruction17314 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_expression_in_newArrayConstruction17316 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_newArrayConstruction17318 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LBRACK_in_newArrayConstruction17321 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_expression_in_newArrayConstruction17323 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_newArrayConstruction17325 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_newArrayConstruction17329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_arguments17353 = new BitSet(new long[]{0x128008446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_sepArgs_in_arguments17355 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_arguments17358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_sepArgs17413 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_sepArgs17416 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_expression_in_sepArgs17418 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_set_in_literal0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationList_in_synpred1_SSQSA_Java5373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_synpred17_SSQSA_Java6108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_synpred18_SSQSA_Java6119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_synpred19_SSQSA_Java6130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bound_in_synpred20_SSQSA_Java6165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred44_SSQSA_Java6739 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_synpred44_SSQSA_Java6759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_synpred44_SSQSA_Java6761 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred44_SSQSA_Java6763 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred44_SSQSA_Java6765 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred44_SSQSA_Java6768 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred44_SSQSA_Java6772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred44_SSQSA_Java6776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred44_SSQSA_Java6859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_synpred44_SSQSA_Java6861 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred44_SSQSA_Java6863 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred44_SSQSA_Java6865 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred44_SSQSA_Java6869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred44_SSQSA_Java6873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred44_SSQSA_Java6956 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred44_SSQSA_Java6958 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred44_SSQSA_Java6960 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred44_SSQSA_Java6963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred48_SSQSA_Java6724 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred48_SSQSA_Java6739 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_synpred48_SSQSA_Java6759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_synpred48_SSQSA_Java6761 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred48_SSQSA_Java6763 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred48_SSQSA_Java6765 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred48_SSQSA_Java6768 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred48_SSQSA_Java6772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred48_SSQSA_Java6776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred48_SSQSA_Java6859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_synpred48_SSQSA_Java6861 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred48_SSQSA_Java6863 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred48_SSQSA_Java6865 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred48_SSQSA_Java6869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred48_SSQSA_Java6873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred48_SSQSA_Java6956 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred48_SSQSA_Java6958 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred48_SSQSA_Java6960 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred48_SSQSA_Java6963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred48_SSQSA_Java7070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_synpred48_SSQSA_Java7072 = new BitSet(new long[]{0x0000100000000840L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred48_SSQSA_Java7075 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_variableInitializer_in_synpred48_SSQSA_Java7077 = new BitSet(new long[]{0x0000100000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred48_SSQSA_Java7082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_synpred48_SSQSA_Java7084 = new BitSet(new long[]{0x0000100000000840L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred48_SSQSA_Java7087 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_variableInitializer_in_synpred48_SSQSA_Java7089 = new BitSet(new long[]{0x0000100000000800L});
    public static final BitSet FOLLOW_SEMI_in_synpred48_SSQSA_Java7096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred49_SSQSA_Java7155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_synpred50_SSQSA_Java7166 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred50_SSQSA_Java7168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred56_SSQSA_Java7251 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_synpred56_SSQSA_Java7271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_synpred56_SSQSA_Java7273 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred56_SSQSA_Java7275 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred56_SSQSA_Java7277 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred56_SSQSA_Java7280 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred56_SSQSA_Java7283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred56_SSQSA_Java7349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_synpred56_SSQSA_Java7351 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred56_SSQSA_Java7353 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred56_SSQSA_Java7355 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred56_SSQSA_Java7358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred60_SSQSA_Java7236 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred60_SSQSA_Java7251 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_synpred60_SSQSA_Java7271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_synpred60_SSQSA_Java7273 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred60_SSQSA_Java7275 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred60_SSQSA_Java7277 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred60_SSQSA_Java7280 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred60_SSQSA_Java7283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred60_SSQSA_Java7349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_synpred60_SSQSA_Java7351 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred60_SSQSA_Java7353 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred60_SSQSA_Java7355 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred60_SSQSA_Java7358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred60_SSQSA_Java7462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_synpred60_SSQSA_Java7464 = new BitSet(new long[]{0x0000100000000840L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred60_SSQSA_Java7467 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_variableInitializer_in_synpred60_SSQSA_Java7469 = new BitSet(new long[]{0x0000100000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred60_SSQSA_Java7474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_synpred60_SSQSA_Java7476 = new BitSet(new long[]{0x0000100000000840L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred60_SSQSA_Java7479 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_variableInitializer_in_synpred60_SSQSA_Java7481 = new BitSet(new long[]{0x0000100000000800L});
    public static final BitSet FOLLOW_SEMI_in_synpred60_SSQSA_Java7488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred61_SSQSA_Java7545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_synpred66_SSQSA_Java7812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred71_SSQSA_Java7997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_synpred86_SSQSA_Java8298 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred86_SSQSA_Java8301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedTypeIdent_in_synpred87_SSQSA_Java8383 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred87_SSQSA_Java8386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred88_SSQSA_Java8494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_typeIdent_in_synpred88_SSQSA_Java8496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred99_SSQSA_Java8806 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_synpred99_SSQSA_Java8808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericWildcardBoundType_in_synpred101_SSQSA_Java8858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred105_SSQSA_Java9061 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000000000200000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred105_SSQSA_Java9063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred107_SSQSA_Java9058 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_synpred107_SSQSA_Java9061 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000000000200000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred107_SSQSA_Java9063 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_synpred107_SSQSA_Java9068 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000000000200000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_synpred107_SSQSA_Java9070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_synpred108_SSQSA_Java9130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred109_SSQSA_Java9395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_synpred109_SSQSA_Java9397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred110_SSQSA_Java9454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred122_SSQSA_Java9917 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_synpred122_SSQSA_Java9919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_synpred122_SSQSA_Java9934 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred122_SSQSA_Java9936 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred122_SSQSA_Java9938 = new BitSet(new long[]{0x8000100000000000L});
    public static final BitSet FOLLOW_annotationDefaultValue_in_synpred122_SSQSA_Java9940 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred122_SSQSA_Java9943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_synpred122_SSQSA_Java9972 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred122_SSQSA_Java9974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred124_SSQSA_Java10129 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred124_SSQSA_Java10131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred125_SSQSA_Java10142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_synpred131_SSQSA_Java10504 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000000000FE00000L});
    public static final BitSet FOLLOW_statement_in_synpred131_SSQSA_Java10508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_synpred133_SSQSA_Java10746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_synpred136_SSQSA_Java10746 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred136_SSQSA_Java10749 = new BitSet(new long[]{0x128010446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_forCondition_in_synpred136_SSQSA_Java10751 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred136_SSQSA_Java10754 = new BitSet(new long[]{0x128008446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_forUpdater_in_synpred136_SSQSA_Java10756 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred136_SSQSA_Java10759 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000000000FE00000L});
    public static final BitSet FOLLOW_statement_in_synpred136_SSQSA_Java10761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabels1_in_synpred155_SSQSA_Java11847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabels2_in_synpred157_SSQSA_Java11853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabel_in_synpred158_SSQSA_Java11906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred162_SSQSA_Java12053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_synpred163_SSQSA_Java12067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred203_SSQSA_Java13871 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000000000200000L});
    public static final BitSet FOLLOW_type_in_synpred203_SSQSA_Java13873 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred203_SSQSA_Java13875 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred203_SSQSA_Java13877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_synpred231_SSQSA_Java16127 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_synpred231_SSQSA_Java16197 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_synpred231_SSQSA_Java16199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred239_SSQSA_Java16329 = new BitSet(new long[]{0x2000000002000000L,0x0000000090040000L,0x0000000000200000L});
    public static final BitSet FOLLOW_CLASS_in_synpred239_SSQSA_Java16348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_synpred239_SSQSA_Java16411 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SUPER_in_synpred239_SSQSA_Java16435 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred239_SSQSA_Java16437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_synpred239_SSQSA_Java16498 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_synpred239_SSQSA_Java16500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_synpred239_SSQSA_Java16502 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred239_SSQSA_Java16504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred239_SSQSA_Java16564 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred239_SSQSA_Java16566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_synpred239_SSQSA_Java16647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_synpred239_SSQSA_Java16707 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred239_SSQSA_Java16709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerNewExpression_in_synpred239_SSQSA_Java16764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_synpred243_SSQSA_Java17007 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_synpred243_SSQSA_Java17009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_synpred245_SSQSA_Java17200 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_synpred245_SSQSA_Java17202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_synpred247_SSQSA_Java17321 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000000000FE00000L});
    public static final BitSet FOLLOW_expression_in_synpred247_SSQSA_Java17323 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_synpred247_SSQSA_Java17325 = new BitSet(new long[]{0x0000000000000002L});

}